@rom
@start
@expand=#DEF(#POKE #LINK:Pokes)
@expand=#DEF(#FACT #LINK:Facts)
@set-handle-unsupported-macros=1

; Loading Screen
;
; #UDGTABLE
; { =h Jewels of Babylon Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $4020 DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$7E,$EE,$FE,$7E,$7C,$7C,$7E,$7C,$FE,$7C,$7C,$80 ;
 $4040 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$01,$18,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4060 DEFB $FF,$F8,$1F,$87,$FF,$E1,$C3,$87,$87,$FF,$C3,$FF,$83,$FF,$00,$00,$60,$00,$00,$01,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4080 DEFB $F8,$38,$1F,$87,$F9,$F0,$3C,$0F,$87,$F9,$C3,$FC,$9F,$E1,$00,$1F,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $40A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$D5,$80,$00,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $E0,$FC,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$7F,$FF,$FF,$FF,$FF,$FD,$55,$50,$00,$00,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$FE,$42,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $4120 DEFB $F8,$00,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$5A,$64,$92,$42,$42,$86,$42,$42,$92,$82,$42,$80 ;
 $4140 DEFB $FF,$F8,$1F,$00,$01,$81,$FF,$81,$00,$01,$81,$FF,$E0,$19,$00,$00,$00,$00,$00,$01,$18,$62,$7C,$7E,$FE,$C6,$38,$7C,$7E,$00,$00,$80 ;
 $4160 DEFB $FF,$F8,$1F,$87,$DF,$E1,$C3,$87,$87,$DF,$C3,$FF,$80,$7F,$00,$00,$F0,$00,$00,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4180 DEFB $F8,$38,$1F,$87,$F9,$F0,$7E,$0F,$87,$F9,$C3,$FC,$8F,$E1,$06,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $41A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41C0 DEFB $80,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$CA,$A0,$00,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $E0,$FC,$07,$E0,$7F,$00,$7C,$07,$C0,$C0,$FF,$FF,$80,$FF,$01,$F0,$3F,$00,$00,$7F,$FF,$FF,$FF,$FF,$FE,$AA,$A0,$00,$00,$00,$00,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$10,$42,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4220 DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$18,$64,$10,$48,$42,$80,$48,$42,$10,$82,$42,$80 ;
 $4240 DEFB $FF,$F8,$1F,$00,$01,$81,$C3,$81,$00,$01,$81,$FF,$C0,$01,$00,$00,$00,$00,$00,$01,$18,$C6,$82,$42,$92,$44,$44,$42,$42,$00,$00,$80 ;
 $4260 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$03,$B0,$00,$00,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4280 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$1F,$F0,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $42A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42C0 DEFB $80,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$D5,$50,$00,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $E0,$FC,$07,$C0,$3F,$00,$0E,$0F,$C0,$C0,$FF,$FE,$00,$3F,$01,$F0,$3F,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$55,$50,$00,$00,$00,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$10,$7E,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4320 DEFB $F8,$00,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$18,$54,$10,$78,$7C,$80,$78,$7C,$10,$82,$7C,$80 ;
 $4340 DEFB $FF,$F8,$1F,$80,$01,$C3,$C3,$C3,$80,$01,$C3,$FF,$C0,$01,$00,$00,$00,$00,$00,$01,$18,$C0,$82,$48,$10,$44,$44,$42,$48,$00,$00,$80 ;
 $4360 DEFB $FF,$F8,$1F,$80,$1F,$E1,$99,$87,$80,$1F,$C3,$FF,$F0,$07,$00,$07,$20,$00,$00,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4380 DEFB $FC,$00,$1F,$80,$01,$F0,$7E,$0F,$80,$01,$C0,$00,$80,$01,$3F,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$C7,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43C0 DEFB $C0,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$EA,$A8,$00,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $E0,$FC,$0F,$C0,$3F,$80,$07,$0F,$E1,$E1,$FF,$FC,$00,$1F,$83,$F8,$7F,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$AA,$A4,$00,$00,$00,$00,$00 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$10,$42,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4420 DEFB $F8,$00,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$18,$4C,$10,$48,$48,$80,$48,$40,$10,$82,$48,$80 ;
 $4440 DEFB $FF,$F8,$1F,$80,$01,$C3,$E7,$C3,$80,$01,$C3,$FF,$80,$01,$00,$00,$00,$00,$00,$01,$18,$C0,$82,$78,$10,$54,$7C,$7C,$78,$00,$00,$80 ;
 $4460 DEFB $FF,$F8,$1F,$80,$1F,$E0,$99,$07,$80,$1F,$C3,$FF,$F8,$03,$00,$06,$60,$00,$00,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4480 DEFB $FC,$00,$3F,$80,$01,$F8,$7E,$1F,$80,$01,$C0,$00,$80,$03,$71,$B0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$8F,$00,$00,$00,$00,$00,$01,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44C0 DEFB $FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$FF,$F5,$54,$00,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$03,$FF,$FF,$FF,$FF,$FF,$FF,$55,$54,$00,$00,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$10,$42,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4520 DEFB $F8,$00,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$18,$4C,$10,$42,$44,$86,$42,$40,$10,$82,$44,$80 ;
 $4540 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$01,$18,$C0,$82,$48,$10,$54,$44,$48,$48,$00,$00,$80 ;
 $4560 DEFB $FF,$F8,$1F,$86,$1F,$F0,$3C,$0F,$86,$1F,$C3,$FF,$FE,$03,$00,$0C,$C0,$00,$00,$01,$00,$63,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4580 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$73,$B0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$61,$FC,$00,$00,$00,$00,$00,$1F,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $E0,$00,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F2,$AA,$80,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $E0,$00,$0F,$06,$0F,$87,$03,$83,$E3,$E1,$FF,$F0,$3E,$07,$81,$F8,$7F,$00,$03,$FF,$FF,$FF,$FF,$FF,$FE,$AA,$A0,$00,$00,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$00,$10,$42,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4620 DEFB $F8,$F8,$1F,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$18,$EE,$38,$7E,$EE,$7C,$7E,$E0,$38,$7C,$EE,$80 ;
 $4640 DEFB $FF,$F8,$1F,$87,$F9,$E1,$C3,$87,$87,$F9,$C3,$FF,$87,$F1,$00,$00,$00,$00,$00,$01,$5A,$C0,$82,$40,$10,$7C,$44,$44,$42,$00,$00,$80 ;
 $4660 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$1D,$80,$00,$00,$01,$00,$46,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4680 DEFB $FF,$00,$7F,$00,$01,$E0,$3C,$07,$00,$01,$80,$00,$98,$07,$3F,$B0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$F8,$00,$00,$00,$00,$00,$FF,$FF,$FF,$78,$00,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $E0,$F0,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$FF,$FF,$FD,$55,$40,$00,$00,$00,$00,$00 ;
 $46E0 DEFB $E0,$00,$1F,$06,$0F,$87,$C3,$C3,$C3,$E1,$FF,$F0,$7F,$07,$81,$F8,$7F,$00,$03,$FF,$FF,$FF,$FF,$FF,$FF,$55,$56,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4720 DEFB $F9,$F8,$1F,$9F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4740 DEFB $FF,$F8,$1F,$87,$F9,$E1,$C3,$87,$87,$F9,$C3,$FF,$87,$F9,$00,$00,$00,$00,$00,$01,$7E,$7C,$7C,$E0,$38,$28,$C6,$EE,$7E,$00,$00,$80 ;
 $4760 DEFB $FF,$F8,$1F,$87,$FF,$F0,$3C,$0F,$87,$FF,$C3,$FF,$FF,$E1,$00,$1B,$00,$00,$00,$01,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80 ;
 $4780 DEFB $FF,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$3E,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$AE,$00,$00,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $E0,$F8,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$FA,$AA,$A0,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $E0,$00,$3F,$0F,$0F,$87,$C3,$C0,$C3,$E1,$FF,$E0,$FF,$83,$80,$F8,$7F,$00,$03,$FF,$FF,$FF,$FF,$FF,$FE,$AA,$A2,$00,$00,$00,$00,$00 ;
 $4800 DEFB $E0,$00,$0F,$0F,$0F,$87,$C3,$E0,$43,$E1,$FF,$E1,$FF,$C3,$80,$78,$7F,$00,$0B,$FF,$FF,$FF,$FF,$FF,$FD,$55,$54,$00,$00,$00,$00,$00 ;
 $4820 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$17,$CF,$FF,$FE,$DF,$EF,$FD,$55,$11,$00,$00,$00,$00,$00 ;
 $4840 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$1D,$99,$00,$03,$F7,$BF,$00,$0A,$C4,$00,$00,$00,$00,$00 ;
 $4860 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$F4,$00,$1F,$63,$2F,$C0,$00,$51,$00,$00,$00,$00,$00 ;
 $4880 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FA,$DF,$71,$0F,$80,$FF,$ED,$50,$40,$00,$00,$00,$00 ;
 $48A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$D0,$EB,$E0,$57,$F8,$7F,$50,$20,$00,$00,$00,$00,$00 ;
 $48C0 DEFB $42,$44,$10,$44,$44,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1D,$85,$1F,$3E,$E9,$40,$81,$3F,$FC,$00,$00,$00,$1F ;
 $48E0 DEFB $44,$18,$42,$18,$42,$42,$46,$46,$40,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$43,$F8,$13,$4E,$ED,$B8,$54,$00,$00,$00,$00,$00,$00 ;
 $4900 DEFB $E0,$00,$07,$0F,$0F,$87,$03,$F0,$03,$E1,$FF,$E1,$FF,$C3,$80,$38,$7F,$00,$0B,$FF,$FF,$FF,$FF,$FF,$FA,$AA,$A2,$00,$00,$00,$00,$00 ;
 $4920 DEFB $E0,$F8,$07,$0F,$0F,$87,$C3,$F8,$3F,$E1,$FE,$30,$7F,$07,$87,$C0,$7F,$00,$17,$EF,$FF,$FF,$3F,$EF,$FF,$AA,$A2,$00,$00,$00,$00,$00 ;
 $4940 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$3A,$00,$84,$EF,$DC,$00,$02,$62,$00,$00,$00,$00,$00 ;
 $4960 DEFB $00,$00,$42,$3C,$42,$00,$40,$3C,$3C,$78,$3E,$42,$3C,$00,$00,$00,$00,$00,$1C,$F2,$00,$1F,$07,$07,$C0,$00,$69,$00,$00,$00,$00,$00 ;
 $4980 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$D5,$BF,$F0,$0F,$80,$7F,$F2,$A6,$80,$00,$00,$00,$00 ;
 $49A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$68,$35,$F1,$AF,$BC,$7E,$A2,$E0,$00,$00,$00,$00,$00 ;
 $49C0 DEFB $42,$38,$0C,$44,$38,$20,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$86,$A4,$AF,$A4,$0E,$82,$1F,$00,$00,$00,$00,$03 ;
 $49E0 DEFB $78,$18,$42,$18,$7C,$42,$42,$42,$7E,$42,$00,$00,$00,$00,$00,$00,$00,$00,$03,$01,$FF,$EB,$6E,$E5,$AA,$A8,$00,$00,$00,$00,$00,$00 ;
 $4A00 DEFB $E0,$FC,$07,$00,$0F,$80,$07,$FC,$07,$E1,$FF,$E1,$FF,$C3,$80,$38,$7F,$00,$1B,$FF,$FF,$FF,$FF,$FF,$C5,$55,$51,$00,$00,$00,$00,$00 ;
 $4A20 DEFB $E0,$00,$0F,$0F,$0F,$87,$03,$F0,$7F,$E1,$FC,$30,$3E,$07,$87,$E0,$7F,$00,$17,$EF,$F8,$7F,$EF,$FF,$F0,$D5,$14,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$71,$00,$07,$2F,$C3,$00,$01,$55,$00,$00,$00,$00,$00 ;
 $4A60 DEFB $00,$00,$62,$42,$42,$00,$40,$42,$42,$44,$08,$62,$42,$00,$00,$00,$00,$00,$0A,$F9,$00,$1F,$13,$03,$C0,$00,$D1,$00,$00,$00,$00,$00 ;
 $4A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$A8,$3F,$F0,$19,$C0,$7D,$50,$0A,$00,$00,$00,$00,$00 ;
 $4AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$74,$1E,$FF,$FF,$FF,$FD,$40,$84,$00,$00,$0E,$0F,$C0 ;
 $4AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$46,$D4,$55,$49,$76,$04,$3C,$00,$00,$00,$00,$00 ;
 $4AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$21,$FF,$FC,$AC,$6D,$55,$54,$00,$00,$00,$00,$00,$00 ;
 $4B00 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$1B,$BF,$BD,$EF,$FF,$FF,$CB,$EA,$8A,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $E0,$00,$0F,$0F,$0F,$80,$07,$E0,$FF,$E0,$00,$38,$00,$0F,$87,$F0,$7F,$00,$17,$EF,$00,$1F,$D7,$EF,$C0,$06,$AA,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$F2,$00,$27,$DF,$EF,$00,$02,$6A,$00,$00,$00,$00,$00 ;
 $4B60 DEFB $00,$00,$52,$42,$42,$00,$40,$42,$42,$42,$08,$52,$40,$00,$00,$00,$00,$00,$05,$F8,$00,$3E,$07,$01,$E0,$00,$EC,$00,$00,$00,$00,$00 ;
 $4B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$77,$FF,$E0,$3B,$E0,$3E,$AA,$99,$00,$00,$00,$00,$00 ;
 $4BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7A,$0D,$FE,$FF,$FF,$FE,$80,$00,$03,$E7,$FB,$FF,$FF ;
 $4BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$A2,$DB,$A0,$15,$B4,$20,$38,$00,$00,$00,$00,$00 ;
 $4BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F9,$81,$FF,$FF,$83,$2A,$AA,$A8,$00,$00,$00,$00,$00,$00 ;
 $4C00 DEFB $E0,$FF,$03,$00,$0F,$80,$1F,$FE,$0F,$E1,$FF,$E1,$FF,$C3,$86,$08,$7F,$00,$1B,$7E,$ED,$7F,$FF,$FF,$7E,$D5,$51,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$17,$EE,$00,$07,$AF,$7F,$02,$A3,$04,$00,$00,$00,$00,$00 ;
 $4C40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$E4,$00,$07,$BF,$EF,$00,$01,$51,$00,$00,$00,$00,$00 ;
 $4C60 DEFB $00,$00,$4A,$42,$42,$00,$40,$42,$7E,$42,$08,$4A,$4E,$00,$00,$00,$00,$00,$01,$FC,$00,$3E,$03,$00,$E0,$01,$D4,$00,$00,$00,$00,$00 ;
 $4C80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$E0,$77,$F0,$BF,$55,$02,$00,$00,$00,$00,$00 ;
 $4CA0 DEFB $3C,$00,$10,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$35,$06,$FE,$FF,$FF,$FD,$01,$07,$7F,$7F,$55,$FF,$FF ;
 $4CC0 DEFB $78,$00,$42,$00,$7C,$3C,$42,$42,$7E,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$54,$DB,$6E,$ED,$B6,$52,$30,$00,$00,$00,$00,$00 ;
 $4CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FE,$01,$FF,$FF,$55,$56,$F1,$54,$00,$00,$00,$00,$00,$00 ;
 $4D00 DEFB $E0,$FF,$03,$00,$0F,$80,$07,$FE,$0F,$E1,$FF,$E1,$FF,$C3,$86,$08,$7F,$00,$1B,$3E,$7F,$FD,$FF,$FF,$FF,$FA,$A2,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $80,$00,$3E,$06,$07,$00,$0F,$03,$FF,$C0,$00,$3E,$00,$3F,$03,$E0,$3F,$00,$17,$EC,$80,$03,$D7,$FE,$01,$51,$89,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1D,$EA,$00,$07,$7F,$F7,$00,$00,$6C,$00,$00,$00,$00,$00 ;
 $4D60 DEFB $00,$00,$46,$42,$5A,$00,$40,$42,$42,$44,$08,$46,$42,$00,$00,$00,$00,$00,$0B,$FC,$00,$7C,$07,$00,$F0,$01,$AA,$00,$00,$00,$00,$00 ;
 $4D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$A3,$FF,$E0,$2B,$E0,$3D,$AA,$24,$00,$00,$00,$00,$00 ;
 $4DA0 DEFB $42,$44,$38,$40,$38,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3A,$07,$F7,$FF,$FF,$F2,$41,$3F,$EF,$CE,$00,$3F,$FF ;
 $4DC0 DEFB $44,$00,$66,$00,$42,$42,$62,$62,$40,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$A6,$13,$6E,$ED,$86,$A8,$00,$00,$00,$00,$00,$00 ;
 $4DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FC,$00,$FF,$FF,$EA,$FF,$F8,$A8,$00,$00,$00,$00,$00,$00 ;
 $4E00 DEFB $E0,$FF,$03,$0F,$0F,$87,$03,$FE,$0F,$E1,$FF,$E1,$FF,$C3,$87,$00,$7F,$00,$17,$BF,$FF,$FF,$7F,$FC,$FF,$F5,$41,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $80,$00,$7E,$06,$07,$00,$7F,$01,$FF,$C0,$00,$3F,$00,$7F,$03,$E0,$3F,$00,$1B,$C9,$41,$13,$EC,$5E,$00,$28,$94,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$F4,$00,$07,$77,$F7,$00,$01,$50,$00,$00,$00,$00,$00 ;
 $4E60 DEFB $00,$00,$42,$3C,$24,$00,$7E,$3C,$42,$78,$3E,$42,$3C,$00,$00,$00,$00,$00,$03,$FE,$01,$F8,$07,$80,$7C,$13,$54,$80,$00,$00,$00,$00 ;
 $4E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$51,$FF,$E0,$37,$E0,$3F,$54,$18,$00,$00,$00,$00,$00 ;
 $4EA0 DEFB $42,$44,$10,$78,$44,$20,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3D,$07,$7F,$FD,$FD,$55,$08,$0F,$FF,$E0,$00,$00,$FF ;
 $4EC0 DEFB $42,$00,$5A,$00,$7C,$42,$52,$52,$7C,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$E6,$D8,$6E,$E8,$16,$14,$00,$00,$00,$00,$00,$00 ;
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$F4,$00,$FB,$FF,$FF,$FF,$F4,$50,$00,$00,$00,$00,$00,$00 ;
 $4F00 DEFB $E0,$FF,$03,$0F,$0F,$87,$C3,$FC,$0F,$E1,$FF,$E1,$FF,$C3,$87,$80,$7F,$00,$17,$9B,$FF,$F6,$BF,$FF,$FE,$FA,$88,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$1B,$DA,$80,$03,$D3,$3E,$00,$44,$CA,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$F2,$00,$2F,$23,$2F,$A0,$00,$69,$00,$00,$00,$00,$00 ;
 $4F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$1F,$F8,$03,$80,$FF,$E6,$AB,$00,$00,$00,$00,$00 ;
 $4F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$E1,$FF,$E0,$6F,$F0,$3E,$A8,$60,$80,$00,$00,$00,$00 ;
 $4FA0 DEFB $7E,$44,$10,$44,$44,$20,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$02,$FE,$FF,$F6,$AA,$00,$1F,$FF,$00,$00,$00,$27 ;
 $4FC0 DEFB $42,$00,$42,$00,$42,$7E,$4A,$4A,$40,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$F1,$9B,$00,$01,$B6,$28,$00,$00,$00,$00,$00,$00 ;
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$F8,$02,$EF,$FF,$FF,$FD,$BA,$A8,$00,$00,$00,$00,$00,$00 ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$20,$2F,$7F,$FF,$BF,$EF,$B5,$50,$00,$00,$00,$00,$00,$01 ;
 $5020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$3F,$F7,$EF,$9B,$FA,$F0,$00,$07,$00,$00,$00,$00,$00,$01,$FD,$FF,$FB ;
 $5040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$EC,$7F,$BF,$FF,$FF,$DF,$BB,$FF,$FB,$78,$FF,$FF,$FF,$FF,$FD,$E0,$E1,$F8,$03,$DD ;
 $5060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$7F,$D7,$1E,$FF,$FF,$FF,$FF,$FF,$F6,$7D,$3F,$DF,$BB,$FF,$FF,$78,$FF,$E0,$40,$00,$3D,$E5 ;
 $5080 DEFB $00,$00,$00,$01,$75,$D2,$01,$F8,$DD,$EF,$AD,$FF,$FE,$FF,$FF,$FF,$F8,$04,$20,$00,$00,$01,$FF,$01,$7F,$FF,$7C,$00,$00,$3F,$FF,$C3 ;
 $50A0 DEFB $00,$00,$10,$3D,$DB,$6D,$B6,$DB,$6C,$05,$80,$1F,$E0,$00,$1F,$1F,$00,$00,$00,$00,$00,$FC,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FD ;
 $50C0 DEFB $EF,$FF,$FB,$A0,$55,$55,$55,$53,$75,$41,$FF,$FF,$07,$30,$1F,$FE,$7E,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FE,$1B ;
 $50E0 DEFB $FB,$FA,$FE,$13,$FD,$7F,$F9,$F8,$00,$41,$FF,$FF,$F7,$FF,$FF,$FF,$FF,$FF,$24,$00,$00,$04,$08,$00,$22,$00,$00,$00,$00,$00,$1F,$FF ;
 $5100 DEFB $3C,$00,$00,$00,$40,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$FF,$00,$D9,$1F,$FB,$F3,$7F,$AA,$80,$00,$00,$00,$00,$00,$67 ;
 $5120 DEFB $FE,$00,$3C,$7C,$7E,$7E,$7C,$00,$00,$00,$00,$00,$00,$00,$3E,$FF,$FF,$FF,$83,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$07,$FE,$3F,$0D ;
 $5140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$F1,$FE,$FF,$FF,$FF,$FF,$DF,$FF,$FF,$F0,$3F,$FF,$FF,$FF,$FF,$FD,$FF,$F0,$03,$1F ;
 $5160 DEFB $00,$00,$02,$00,$00,$00,$00,$00,$00,$13,$FF,$7C,$7F,$FF,$FF,$FF,$FF,$7F,$9F,$AF,$EF,$FF,$DF,$FF,$FF,$F0,$3E,$00,$80,$00,$3F,$FD ;
 $5180 DEFB $00,$00,$00,$20,$6C,$40,$07,$FF,$EF,$9F,$67,$FD,$9F,$FF,$F8,$00,$00,$18,$C0,$00,$00,$02,$FF,$00,$7F,$7F,$A0,$00,$00,$FB,$FF,$C7 ;
 $51A0 DEFB $00,$02,$8F,$AF,$36,$DB,$6D,$B6,$9B,$0A,$F8,$00,$7F,$80,$00,$F0,$FC,$00,$00,$00,$00,$F8,$00,$00,$00,$07,$FF,$F7,$FF,$FF,$FE,$BF ;
 $51C0 DEFB $F7,$FF,$FB,$40,$2A,$AA,$AA,$AB,$BC,$AB,$FF,$FF,$86,$FF,$FF,$C1,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$1B,$FF,$FF,$FF,$FF,$FF,$1D ;
 $51E0 DEFB $F7,$7F,$FE,$3F,$FF,$FF,$B7,$FC,$00,$81,$FF,$FE,$7F,$F3,$FE,$7F,$FE,$3F,$00,$00,$00,$44,$08,$02,$22,$00,$00,$00,$04,$40,$07,$FF ;
 $5200 DEFB $42,$1C,$38,$78,$40,$00,$1C,$38,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FC,$03,$EF,$81,$FF,$F7,$BF,$54,$00,$00,$00,$00,$00,$01,$F9 ;
 $5220 DEFB $10,$00,$42,$42,$40,$40,$42,$00,$00,$00,$00,$00,$00,$00,$FF,$FB,$FF,$FF,$3F,$E7,$FF,$F0,$00,$00,$00,$00,$01,$C0,$DF,$F7,$FC,$5D ;
 $5240 DEFB $00,$00,$00,$00,$04,$00,$00,$00,$00,$00,$00,$3F,$FF,$EF,$FF,$FF,$FF,$FF,$3F,$BF,$FF,$FE,$EC,$7E,$0F,$06,$FF,$FF,$F7,$C0,$07,$DF ;
 $5260 DEFB $00,$00,$00,$00,$04,$00,$20,$00,$00,$3F,$ED,$F9,$FF,$FF,$FF,$FF,$F6,$EF,$F9,$FC,$FF,$FF,$3F,$BF,$FF,$FE,$E0,$00,$81,$00,$7B,$FF ;
 $5280 DEFB $00,$00,$00,$01,$BB,$A0,$FE,$0F,$FF,$7D,$CF,$FF,$F8,$00,$00,$00,$00,$61,$00,$00,$00,$0C,$83,$03,$93,$FB,$20,$00,$02,$FF,$DF,$C7 ;
 $52A0 DEFB $00,$00,$F0,$76,$ED,$B6,$DB,$6D,$3F,$90,$7E,$C0,$1F,$FE,$00,$0F,$83,$E0,$00,$00,$00,$E0,$00,$00,$3F,$FF,$FF,$FB,$FF,$FF,$FF,$FB ;
 $52C0 DEFB $FF,$FF,$F6,$00,$80,$00,$00,$03,$CD,$53,$FF,$F0,$1D,$FF,$FE,$07,$FF,$FF,$E1,$FF,$FF,$80,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$DF ;
 $52E0 DEFB $FF,$EA,$FF,$FF,$7E,$FF,$FB,$FF,$00,$83,$FF,$EF,$FF,$1F,$FF,$FF,$E1,$EF,$E0,$00,$00,$44,$08,$02,$22,$00,$00,$00,$04,$40,$03,$FF ;
 $5300 DEFB $40,$20,$04,$44,$78,$30,$20,$40,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$F9,$FC,$EE,$00,$3F,$FF,$FA,$A0,$00,$00,$00,$00,$00,$07,$F1 ;
 $5320 DEFB $10,$00,$40,$42,$7C,$7C,$42,$00,$00,$00,$00,$00,$00,$07,$FF,$6F,$EF,$FC,$FC,$3C,$7F,$FF,$00,$00,$00,$07,$FE,$C1,$DF,$7E,$30,$79 ;
 $5340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$FF,$3D,$FF,$FF,$FF,$ED,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$FF,$80,$06,$D7 ;
 $5360 DEFB $00,$00,$00,$10,$44,$04,$00,$00,$07,$FD,$FF,$C7,$FF,$FF,$FF,$EF,$FF,$FF,$FF,$FF,$F1,$ED,$FF,$FF,$FF,$FE,$00,$00,$0E,$00,$67,$FF ;
 $5380 DEFB $00,$00,$00,$00,$D7,$E7,$F8,$FF,$FE,$F9,$90,$00,$00,$00,$00,$00,$00,$82,$00,$00,$07,$FF,$00,$FE,$CC,$DF,$80,$00,$1F,$BF,$FF,$FD ;
 $53A0 DEFB $00,$07,$C1,$69,$DB,$6D,$B6,$DB,$73,$20,$1F,$FE,$0F,$1F,$00,$00,$78,$1C,$00,$00,$00,$00,$1E,$03,$FF,$FF,$A0,$1F,$FF,$CE,$07,$9F ;
 $53C0 DEFB $FF,$FF,$F5,$54,$00,$00,$00,$01,$FA,$A7,$FF,$DD,$FF,$FF,$F0,$1F,$9F,$FF,$FF,$FF,$F8,$00,$00,$00,$20,$03,$88,$FF,$FF,$FF,$FF,$FF ;
 $53E0 DEFB $FC,$F7,$FF,$FB,$FF,$FE,$FF,$FF,$C0,$07,$FF,$FF,$F7,$FF,$FF,$FE,$8E,$5F,$E0,$00,$00,$54,$08,$02,$02,$00,$10,$00,$04,$40,$00,$3F ;
 $5400 DEFB $4E,$20,$3C,$44,$44,$10,$20,$38,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$E3,$FF,$A8,$00,$1F,$FE,$F5,$C0,$00,$00,$00,$00,$00,$3F,$FF ;
 $5420 DEFB $10,$00,$4E,$7C,$40,$40,$7C,$00,$00,$00,$00,$00,$00,$1B,$7F,$9F,$FE,$F9,$E5,$FA,$3C,$FD,$FC,$00,$00,$39,$FF,$E1,$FF,$FF,$E0,$FF ;
 $5440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$F3,$FF,$F3,$DF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$DF,$FE,$FE,$00,$0F,$F5 ;
 $5460 DEFB $00,$00,$00,$00,$04,$00,$00,$00,$3F,$F6,$BE,$3F,$FF,$FF,$FF,$FF,$DF,$FF,$87,$FF,$DF,$FF,$FF,$FF,$F0,$00,$00,$00,$7F,$00,$1F,$FF ;
 $5480 DEFB $00,$00,$00,$07,$6F,$CF,$FF,$FF,$FD,$EE,$60,$00,$00,$00,$00,$00,$03,$0F,$FF,$FF,$F8,$01,$B9,$01,$00,$3D,$F8,$00,$79,$FF,$F0,$9B ;
 $54A0 DEFB $01,$1B,$0E,$FB,$B6,$DB,$6D,$B6,$FA,$40,$03,$FF,$00,$01,$00,$00,$07,$00,$00,$0F,$FF,$00,$FC,$03,$FF,$FF,$FF,$F0,$78,$7F,$FF,$7F ;
 $54C0 DEFB $FF,$FF,$F8,$80,$00,$00,$00,$08,$7F,$07,$FD,$FF,$BF,$FF,$87,$FC,$FF,$FF,$1F,$FF,$C0,$00,$08,$00,$20,$00,$00,$FF,$FF,$FF,$FF,$F7 ;
 $54E0 DEFB $F7,$F9,$DF,$FE,$FF,$DF,$F7,$FE,$70,$DF,$FF,$FF,$F9,$FE,$FF,$E0,$F0,$FF,$FC,$00,$00,$54,$0A,$02,$02,$00,$10,$00,$05,$40,$00,$03 ;
 $5500 DEFB $42,$20,$44,$78,$44,$10,$20,$04,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$CF,$F7,$91,$00,$07,$FF,$EF,$00,$00,$00,$00,$00,$00,$7F,$E1 ;
 $5520 DEFB $10,$18,$42,$44,$40,$40,$44,$00,$00,$00,$00,$00,$00,$7F,$FE,$3F,$FB,$FF,$EF,$FC,$FF,$FF,$87,$00,$F8,$FE,$FF,$FF,$FF,$FF,$C0,$77 ;
 $5540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$C7,$BF,$6D,$BF,$FF,$FF,$DF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FB,$FF,$FC,$F8,$00,$0F,$FF ;
 $5560 DEFB $00,$00,$00,$00,$90,$80,$00,$00,$E7,$FF,$71,$FF,$FF,$FF,$FF,$EF,$6F,$FF,$FF,$FF,$FF,$DF,$E0,$00,$00,$00,$00,$00,$00,$00,$F7,$FF ;
 $5580 DEFB $00,$00,$00,$0F,$B9,$00,$00,$00,$01,$FE,$80,$00,$00,$00,$07,$FF,$FF,$F8,$00,$0C,$00,$00,$82,$00,$40,$03,$DF,$00,$EE,$7E,$9F,$BD ;
 $55A0 DEFB $0F,$E4,$7E,$F3,$6D,$B6,$DB,$6D,$F2,$80,$00,$17,$FE,$23,$00,$00,$00,$5E,$FF,$7F,$FC,$80,$7C,$07,$FF,$EF,$FF,$C7,$FF,$FB,$F9,$BB ;
 $55C0 DEFB $FF,$FF,$FE,$00,$7C,$3F,$C3,$00,$1E,$E7,$FF,$FF,$FF,$DE,$79,$FF,$FF,$FF,$FF,$E0,$00,$00,$08,$00,$20,$00,$7F,$7F,$FF,$FF,$FF,$FF ;
 $55E0 DEFB $FE,$FE,$7F,$FF,$FF,$FF,$FF,$FF,$FE,$3F,$FF,$FF,$8F,$FF,$FC,$E3,$BF,$FF,$FF,$80,$00,$50,$0A,$02,$02,$00,$10,$00,$05,$40,$00,$01 ;
 $5600 DEFB $3C,$20,$3C,$40,$44,$38,$1C,$78,$00,$00,$00,$00,$00,$00,$00,$FF,$F6,$FF,$E9,$1C,$00,$01,$DF,$5C,$00,$00,$00,$00,$00,$0F,$FF,$F1 ;
 $5620 DEFB $10,$18,$3C,$42,$7E,$7E,$42,$00,$00,$00,$00,$00,$01,$FD,$FC,$7F,$FF,$FD,$FF,$FB,$83,$EF,$FF,$80,$FF,$FF,$E0,$E7,$FF,$39,$01,$DF ;
 $5640 DEFB $00,$00,$00,$00,$04,$00,$00,$00,$00,$00,$07,$0E,$7D,$FF,$FF,$FF,$F1,$7F,$FF,$FF,$E1,$FF,$FF,$FF,$FF,$EF,$FF,$F9,$C0,$00,$00,$FF ;
 $5660 DEFB $00,$00,$00,$00,$04,$00,$00,$23,$3F,$F8,$0F,$FF,$FF,$FF,$FF,$FD,$BF,$FF,$FE,$87,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$F9 ;
 $5680 DEFB $00,$00,$00,$05,$76,$DB,$6D,$B6,$DA,$A9,$00,$07,$FF,$FF,$FC,$00,$00,$00,$00,$03,$00,$00,$00,$F0,$DC,$80,$30,$07,$FF,$FF,$FF,$FF ;
 $56A0 DEFB $3F,$FB,$FD,$E9,$6D,$B6,$DB,$69,$ED,$20,$00,$00,$7B,$E0,$07,$FF,$C7,$FF,$FF,$FF,$FF,$00,$38,$03,$DF,$FF,$E8,$3F,$F8,$3C,$1E,$7F ;
 $56C0 DEFB $F7,$FF,$FD,$03,$FF,$FF,$DC,$08,$06,$F1,$EF,$FF,$FE,$7F,$C7,$FF,$9F,$FF,$FF,$C0,$00,$00,$08,$00,$20,$00,$00,$FF,$FF,$FF,$FF,$F5 ;
 $56E0 DEFB $D5,$C1,$FF,$FF,$F7,$FF,$FF,$FF,$FF,$FF,$FE,$FF,$FF,$FF,$E7,$FF,$FF,$FF,$FF,$E0,$00,$50,$0A,$02,$02,$00,$12,$00,$05,$00,$00,$00 ;
 $5700 DEFB $00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$F9,$FF,$F8,$6E,$00,$00,$3F,$E0,$00,$00,$00,$00,$00,$7F,$FF,$9F ;
 $5720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$EF,$F7,$FF,$EF,$FF,$FD,$FF,$E7,$93,$DF,$FF,$F8,$7F,$DF,$FF,$FF,$FC,$01,$FF ;
 $5740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FD,$E7,$BF,$FF,$FF,$C6,$0F,$E1,$B8,$0F,$FF,$FF,$F9,$83,$BF,$FF,$F6,$00,$00,$1F,$FF ;
 $5760 DEFB $00,$00,$00,$00,$1E,$00,$02,$1F,$FF,$F7,$EF,$FF,$FF,$FF,$FB,$C7,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$F1 ;
 $5780 DEFB $00,$00,$00,$3A,$ED,$B6,$DB,$6D,$B7,$F2,$FF,$F8,$00,$01,$E3,$E0,$00,$00,$00,$00,$C0,$00,$00,$FD,$BA,$E0,$07,$FF,$FF,$FF,$FF,$FB ;
 $57A0 DEFB $FF,$FF,$FD,$D1,$B6,$DB,$6D,$B3,$AC,$80,$00,$00,$01,$CF,$07,$FF,$FF,$AF,$FF,$FF,$FF,$C0,$C0,$00,$3F,$F8,$11,$FF,$F8,$3F,$89,$BB ;
 $57C0 DEFB $ED,$FF,$3F,$1F,$7F,$FF,$FF,$F8,$01,$E1,$FF,$FF,$FF,$FF,$FF,$FE,$FF,$FF,$FF,$00,$00,$00,$08,$00,$22,$00,$00,$1E,$70,$07,$FF,$DF ;
 $57E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$50,$02,$02,$02,$00,$12,$00,$05,$00,$00,$00 ; }
 $5800 DEFB $47,$47,$47,$47,$47,$44,$44,$44,$44,$44,$44,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ; {Attributes.
 $5820 DEFB $78,$78,$78,$78,$47,$47,$44,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$43,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$45 ;
 $5840 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$47,$47,$47,$47,$47,$45,$43,$44,$46,$46,$46,$46,$46,$46,$46,$46,$47,$45 ;
 $5860 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$68,$78,$78,$06,$44,$44,$47,$47,$45,$47,$44,$07,$07,$07,$47,$47,$47,$47,$47,$45,$45 ;
 $5880 DEFB $78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$44,$44,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$42 ;
 $58A0 DEFB $42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$44,$44,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $58C0 DEFB $70,$70,$70,$47,$47,$47,$42,$47,$47,$47,$47,$47,$47,$47,$44,$47,$47,$42,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $58E0 DEFB $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$60,$70,$70,$70,$70,$70,$70,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5900 DEFB $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$60,$70,$60,$70,$70,$70,$60,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5920 DEFB $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5940 DEFB $42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5960 DEFB $07,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5980 DEFB $47,$47,$47,$47,$47,$47,$44,$44,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $59A0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$44,$07,$07,$07,$07,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$06,$06,$06,$06,$06 ;
 $59C0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$06,$47,$47,$47,$06 ;
 $59E0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$47,$47,$47,$06,$06,$47,$47,$47,$47,$47,$47,$47,$47,$06,$47,$47,$47,$47 ;
 $5A00 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$47,$47,$47,$47,$47,$47,$06,$06,$06,$06,$06,$06,$47,$47,$47,$47,$47,$47,$06,$47,$06,$06,$06,$06 ;
 $5A20 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$47,$47,$47,$47,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $5A40 DEFB $47,$47,$47,$47,$42,$47,$47,$47,$47,$47,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $5A60 DEFB $47,$47,$45,$47,$47,$47,$45,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$41,$06,$06,$06 ;
 $5A80 DEFB $47,$47,$47,$45,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$41,$41,$41,$41,$41,$10,$02,$02,$10,$41,$06,$06,$06,$06,$06 ;
 $5AA0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$45,$41,$41,$41,$41,$06,$06,$06,$06,$06,$06,$06,$10,$16,$16,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $5AC0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$16,$16,$17,$17,$17,$17,$16,$16,$16,$16,$16,$06,$06 ;
 $5AE0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$16,$16,$16,$17,$17,$17,$17,$16,$17,$16,$17,$17,$16,$16 ; }

; Tape Loader
;
; .
;
; .
;
; Load the first block: screen data.
@label=TapeLoader
c$5B00 LD IX,$4000   ; #REGix=#R$4000.
 $5B04 LD DE,$1B00   ; #REGde=#N$1B00.
 $5B07 LD A,$5B      ; #REGa=#N$5B.
 $5B09 CALL $5B21    ; Call #R$5B21.
; Load the second block: graphics data.
 $5B0C LD IX,$607C   ; #REGix=#R$607C.
 $5B10 LD DE,$59D4   ; #REGde=#N$59D4.
 $5B13 LD A,$E1      ; #REGa=#N$E1.
 $5B15 CALL $5B21    ; Call #R$5B21.
; Load the third block: game data.
 $5B18 LD IX,$BA50   ; #REGix=#R$BA50.
 $5B1C LD DE,$4572   ; #REGde=#N$4572.
 $5B1F LD A,$21      ; #REGa=#N$21.
; Tape loading routine.
@label=TapeLoading
*$5B21 SCF           ; Set the carry flag to indicate "loading".
 $5B22 INC D         ; This resets the zero flag. (#REGd cannot hold +#N$FF.)
 $5B23 EX AF,AF'     ; The #REGa register holds +#N$00 for a header and +#N$FF for a block
                     ; of data. The carry flag is reset for verifying and set for loading.
 $5B24 DEC D         ; Restore #REGd to its original value.
 $5B25 DI            ; Disable interrupts.
 $5B26 LD A,$0F      ; {Set the border to #INK$0F.
 $5B28 OUT ($FE),A   ; }
 $5B2A CALL $0562    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0556.html#0562">LD_BYTES##N$0562</a>.)
 $5B2D PUSH AF       ; Stash #REGaf on the stack.
 $5B2E LD A,($5C48)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C48.html">BORDCR</a>.)
 $5B31 AND %00111000 ; Keep only bits 3-5.
 $5B33 RRC A         ; {Rotate #REGa right (with carry).
 $5B35 RRC A         ;
 $5B37 RRC A         ; }
 $5B39 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $5B3B LD A,$7F      ; #REGa=#N$7F.
 $5B3D IN A,($FE)    ; Make an initial read of port '#N$FE'.
 $5B3F RRA           ; Rotate the byte obtained.
 $5B40 EI            ; Enable interrupts.
 $5B41 JP NC,$0000   ; #HTML(Jump to <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0000.html">START</a>
                     ; if the carry flag is not set.)
 $5B44 POP AF        ; Restore #REGaf from the stack.
 $5B45 RET C         ; Return if the carry flag is set.
 $5B46 LD HL,($5C53) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C53.html">PROG</a>.)
 $5B49 LD ($5C4B),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C4B.html">VARS</a>.)
 $5B4C LD (HL),$80   ; Write #N$80 to *#REGhl.
 $5B4E RST $08       ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0008.html">ERROR_1</a>.)

; Unused
u$5B4F DEFB $1A,$00,$00,$00,$00,$00,$00,$00
 $5B57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BFF DEFB $00,$FF,$00,$00,$00,$FF,$00,$23
 $5C07 DEFB $78,$78,$23,$05,$00,$00,$00,$14
 $5C0F DEFB $00,$01,$00,$06,$00,$0B,$00,$01
 $5C17 DEFB $00,$01,$00,$06,$00,$10,$00,$00
 $5C1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C37 DEFB $3C,$40,$00,$FF,$CC,$01,$54,$FF
 $5C3F DEFB $00,$00,$00,$E8,$03,$FF,$F2,$03
 $5C47 DEFB $01,$38,$00,$00,$1E,$5E,$BC,$5D
 $5C4F DEFB $B6,$5C,$B6,$5C,$CB,$5C,$10,$5E
 $5C57 DEFB $CA,$5C,$25,$5E,$2A,$5E,$0F,$5E
 $5C5F DEFB $5C,$00,$32,$5E,$43,$5E,$43,$5E
 $5C67 DEFB $03,$92,$5C,$10,$02,$00,$00,$00
 $5C6F DEFB $00,$00,$02,$78,$F0,$00,$1A,$00
 $5C77 DEFB $00,$0C,$14,$00,$58,$FF,$00,$00
 $5C7F DEFB $21,$00,$5B,$21,$17,$40,$50,$E0
 $5C87 DEFB $50,$21,$06,$21,$17,$12,$38,$00
 $5C8F DEFB $38,$00,$00,$00,$00,$00,$00,$00
 $5C97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C9F DEFB $00,$00,$08,$01,$07,$00,$00,$00
 $5CA7 DEFB $00,$00,$00,$81,$03,$03,$00,$00
 $5CAF DEFB $00,$00,$00,$57,$FF,$FF,$FF,$F4
 $5CB7 DEFB $09,$A8,$10,$4B,$F4,$09,$C4,$15
 $5CBF DEFB $53,$81,$0F,$C4,$15,$52,$F4,$09
 $5CC7 DEFB $C4,$15,$50,$80,$00,$0A,$1A,$00
 $5CCF DEFB $EA,$14,$01,$20,$42,$41,$42,$59
 $5CD7 DEFB $4C,$4F,$4E,$20,$4D,$41,$49,$4E
 $5CDF DEFB $20,$42,$41,$53,$49,$43,$20,$14
 $5CE7 DEFB $00,$0D,$00,$14,$92,$00,$FD,$32
 $5CEF DEFB $34,$36,$39,$39,$0E,$00,$00,$7B
 $5CF7 DEFB $60,$00,$3A,$E7,$30,$0E,$00,$00
 $5CFF DEFB $00,$00,$00,$3A,$DA,$30,$0E,$00
 $5D07 DEFB $00,$00,$00,$00,$3A,$D9,$30,$0E
 $5D0F DEFB $00,$00,$00,$00,$00,$3A,$FB,$3A
 $5D17 DEFB $F5,$23,$30,$0E,$00,$00,$00,$00
 $5D1F DEFB $00,$3B,$AC,$30,$0E,$00,$00,$00
 $5D27 DEFB $00,$00,$2C,$30,$0E,$00,$00,$00
 $5D2F DEFB $00,$00,$3B,$D9,$30,$0E,$00,$00
 $5D37 DEFB $00,$00,$00,$3B,$22,$20,$20,$20
 $5D3F DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $5D47 DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $5D4F DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $5D57 DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $5D5F DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $5D67 DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $5D6F DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $5D77 DEFB $20,$20,$20,$20,$20,$22,$3B,$0D
 $5D7F DEFB $00,$1E,$0E,$00,$F9,$C0,$32,$33
 $5D87 DEFB $32,$39,$36,$0E,$00,$00,$00,$5B
 $5D8F DEFB $00,$0D,$00,$28,$22,$00,$D9,$36
 $5D97 DEFB $0E,$00,$00,$06,$00,$00,$3A,$DC
 $5D9F DEFB $31,$0E,$00,$00,$01,$00,$00,$3A
 $5DA7 DEFB $FB,$3A,$F9,$C0,$34,$37,$36,$39
 $5DAF DEFB $36,$0E,$00,$00,$50,$BA,$00,$0D
 $5DB7 DEFB $03,$E8,$3A,$00,$F1,$78,$3D,$28
 $5DBF DEFB $28,$32,$35,$36,$0E,$00,$00,$00
 $5DC7 DEFB $01,$00,$2A,$BE,$32,$33,$36,$35
 $5DCF DEFB $34,$0E,$00,$00,$66,$5C,$00,$29
 $5DD7 DEFB $2B,$BE,$32,$33,$36,$35,$33,$0E
 $5DDF DEFB $00,$00,$65,$5C,$00,$29,$2D,$32
 $5DE7 DEFB $33,$32,$39,$36,$0E,$00,$00,$00
 $5DEF DEFB $5B,$00,$3A,$F5,$78,$0D,$03,$F2
 $5DF7 DEFB $17,$00,$F8,$22,$63,$6F,$64,$65
 $5DFF DEFB $31,$22,$AF,$32,$33,$32,$39,$36
 $5E07 DEFB $0E,$00,$00,$00,$5B,$00,$2C,$78
 $5E0F DEFB $0D,$03,$FC,$0A,$00,$F7,$31,$30
 $5E17 DEFB $0E,$00,$00,$0A,$00,$00,$0D,$78
 $5E1F DEFB $00,$00,$31,$03,$00,$80,$EC,$31
 $5E27 DEFB $30,$30,$30,$0E,$00,$00,$E8,$03
 $5E2F DEFB $00,$0D,$00,$00,$00,$00,$00,$00
 $5E37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ECF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6007 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $600F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6017 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $601F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6027 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $602F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6037 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $603F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6047 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $604F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6057 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $605F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6067 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $606F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6077 DEFB $00,$00,$00,$00,$00

; Graphics: Boat
;
; #SIM(start=$5B46,stop=$5B4E) #PUSHS #UDGTABLE
; { =h On Your Boat }
; { #SIM(start=$BB3B,stop=$BB41,ix=#PC)#SCR$02{$00,$00,$200,$100}(boat) }
; UDGTABLE# #POPS
@label=Image_Boat
b$607C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6084 DEFB $00,$0F,$08,$04,$02,$01,$FF,$04
 $608C DEFB $02,$01,$80,$40,$20,$10,$08,$F8
 $6094 DEFB $80,$40,$20,$10,$08,$00,$00,$00
 $609C DEFB $00,$FF,$08,$08,$08,$04,$04,$04
 $60A4 DEFB $02,$02,$00,$00,$00,$FF,$06,$0C
 $60AC DEFB $0C,$18,$18,$30,$30,$60,$00,$FF
 $60B4 DEFB $08,$08,$08,$10,$10,$10,$20,$20
 $60BC DEFB $E0,$01,$01,$01,$FF,$82,$82,$84
 $60C4 DEFB $84,$84,$08,$08,$10,$FF,$20,$20
 $60CC DEFB $20,$11,$12,$14,$18,$10,$FF,$3E
 $60D4 DEFB $5A,$9C,$14,$3C,$28,$69,$49,$FF
 $60DC DEFB $80,$80,$80,$80,$80,$80,$80,$80
 $60E4 DEFB $00,$FF,$AB,$55,$AB,$55,$AB,$55
 $60EC DEFB $AB,$55,$FF,$02,$02,$02,$02,$01
 $60F4 DEFB $01,$01,$01,$FF,$18,$08,$18,$08
 $60FC DEFB $18,$08,$30,$10,$00,$00,$00,$00
 $6104 DEFB $00,$00,$00,$00,$00,$00,$07,$04
 $610C DEFB $02,$01,$FF,$04,$02,$81,$40,$20
 $6114 DEFB $18,$06,$01,$F8,$80,$60,$18,$06
 $611C DEFB $81,$80,$80,$00,$00,$07,$01,$01
 $6124 DEFB $01,$F8,$80,$80,$80,$40,$40,$00
 $612C DEFB $FC,$01,$01,$03,$02,$06,$05,$7F
 $6134 DEFB $60,$A0,$C0,$40,$80,$80,$80,$80
 $613C DEFB $01,$7F,$20,$40,$40,$40,$80,$80
 $6144 DEFB $80,$FF,$01,$01,$01,$01,$03,$06
 $614C DEFB $0A,$32,$FF,$20,$20,$41,$82,$04
 $6154 DEFB $08,$30,$C0,$FF,$70,$88,$08,$09
 $615C DEFB $09,$0A,$06,$04,$FF,$C9,$92,$92
 $6164 DEFB $22,$22,$44,$44,$84,$FF,$80,$80
 $616C DEFB $80,$80,$80,$80,$80,$80,$00,$FF
 $6174 DEFB $AB,$55,$AB,$55,$AB,$55,$AB,$55
 $617C DEFB $03,$01,$01,$FF,$30,$10,$B0,$90
 $6184 DEFB $B0,$90,$B0,$90,$40,$01,$C0,$81
 $618C DEFB $6F,$40,$80,$00,$00,$00,$00,$00
 $6194 DEFB $00,$00,$00,$00,$07,$60,$1C,$03
 $619C DEFB $7F,$60,$18,$04,$C3,$38,$06,$01
 $61A4 DEFB $F0,$C0,$30,$8C,$63,$00,$00,$FF
 $61AC DEFB $40,$20,$20,$10,$10,$10,$08,$08
 $61B4 DEFB $00,$FF,$0D,$0A,$1A,$14,$34,$24
 $61BC DEFB $68,$48,$80,$07,$FF,$01,$01,$02
 $61C4 DEFB $02,$03,$1E,$E4,$07,$FE,$03,$0C
 $61CC DEFB $30,$C3,$0C,$30,$C0,$FF,$C3,$0E
 $61D4 DEFB $32,$C4,$04,$04,$04,$04,$00,$FF
 $61DC DEFB $04,$0C,$0D,$13,$12,$32,$26,$66
 $61E4 DEFB $FF,$84,$88,$08,$08,$08,$10,$10
 $61EC DEFB $10,$FF,$80,$80,$80,$80,$80,$80
 $61F4 DEFB $80,$80,$FE,$01,$01,$07,$02,$06
 $61FC DEFB $02,$06,$FF,$AB,$D5,$EB,$5D,$FB
 $6204 DEFB $7D,$EF,$F5,$00,$FF,$B0,$50,$60
 $620C DEFB $60,$60,$60,$60,$20,$F6,$7F,$78
 $6214 DEFB $01,$06,$1C,$10,$FF,$3C,$FC,$7F
 $621C DEFB $E8,$B8,$28,$30,$10,$0C,$80,$C0
 $6224 DEFB $C0,$3C,$0F,$FF,$40,$40,$40,$60
 $622C DEFB $61,$67,$7C,$7E,$30,$F0,$80,$00
 $6234 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $623C DEFB $1F,$07,$E0,$3F,$03,$0E,$FE,$F9
 $6244 DEFB $07,$1F,$04,$04,$FF,$E1,$1F,$FC
 $624C DEFB $E0,$1F,$F1,$82,$42,$24,$FF,$50
 $6254 DEFB $93,$9F,$FC,$20,$40,$40,$80,$07
 $625C DEFB $38,$C3,$FC,$FF,$3C,$C8,$08,$10
 $6264 DEFB $10,$10,$20,$20,$00,$FF,$04,$04
 $626C DEFB $08,$08,$08,$08,$08,$08,$FC,$01
 $6274 DEFB $01,$03,$03,$05,$06,$FF,$CA,$C9
 $627C DEFB $91,$91,$21,$21,$40,$80,$FF,$10
 $6284 DEFB $20,$20,$20,$20,$40,$C0,$C0,$FF
 $628C DEFB $80,$80,$80,$80,$80,$80,$80,$80
 $6294 DEFB $FD,$01,$01,$03,$01,$03,$01,$03
 $629C DEFB $FF,$FB,$F5,$FB,$F5,$FB,$D5,$BB
 $62A4 DEFB $55,$00,$FF,$60,$20,$60,$20,$60
 $62AC DEFB $20,$D0,$50,$F8,$01,$07,$08,$7F
 $62B4 DEFB $12,$FF,$10,$18,$F8,$38,$FC,$DC
 $62BC DEFB $CF,$5F,$80,$C0,$FF,$01,$07,$0C
 $62C4 DEFB $01,$01,$02,$02,$04,$FE,$08,$6E
 $62CC DEFB $EF,$EF,$E7,$27,$8F,$06,$80,$C0
 $62D4 DEFB $00,$00,$00,$00,$00,$C0,$20,$3C
 $62DC DEFB $00,$00,$00,$00,$00,$00,$FF,$14
 $62E4 DEFB $1C,$09,$1D,$12,$32,$25,$64,$83
 $62EC DEFB $80,$80,$80,$80,$01,$7F,$20,$40
 $62F4 DEFB $40,$40,$80,$80,$80,$00,$FF,$08
 $62FC DEFB $10,$10,$10,$10,$10,$10,$10,$FF
 $6304 DEFB $0B,$0D,$16,$1C,$2C,$38,$50,$60
 $630C DEFB $FF,$01,$01,$01,$01,$01,$01,$01
 $6314 DEFB $01,$FF,$F0,$F0,$F0,$F0,$F0,$F0
 $631C DEFB $F0,$F0,$FF,$80,$80,$80,$80,$80
 $6324 DEFB $80,$80,$80,$55,$01,$01,$01,$01
 $632C DEFB $FF,$BB,$D5,$BB,$D5,$BB,$DD,$AB
 $6334 DEFB $DD,$40,$01,$FF,$D0,$50,$D0,$50
 $633C DEFB $D0,$48,$88,$88,$3F,$F5,$F6,$E0
 $6344 DEFB $82,$08,$80,$F0,$02,$26,$34,$16
 $634C DEFB $5F,$3F,$3F,$3F,$38,$1D,$02,$3F
 $6354 DEFB $FB,$EB,$E4,$C1,$0F,$0F,$FB,$80
 $635C DEFB $0F,$AF,$6F,$AC,$03,$0F,$FE,$C0
 $6364 DEFB $C0,$40,$B8,$C4,$3F,$3B,$FE,$C0
 $636C DEFB $70,$3C,$0E,$03,$C3,$FF,$BF,$FB
 $6374 DEFB $7B,$79,$78,$64,$44,$14,$FF,$06
 $637C DEFB $04,$08,$18,$30,$3E,$F4,$FC,$00
 $6384 DEFB $98,$0F,$01,$01,$E7,$E9,$F5,$F8
 $638C DEFB $F0,$88,$16,$FF,$3C,$C6,$B8,$C0
 $6394 DEFB $F0,$9E,$66,$30,$00,$00,$00,$00
 $639C DEFB $F8,$01,$01,$03,$02,$06,$FF,$44
 $63A4 DEFB $C8,$88,$90,$10,$10,$20,$20,$1F
 $63AC DEFB $40,$40,$30,$0C,$03,$FF,$01,$01
 $63B4 DEFB $02,$02,$02,$C4,$3C,$0E,$00,$80
 $63BC DEFB $07,$FF,$20,$20,$21,$21,$23,$26
 $63C4 DEFB $7D,$C1,$3F,$A0,$E0,$C0,$40,$80
 $63CC DEFB $80,$FF,$01,$01,$01,$01,$01,$01
 $63D4 DEFB $01,$01,$FF,$F0,$F0,$F0,$F0,$F0
 $63DC DEFB $F0,$F0,$F0,$FF,$80,$80,$80,$80
 $63E4 DEFB $80,$80,$80,$80,$0D,$01,$01,$01
 $63EC DEFB $FF,$AB,$DD,$AF,$D5,$AF,$57,$EB
 $63F4 DEFB $55,$FD,$01,$03,$01,$06,$04,$AC
 $63FC DEFB $F8,$FF,$88,$88,$08,$04,$04,$04
 $6404 DEFB $04,$04,$DF,$DF,$FF,$EC,$A0,$1E
 $640C DEFB $7C,$7C,$EF,$E2,$60,$40,$40,$80
 $6414 DEFB $04,$05,$FB,$F0,$C0,$C1,$F0,$38
 $641C DEFB $D8,$D9,$F8,$70,$41,$89,$D0,$1C
 $6424 DEFB $90,$01,$01,$F5,$61,$04,$02,$19
 $642C DEFB $09,$0A,$E3,$30,$40,$80,$20,$0F
 $6434 DEFB $CB,$24,$08,$84,$04,$30,$1F,$0B
 $643C DEFB $27,$03,$01,$01,$00,$E0,$01,$01
 $6444 DEFB $01,$1F,$18,$30,$60,$40,$80,$FF
 $644C DEFB $9C,$84,$81,$01,$01,$01,$03,$C2
 $6454 DEFB $00,$00,$00,$00,$FF,$04,$04,$08
 $645C DEFB $08,$10,$11,$21,$22,$1F,$40,$40
 $6464 DEFB $80,$80,$80,$00,$FF,$09,$08,$10
 $646C DEFB $10,$10,$20,$20,$20,$07,$80,$63
 $6474 DEFB $1C,$03,$38,$C0,$FF,$4A,$56,$5C
 $647C DEFB $5E,$AD,$AD,$4E,$4A,$00,$FF,$01
 $6484 DEFB $01,$01,$01,$01,$01,$01,$01,$FF
 $648C DEFB $F8,$F8,$F8,$F8,$F8,$F8,$F8,$FC
 $6494 DEFB $FF,$80,$80,$80,$80,$80,$80,$80
 $649C DEFB $80,$A0,$01,$01,$FF,$EB,$55,$EB
 $64A4 DEFB $55,$EB,$D5,$AB,$D5,$00,$FF,$04
 $64AC DEFB $04,$02,$02,$02,$02,$02,$02,$FF
 $64B4 DEFB $F9,$F0,$B3,$C3,$C7,$EF,$BA,$ED
 $64BC DEFB $FD,$10,$15,$03,$03,$33,$7B,$FB
 $64C4 DEFB $FF,$96,$40,$E0,$F0,$CC,$DC,$F8
 $64CC DEFB $F9,$7F,$72,$F8,$88,$F2,$DC,$60
 $64D4 DEFB $30,$FF,$F7,$DF,$DC,$FB,$FE,$B2
 $64DC DEFB $27,$8F,$FF,$BE,$F8,$D8,$DC,$DE
 $64E4 DEFB $DE,$D8,$F9,$7F,$3F,$3F,$2F,$AF
 $64EC DEFB $A7,$87,$8B,$FF,$F7,$F4,$61,$61
 $64F4 DEFB $61,$63,$63,$E7,$C7,$FF,$FC,$84
 $64FC DEFB $08,$FB,$FF,$80,$80,$01,$01,$7F
 $6504 DEFB $0F,$07,$1F,$FF,$82,$82,$86,$84
 $650C DEFB $E4,$F8,$EE,$FE,$E6,$03,$07,$03
 $6514 DEFB $07,$06,$3F,$7A,$9F,$FF,$7F,$EF
 $651C DEFB $89,$3E,$80,$60,$20,$80,$80,$00
 $6524 DEFB $00,$F0,$01,$01,$02,$02,$FF,$42
 $652C DEFB $42,$84,$84,$08,$08,$10,$10,$00
 $6534 DEFB $C0,$01,$01,$3F,$40,$40,$40,$80
 $653C DEFB $80,$80,$00,$00,$FF,$BD,$85,$85
 $6544 DEFB $85,$85,$85,$85,$85,$00,$FF,$01
 $654C DEFB $01,$01,$05,$07,$1F,$1F,$7F,$0F
 $6554 DEFB $03,$03,$03,$03,$FF,$80,$80,$80
 $655C DEFB $80,$80,$80,$80,$80,$FA,$01,$03
 $6564 DEFB $01,$03,$01,$03,$FF,$AB,$D5,$AB
 $656C DEFB $55,$AB,$55,$AB,$55,$00,$0F,$01
 $6574 DEFB $01,$01,$01,$CF,$FF,$80,$87,$5D
 $657C DEFB $2B,$18,$F3,$0C,$0A,$C0,$80,$22
 $6584 DEFB $A0,$27,$06,$1E,$BA,$06,$FF,$C0
 $658C DEFB $FE,$E0,$C1,$1D,$38,$F5,$F3,$FF
 $6594 DEFB $19,$0F,$07,$20,$1C,$9C,$80,$AF
 $659C DEFB $FF,$F8,$71,$E0,$E3,$5D,$01,$90
 $65A4 DEFB $F7,$FD,$8B,$86,$02,$62,$FA,$EE
 $65AC DEFB $06,$7E,$08,$09,$28,$E0,$C2,$45
 $65B4 DEFB $FF,$9F,$9B,$41,$F9,$7E,$27,$7F
 $65BC DEFB $F8,$7F,$89,$39,$39,$99,$89,$3E
 $65C4 DEFB $40,$37,$8B,$A1,$66,$C6,$C4,$FF
 $65CC DEFB $0C,$1C,$18,$B8,$B0,$F0,$F0,$F8
 $65D4 DEFB $00,$00,$00,$00,$FF,$04,$04,$0C
 $65DC DEFB $08,$18,$10,$30,$20,$FF,$10,$20
 $65E4 DEFB $20,$40,$40,$80,$80,$80,$00,$FF
 $65EC DEFB $01,$02,$02,$02,$04,$04,$04,$08
 $65F4 DEFB $00,$00,$00,$FF,$87,$85,$85,$83
 $65FC DEFB $83,$83,$83,$83,$80,$C0,$FF,$89
 $6604 DEFB $82,$8D,$96,$AF,$DA,$B2,$E5,$EF
 $660C DEFB $21,$5E,$93,$6D,$52,$53,$55,$FF
 $6614 DEFB $80,$80,$80,$80,$80,$80,$80,$80
 $661C DEFB $FF,$01,$06,$02,$06,$02,$06,$02
 $6624 DEFB $05,$FF,$AB,$55,$AB,$55,$AB,$55
 $662C DEFB $AB,$55,$C0,$C0,$BC,$00,$9F,$7F
 $6634 DEFB $E4,$B3,$14,$C8,$40,$0F,$FF,$D4
 $663C DEFB $2A,$84,$2F,$FF,$94,$82,$10,$08
 $6644 DEFB $03,$FF,$7E,$07,$FF,$3E,$7C,$07
 $664C DEFB $FF,$1F,$09,$07,$BE,$C7,$F6,$0E
 $6654 DEFB $C0,$BD,$02,$3C,$80,$58,$02,$02
 $665C DEFB $10,$80,$83,$90,$04,$01,$E1,$03
 $6664 DEFB $01,$0F,$FF,$1C,$FF,$FF,$F8,$0C
 $666C DEFB $FF,$FE,$04,$80,$E0,$01,$01,$02
 $6674 DEFB $FF,$21,$41,$42,$82,$82,$04,$04
 $667C DEFB $08,$00,$00,$FF,$08,$08,$10,$10
 $6684 DEFB $10,$20,$20,$20,$00,$00,$FC,$01
 $668C DEFB $03,$07,$1F,$3F,$FF,$FF,$86,$8B
 $6694 DEFB $B2,$C7,$1A,$37,$6B,$D5,$FF,$7F
 $669C DEFB $49,$D3,$64,$C8,$71,$C2,$84,$FF
 $66A4 DEFB $8A,$15,$F9,$4A,$92,$24,$24,$44
 $66AC DEFB $FF,$AA,$4A,$49,$49,$4F,$46,$47
 $66B4 DEFB $86,$97,$80,$80,$80,$FF,$9F,$FF
 $66BC DEFB $0F,$05,$1B,$2B,$F0,$14,$67,$ED
 $66C4 DEFB $FF,$AD,$FA,$F1,$E2,$AF,$1C,$F7
 $66CC DEFB $8F,$FF,$E3,$9D,$09,$C9,$49,$C9
 $66D4 DEFB $C9,$C9,$F0,$07,$07,$07,$07,$20
 $66DC DEFB $08,$A8,$10,$04,$40,$00,$00,$00
 $66E4 DEFB $00,$00,$00,$C0,$01,$0F,$F8,$07
 $66EC DEFB $0F,$1F,$FF,$FF,$07,$E0,$C0,$80
 $66F4 DEFB $00,$00,$00,$00,$FF,$02,$04,$04
 $66FC DEFB $08,$08,$10,$10,$20,$FF,$08,$10
 $6704 DEFB $10,$10,$20,$20,$40,$40,$00,$C0
 $670C DEFB $01,$01,$3F,$40,$40,$40,$80,$80
 $6714 DEFB $80,$00,$1F,$FE,$F8,$E0,$C0,$FF
 $671C DEFB $FF,$01,$03,$1E,$35,$EA,$D5,$AA
 $6724 DEFB $D5,$FF,$AB,$57,$AD,$59,$B0,$4F
 $672C DEFB $81,$03,$FF,$08,$08,$11,$F9,$7F
 $6734 DEFB $F4,$0C,$FC,$FF,$88,$8F,$10,$11
 $673C DEFB $F1,$21,$41,$41,$FF,$87,$86,$87
 $6744 DEFB $07,$07,$06,$03,$02,$F7,$98,$C7
 $674C DEFB $38,$3E,$C0,$C0,$25,$FF,$06,$D8
 $6754 DEFB $DF,$83,$BF,$4F,$7F,$7F,$25,$C2
 $675C DEFB $20,$02,$FF,$7F,$CC,$43,$C0,$C0
 $6764 DEFB $C0,$E0,$DF,$BF,$F8,$08,$88,$78
 $676C DEFB $0C,$03,$FF,$20,$01,$00,$C0,$01
 $6774 DEFB $1F,$E0,$7F,$FF,$FF,$0F,$FF,$FF
 $677C DEFB $FF,$F0,$07,$FF,$FF,$FF,$07,$FF
 $6784 DEFB $FF,$FF,$07,$FF,$FF,$80,$01,$E0
 $678C DEFB $00,$00,$00,$00,$00,$E0,$01,$01
 $6794 DEFB $02,$7F,$20,$40,$40,$81,$81,$02
 $679C DEFB $02,$07,$40,$80,$80,$E8,$07,$1F
 $67A4 DEFB $1F,$1F,$13,$FC,$E0,$FF,$FD,$FF
 $67AC DEFB $07,$1D,$EA,$D5,$AA,$D5,$FE,$8A
 $67B4 DEFB $54,$AA,$54,$AA,$54,$AA,$F0,$FF
 $67BC DEFB $03,$06,$0C,$DF,$AE,$D8,$B0,$E0
 $67C4 DEFB $80,$FF,$01,$FF,$04,$08,$10,$20
 $67CC DEFB $20,$40,$81,$01,$FF,$12,$11,$10
 $67D4 DEFB $21,$41,$81,$03,$02,$FF,$81,$81
 $67DC DEFB $83,$02,$03,$02,$06,$01,$EF,$FC
 $67E4 DEFB $FD,$FC,$FD,$FC,$A0,$89,$FF,$FE
 $67EC DEFB $9C,$4B,$BB,$E0,$BF,$1F,$09,$75
 $67F4 DEFB $80,$19,$80,$08,$10,$C0,$40,$02
 $67FC DEFB $FF,$46,$C1,$40,$C0,$E0,$D8,$46
 $6804 DEFB $E1,$FC,$C0,$20,$18,$06,$01,$FF
 $680C DEFB $1F,$FF,$FF,$FF,$FC,$80,$07,$FF
 $6814 DEFB $FA,$C0,$01,$80,$00,$00,$00,$00
 $681C DEFB $00,$00,$00,$00,$00,$00,$F0,$01
 $6824 DEFB $01,$01,$01,$0F,$FD,$FF,$E0,$9F
 $682C DEFB $09,$F0,$FF,$FD,$FF,$07,$FD,$AA
 $6834 DEFB $D5,$AA,$D5,$FE,$8A,$54,$AA,$54
 $683C DEFB $AA,$54,$AA,$00,$FF,$AA,$D5,$AA
 $6844 DEFB $D5,$AA,$D5,$AA,$D5,$7F,$AB,$55
 $684C DEFB $AB,$56,$B8,$60,$80,$E7,$18,$60
 $6854 DEFB $80,$01,$06,$08,$FF,$02,$04,$08
 $685C DEFB $30,$40,$80,$01,$02,$FF,$02,$07
 $6864 DEFB $08,$10,$20,$C0,$02,$03,$FF,$06
 $686C DEFB $FC,$08,$1B,$0E,$38,$C0,$80,$FF
 $6874 DEFB $0D,$2E,$BC,$C0,$08,$08,$10,$10
 $687C DEFB $FF,$9B,$23,$43,$46,$41,$40,$40
 $6884 DEFB $60,$DB,$F0,$40,$44,$90,$C1,$FC
 $688C DEFB $5C,$04,$08,$C0,$FF,$FD,$C0,$01
 $6894 DEFB $03,$06,$19,$87,$7F,$FF,$58,$C4
 $689C DEFB $42,$C2,$82,$02,$02,$0E,$1F,$C0
 $68A4 DEFB $20,$18,$06,$01,$04,$01,$00,$00
 $68AC DEFB $00,$00,$00,$00,$80,$0F,$E0,$07
 $68B4 DEFB $7F,$FF,$F8,$03,$3F,$FF,$FF,$FF
 $68BC DEFB $07,$FF,$FF,$E0,$C1,$F0,$0F,$7A
 $68C4 DEFB $F9,$FF,$03,$3E,$D5,$AA,$55,$FE
 $68CC DEFB $F8,$85,$2A,$55,$AA,$55,$AA,$FF
 $68D4 DEFB $FC,$54,$AC,$54,$AC,$54,$AC,$54
 $68DC DEFB $00,$FF,$AA,$D5,$AA,$D5,$AA,$D5
 $68E4 DEFB $AA,$D5,$FF,$AB,$55,$AB,$55,$AB
 $68EC DEFB $55,$AE,$58,$3F,$FF,$01,$0E,$18
 $68F4 DEFB $E0,$80,$83,$B0,$C0,$03,$7C,$01
 $68FC DEFB $06,$18,$20,$C0,$E3,$30,$C0,$01
 $6904 DEFB $02,$0C,$FF,$04,$08,$30,$41,$80
 $690C DEFB $05,$02,$0A,$FF,$1C,$49,$32,$44
 $6914 DEFB $8F,$08,$10,$22,$D0,$FF,$A0,$EA
 $691C DEFB $FF,$10,$10,$20,$20,$E0,$40,$40
 $6924 DEFB $40,$1F,$50,$2C,$17,$08,$07,$F8
 $692C DEFB $FC,$83,$7E,$41,$20,$50,$FF,$FF
 $6934 DEFB $FC,$07,$78,$83,$3C,$E0,$10,$0F
 $693C DEFB $35,$C8,$30,$C0,$FE,$80,$47,$38
 $6944 DEFB $10,$10,$08,$04,$00,$00,$80,$01
 $694C DEFB $C0,$0F,$FF,$F0,$07,$7F,$FF,$FF
 $6954 DEFB $0F,$FF,$FF,$FC,$C0,$03,$FE,$E0
 $695C DEFB $C0,$01,$1F,$F0,$01,$1F,$EA,$55
 $6964 DEFB $FC,$03,$3D,$EA,$55,$AA,$55,$FF
 $696C DEFB $0F,$75,$AA,$55,$AA,$55,$AA,$55
 $6974 DEFB $FF,$AA,$55,$AA,$55,$AA,$55,$AA
 $697C DEFB $55,$FF,$AA,$55,$AA,$55,$AA,$55
 $6984 DEFB $AA,$55,$FF,$AA,$55,$AA,$55,$AA
 $698C DEFB $55,$AA,$55,$FF,$AC,$54,$AC,$54
 $6994 DEFB $AF,$54,$AC,$55,$F0,$BF,$4E,$30
 $699C DEFB $C0,$1F,$AA,$D7,$B8,$E0,$80,$01
 $69A4 DEFB $E0,$F0,$03,$0C,$3F,$40,$4F,$04
 $69AC DEFB $18,$60,$80,$FF,$F8,$01,$02,$04
 $69B4 DEFB $F8,$10,$0F,$10,$20,$40,$80,$FF
 $69BC DEFB $04,$08,$28,$11,$12,$24,$10,$18
 $69C4 DEFB $7F,$41,$43,$86,$02,$0C,$03,$04
 $69CC DEFB $E3,$1E,$01,$01,$01,$01,$FF,$80
 $69D4 DEFB $E0,$C0,$E0,$C0,$60,$80,$C0,$00
 $69DC DEFB $FF,$20,$20,$10,$1F,$10,$08,$08
 $69E4 DEFB $08,$08,$FF,$7F,$10,$08,$04,$FE
 $69EC DEFB $02,$01,$01,$E0,$01,$FE,$80,$23
 $69F4 DEFB $02,$01,$FF,$0F,$FF,$FF,$FF,$F8
 $69FC DEFB $07,$FF,$FC,$C0,$01,$E0,$80,$0F
 $6A04 DEFB $E0,$0F,$F2,$2D,$F8,$0F,$FA,$55
 $6A0C DEFB $AA,$55,$FE,$07,$FA,$55,$AA,$55
 $6A14 DEFB $AA,$55,$FF,$EA,$55,$AA,$55,$AA
 $6A1C DEFB $55,$AA,$55,$FF,$AA,$55,$AA,$55
 $6A24 DEFB $AA,$55,$AA,$55,$FF,$AA,$55,$AA
 $6A2C DEFB $55,$AA,$55,$AA,$55,$FF,$AA,$55
 $6A34 DEFB $AA,$55,$AA,$55,$AA,$55,$FF,$AA
 $6A3C DEFB $55,$AA,$55,$AA,$55,$AA,$55,$FF
 $6A44 DEFB $AA,$55,$AA,$55,$AA,$55,$AB,$5C
 $6A4C DEFB $7F,$AA,$55,$AA,$55,$AE,$70,$80
 $6A54 DEFB $0F,$AF,$58,$E0,$80,$00,$E0,$01
 $6A5C DEFB $06,$18,$1F,$01,$06,$08,$30,$C0
 $6A64 DEFB $01,$80,$FC,$01,$02,$0C,$10,$20
 $6A6C DEFB $40,$03,$60,$80,$E0,$01,$01,$02
 $6A74 DEFB $3F,$38,$04,$12,$42,$85,$01,$30
 $6A7C DEFB $FF,$55,$FF,$02,$02,$03,$3E,$D5
 $6A84 DEFB $40,$04,$04,$17,$80,$C0,$80,$FF
 $6A8C DEFB $10,$FF,$FF,$08,$04,$04,$04,$FE
 $6A94 DEFB $02,$02,$02,$00,$00,$FF,$40,$40
 $6A9C DEFB $20,$20,$10,$08,$08,$04,$80,$C0
 $6AA4 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6AAC DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6AB4 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6ABC DEFB $28,$28,$28,$18,$18,$18,$28,$28
 $6AC4 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6ACC DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6AD4 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6ADC DEFB $28,$28,$28,$18,$18,$18,$28,$28
 $6AE4 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6AEC DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6AF4 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6AFC DEFB $28,$28,$28,$18,$18,$18,$28,$28
 $6B04 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6B0C DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6B14 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6B1C DEFB $28,$28,$28,$18,$18,$18,$28,$28
 $6B24 DEFB $28,$28,$28,$28,$05,$28,$28,$28
 $6B2C DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6B34 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6B3C DEFB $28,$28,$2B,$18,$18,$18,$28,$28
 $6B44 DEFB $05,$04,$05,$05,$05,$28,$28,$05
 $6B4C DEFB $28,$28,$28,$05,$28,$28,$28,$28
 $6B54 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6B5C DEFB $28,$28,$2B,$18,$18,$18,$28,$28
 $6B64 DEFB $20,$20,$04,$04,$07,$05,$05,$05
 $6B6C DEFB $05,$28,$28,$28,$28,$28,$28,$28
 $6B74 DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6B7C DEFB $28,$2B,$2B,$18,$18,$18,$28,$28
 $6B84 DEFB $20,$20,$20,$04,$20,$28,$05,$28
 $6B8C DEFB $28,$28,$28,$28,$28,$28,$28,$28
 $6B94 DEFB $28,$28,$28,$28,$28,$28,$28,$18
 $6B9C DEFB $28,$28,$1D,$18,$18,$18,$28,$28
 $6BA4 DEFB $20,$04,$04,$20,$20,$20,$04,$04
 $6BAC DEFB $20,$01,$01,$08,$08,$08,$08,$08
 $6BB4 DEFB $08,$08,$08,$08,$08,$08,$08,$18
 $6BBC DEFB $0B,$18,$03,$18,$18,$18,$08,$08
 $6BC4 DEFB $30,$30,$30,$30,$30,$30,$30,$30
 $6BCC DEFB $30,$30,$31,$31,$0E,$0E,$0E,$08
 $6BD4 DEFB $08,$08,$08,$08,$08,$0B,$0B,$18
 $6BDC DEFB $18,$18,$18,$18,$18,$18,$18,$0B
 $6BE4 DEFB $30,$30,$30,$30,$30,$30,$30,$30
 $6BEC DEFB $31,$31,$0E,$0E,$08,$08,$08,$08
 $6BF4 DEFB $08,$08,$08,$0B,$0B,$19,$18,$18
 $6BFC DEFB $18,$18,$18,$03,$18,$03,$18,$18
 $6C04 DEFB $30,$30,$31,$31,$0E,$0E,$0E,$0E
 $6C0C DEFB $0E,$08,$08,$08,$08,$08,$08,$0B
 $6C14 DEFB $0B,$0B,$19,$18,$03,$18,$18,$18
 $6C1C DEFB $18,$18,$03,$18,$03,$03,$18,$18
 $6C24 DEFB $0E,$0E,$0E,$08,$08,$08,$08,$08
 $6C2C DEFB $08,$08,$08,$08,$0B,$0B,$19,$19
 $6C34 DEFB $18,$03,$18,$18,$18,$18,$18,$18
 $6C3C DEFB $18,$18,$18,$03,$03,$03,$18,$18
 $6C44 DEFB $08,$08,$08,$08,$08,$08,$08,$0B
 $6C4C DEFB $0B,$0B,$19,$19,$18,$03,$18,$18
 $6C54 DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $6C5C DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $6C64 DEFB $08,$08,$0B,$0B,$0B,$19,$19,$18
 $6C6C DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $6C74 DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $6C7C DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $6C84 DEFB $19,$19,$19,$18,$18,$18,$18,$18
 $6C8C DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $6C94 DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $6C9C DEFB $18,$18,$18,$18,$18,$18,$18,$18

; Graphics: Sand Dunes
;
; #PUSHS #UDGTABLE
; { =h Sand Dunes }
; { #SIM(start=$BB3B,stop=$BB41,ix=#PC)#SCR$02{$00,$00,$200,$100}(sand-dunes) }
; UDGTABLE# #POPS
@label=Image_SandDunes
b$6CA4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CAC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CB4 DEFB $00,$00,$00,$00,$00,$00,$C0,$06
 $6CBC DEFB $0E,$F8,$04,$0F,$1F,$7F,$FF,$F0
 $6CC4 DEFB $60,$FF,$FF,$FF,$0F,$FF,$FF,$E9
 $6CCC DEFB $C0,$F8,$C0,$FE,$FF,$FF,$FF,$80
 $6CD4 DEFB $F0,$80,$01,$F8,$01,$0F,$7F,$FF
 $6CDC DEFB $FF,$07,$FF,$F8,$80,$01,$80,$00
 $6CE4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CEC DEFB $00,$00,$00,$E0,$01,$0F,$0F,$E0
 $6CF4 DEFB $F0,$D8,$C0,$00,$00,$00,$00,$00
 $6CFC DEFB $00,$00,$7C,$01,$01,$05,$07,$01
 $6D04 DEFB $0F,$F1,$F0,$18,$08,$E8,$01,$02
 $6D0C DEFB $09,$02,$F8,$10,$24,$88,$FB,$4A
 $6D14 DEFB $FE,$04,$08,$06,$D7,$97,$8F,$4F
 $6D1C DEFB $FE,$20,$F0,$98,$3E,$E8,$F0,$C8
 $6D24 DEFB $01,$07,$01,$E0,$F0,$02,$04,$04
 $6D2C DEFB $0C,$00,$00,$FC,$01,$01,$03,$01
 $6D34 DEFB $01,$02,$FF,$60,$60,$F0,$F8,$F8
 $6D3C DEFB $FC,$FC,$F4,$00,$00,$80,$E0,$FC
 $6D44 DEFB $06,$1F,$03,$03,$01,$01,$C0,$C0
 $6D4C DEFB $E0,$C0,$30,$F8,$00,$80,$01,$BE
 $6D54 DEFB $3C,$4F,$07,$03,$01,$FC,$F8,$E0
 $6D5C DEFB $F3,$FF,$BF,$DF,$83,$E0,$D0,$05
 $6D64 DEFB $FF,$E0,$20,$80,$80,$C0,$E0,$F8
 $6D6C DEFB $D8,$00,$00,$00,$00,$00,$80,$80
 $6D74 DEFB $8F,$03,$03,$01,$01,$01,$07,$7C
 $6D7C DEFB $78,$08,$00,$FF,$07,$03,$03,$09
 $6D84 DEFB $01,$14,$03,$0A,$FF,$FE,$BE,$9F
 $6D8C DEFB $7B,$B7,$B6,$BC,$EF,$F7,$10,$0F
 $6D94 DEFB $06,$24,$61,$64,$04,$FF,$F0,$C0
 $6D9C DEFB $C0,$C2,$0C,$80,$9B,$FB,$00,$C0
 $6DA4 DEFB $0F,$07,$BF,$FB,$FB,$F3,$EB,$E2
 $6DAC DEFB $C0,$01,$7F,$F3,$A7,$8F,$1F,$3F
 $6DB4 DEFB $3F,$38,$C0,$80,$E0,$E7,$07,$03
 $6DBC DEFB $01,$08,$18,$7C,$FF,$F8,$FC,$D8
 $6DC4 DEFB $58,$71,$61,$63,$67,$F8,$E0,$F0
 $6DCC DEFB $F0,$F0,$F0,$09,$01,$01,$7B,$01
 $6DD4 DEFB $C0,$79,$FE,$E0,$C0,$1F,$FE,$1E
 $6DDC DEFB $02,$02,$32,$27,$1C,$28,$20,$01
 $6DE4 DEFB $BF,$FC,$FE,$B8,$B8,$68,$28,$E0
 $6DEC DEFB $00,$0F,$01,$06,$06,$08,$FC,$4B
 $6DF4 DEFB $FF,$FE,$FC,$F8,$F5,$FC,$C0,$80
 $6DFC DEFB $10,$68,$B8,$F8,$7F,$F3,$CE,$C0
 $6E04 DEFB $C0,$E0,$E0,$60,$07,$DC,$0E,$01
 $6E0C DEFB $00,$00,$C0,$04,$02,$FC,$02,$06
 $6E14 DEFB $1A,$10,$8B,$85,$FF,$1A,$02,$2D
 $6E1C DEFB $4A,$A8,$28,$61,$8A,$07,$80,$80
 $6E24 DEFB $80,$FF,$1B,$39,$7F,$7F,$7F,$0F
 $6E2C DEFB $0F,$1F,$80,$02,$F6,$04,$01,$0D
 $6E34 DEFB $24,$31,$3E,$FF,$0F,$03,$63,$40
 $6E3C DEFB $92,$60,$10,$F0,$FF,$F1,$2E,$F6
 $6E44 DEFB $CD,$48,$98,$82,$01,$FF,$7F,$7E
 $6E4C DEFB $7B,$3B,$36,$A3,$31,$78,$FF,$DC
 $6E54 DEFB $C8,$F2,$E6,$C6,$04,$84,$8C,$C0
 $6E5C DEFB $04,$04,$1E,$01,$07,$07,$08,$FD
 $6E64 DEFB $C0,$30,$E2,$C4,$80,$80,$80,$F3
 $6E6C DEFB $01,$1F,$05,$0F,$1F,$1F,$1D,$10
 $6E74 DEFB $80,$80,$40,$7F,$83,$C3,$EF,$EF
 $6E7C DEFB $EF,$0F,$0F,$FF,$4F,$4F,$4E,$4E
 $6E84 DEFB $44,$64,$64,$F4,$FF,$E0,$80,$84
 $6E8C DEFB $9C,$9E,$8E,$84,$84,$0F,$03,$0F
 $6E94 DEFB $1E,$38,$FF,$FC,$FC,$38,$0F,$1F
 $6E9C DEFB $1F,$1F,$3F,$F3,$10,$F0,$01,$0F
 $6EA4 DEFB $0F,$FF,$E0,$08,$88,$88,$FF,$F0
 $6EAC DEFB $F8,$FE,$EF,$DF,$D2,$E3,$E0,$F8
 $6EB4 DEFB $80,$E0,$D0,$58,$78,$00,$43,$10
 $6EBC DEFB $10,$01,$FF,$07,$03,$03,$03,$01
 $6EC4 DEFB $01,$80,$E0,$F8,$80,$80,$E0,$FF
 $6ECC DEFB $FF,$C0,$A0,$B0,$F0,$80,$C0,$C1
 $6ED4 DEFB $C6,$C0,$C0,$C0,$73,$04,$0B,$06
 $6EDC DEFB $01,$02,$F7,$01,$25,$1A,$80,$C5
 $6EE4 DEFB $30,$60,$FF,$A9,$E0,$A8,$C8,$A8
 $6EEC DEFB $38,$90,$70,$E0,$01,$03,$03,$07
 $6EF4 DEFB $C0,$C0,$80,$02,$02,$FE,$EB,$40
 $6EFC DEFB $5A,$4E,$8C,$0A,$42,$FF,$F4,$94
 $6F04 DEFB $9C,$A4,$FC,$AC,$F8,$D4,$FE,$05
 $6F0C DEFB $80,$09,$4F,$36,$0C,$17,$DF,$87
 $6F14 DEFB $AF,$2F,$49,$C9,$CC,$EF,$FF,$35
 $6F1C DEFB $E5,$C7,$77,$3F,$FD,$C7,$07,$FF
 $6F24 DEFB $8C,$88,$B8,$E8,$48,$04,$88,$D0
 $6F2C DEFB $E0,$08,$18,$18,$3F,$5B,$69,$50
 $6F34 DEFB $D0,$E1,$80,$FF,$70,$78,$E4,$BF
 $6F3C DEFB $7C,$FA,$7F,$3F,$FC,$40,$60,$F0
 $6F44 DEFB $7A,$7E,$F0,$00,$01,$0B,$3F,$7B
 $6F4C DEFB $7B,$7B,$7B,$7B,$30,$FE,$60,$F0
 $6F54 DEFB $70,$F8,$F0,$FA,$FF,$3F,$1F,$38
 $6F5C DEFB $10,$30,$10,$10,$00,$03,$03,$01
 $6F64 DEFB $FF,$E0,$E0,$E0,$60,$70,$30,$38
 $6F6C DEFB $58,$F3,$38,$08,$02,$03,$01,$39
 $6F74 DEFB $C0,$21,$6F,$80,$03,$FF,$B0,$70
 $6F7C DEFB $58,$2D,$2F,$17,$0D,$0F,$FF,$FD
 $6F84 DEFB $78,$68,$7C,$3C,$FD,$F2,$E3,$3F
 $6F8C DEFB $73,$79,$7C,$78,$71,$C0,$FF,$CF
 $6F94 DEFB $8C,$FC,$FE,$FB,$EF,$EE,$EF,$60
 $6F9C DEFB $C0,$C0,$80,$01,$FF,$0B,$3F,$3E
 $6FA4 DEFB $1F,$17,$45,$25,$93,$3F,$DE,$8D
 $6FAC DEFB $FE,$10,$6D,$C8,$FF,$03,$07,$0F
 $6FB4 DEFB $0F,$07,$07,$07,$07,$C0,$01,$01
 $6FBC DEFB $FE,$04,$01,$03,$8F,$F3,$BF,$5B
 $6FC4 DEFB $F7,$04,$10,$4C,$90,$14,$A1,$83
 $6FCC DEFB $FF,$FC,$FA,$FE,$B8,$DA,$E8,$DC
 $6FD4 DEFB $D0,$0F,$17,$0F,$01,$01,$FF,$18
 $6FDC DEFB $30,$50,$90,$90,$90,$90,$70,$FF
 $6FE4 DEFB $35,$3D,$15,$0D,$0F,$09,$01,$01
 $6FEC DEFB $C7,$B0,$F0,$08,$07,$0C,$FF,$30
 $6FF4 DEFB $31,$31,$3E,$74,$78,$FC,$7F,$F8
 $6FFC DEFB $01,$11,$20,$60,$E0,$F3,$C0,$E0
 $7004 DEFB $30,$F4,$F4,$F4,$FF,$70,$FE,$FC
 $700C DEFB $A8,$F0,$F8,$F8,$F8,$00,$C0,$20
 $7014 DEFB $30,$00,$00,$BF,$7F,$3F,$3F,$0F
 $701C DEFB $07,$05,$03,$C0,$03,$04,$FE,$30
 $7024 DEFB $3F,$1E,$0F,$07,$FF,$3F,$EF,$B3
 $702C DEFB $93,$81,$01,$10,$10,$08,$BF,$F2
 $7034 DEFB $F8,$C0,$9E,$70,$E3,$9D,$DF,$08
 $703C DEFB $05,$03,$07,$03,$01,$04,$F1,$E1
 $7044 DEFB $08,$08,$A6,$E3,$FF,$87,$C7,$C7
 $704C DEFB $47,$65,$65,$53,$D7,$FB,$01,$04
 $7054 DEFB $02,$04,$84,$09,$08,$FE,$02,$86
 $705C DEFB $1F,$9F,$3F,$7F,$7F,$3F,$ED,$B6
 $7064 DEFB $06,$06,$06,$02,$03,$80,$80,$30
 $706C DEFB $06,$01,$FF,$01,$09,$15,$DE,$7D
 $7074 DEFB $9A,$E5,$01,$BC,$80,$80,$E0,$40
 $707C DEFB $08,$3F,$E0,$E0,$E0,$C0,$C0,$C0
 $7084 DEFB $22,$02,$02,$FF,$51,$F4,$6B,$BF
 $708C DEFB $3C,$94,$04,$03,$FB,$1E,$10,$27
 $7094 DEFB $B7,$57,$1B,$D3,$FF,$A4,$A0,$C0
 $709C DEFB $81,$8F,$83,$81,$87,$E0,$EE,$FE
 $70A4 DEFB $E0,$FF,$10,$10,$10,$10,$10,$17
 $70AC DEFB $16,$11,$7F,$FE,$FE,$F8,$C8,$E8
 $70B4 DEFB $30,$C0,$FF,$03,$03,$80,$80,$8C
 $70BC DEFB $B8,$E7,$CB,$FF,$FD,$DF,$11,$10
 $70C4 DEFB $10,$10,$D0,$51,$3F,$0F,$87,$01
 $70CC DEFB $B2,$BA,$C1,$EF,$7A,$80,$80,$0C
 $70D4 DEFB $B8,$7A,$1A,$5F,$06,$12,$86,$04
 $70DC DEFB $08,$20,$80,$1E,$FF,$18,$14,$1A
 $70E4 DEFB $1F,$0D,$0C,$07,$02,$FE,$01,$02
 $70EC DEFB $86,$66,$9E,$5D,$FF,$FE,$F0,$20
 $70F4 DEFB $40,$80,$80,$80,$80,$0B,$07,$03
 $70FC DEFB $01,$FE,$01,$01,$0F,$04,$0A,$53
 $7104 DEFB $0D,$FF,$CF,$B2,$CD,$0B,$76,$9C
 $710C DEFB $31,$BF,$3D,$10,$40,$C0,$80,$C0
 $7114 DEFB $07,$39,$72,$32,$C0,$0F,$FF,$C0
 $711C DEFB $FC,$FF,$2F,$02,$12,$12,$01,$01
 $7124 DEFB $1E,$04,$05,$0E,$0C,$07,$8F,$81
 $712C DEFB $80,$9F,$FF,$C7,$0F,$11,$07,$01
 $7134 DEFB $E0,$FF,$FF,$FF,$E0,$C0,$F8,$FF
 $713C DEFB $3F,$EE,$9E,$A0,$84,$D0,$80,$BF
 $7144 DEFB $E7,$4F,$01,$03,$1F,$03,$0C,$FC
 $714C DEFB $02,$01,$11,$AC,$83,$A7,$F0,$18
 $7154 DEFB $E4,$B0,$88,$C1,$0B,$06,$03,$FF
 $715C DEFB $78,$30,$30,$20,$20,$20,$26,$36
 $7164 DEFB $FF,$9F,$B3,$83,$83,$87,$8F,$97
 $716C DEFB $BE,$EB,$FC,$8E,$80,$30,$48,$A0
 $7174 DEFB $FF,$10,$10,$71,$3F,$3F,$3F,$3F
 $717C DEFB $3F,$01,$80,$80,$FF,$C0,$7F,$FF
 $7184 DEFB $E0,$F8,$FE,$D7,$C7,$F2,$F4,$72
 $718C DEFB $20,$94,$0C,$04,$80,$1F,$90,$82
 $7194 DEFB $EC,$F0,$E0,$97,$3D,$30,$04,$01
 $719C DEFB $03,$F8,$04,$08,$32,$05,$29,$7E
 $71A4 DEFB $06,$39,$07,$7F,$1F,$9C,$1F,$3C
 $71AC DEFB $DF,$F2,$F0,$E0,$E0,$07,$1F,$7F
 $71B4 DEFB $0F,$FF,$FE,$FC,$E0,$01,$C0,$C0
 $71BC DEFB $01,$03,$1F,$FF,$FD,$F8,$E0,$80
 $71C4 DEFB $E1,$A2,$01,$2A,$54,$F3,$F8,$47
 $71CC DEFB $88,$15,$AA,$55,$FC,$C2,$67,$39
 $71D4 DEFB $1E,$83,$41,$E7,$FF,$FD,$02,$80
 $71DC DEFB $40,$3F,$83,$FC,$CA,$F0,$FC,$01
 $71E4 DEFB $07,$1F,$3F,$FF,$FF,$F1,$E0,$0A
 $71EC DEFB $15,$20,$11,$FF,$01,$FC,$D7,$FA
 $71F4 DEFB $F5,$EA,$55,$AA,$FF,$7F,$3F,$9F
 $71FC DEFB $E1,$7E,$AB,$55,$AA,$E0,$C0,$60
 $7204 DEFB $70,$3F,$3F,$7F,$CB,$2F,$FF,$70
 $720C DEFB $1F,$E0,$8F,$91,$C0,$DC,$D0,$02
 $7214 DEFB $05,$18,$E0,$01,$63,$0F,$1F,$FF
 $721C DEFB $FF,$FE,$F8,$C0,$03,$F0,$80,$00
 $7224 DEFB $FC,$03,$07,$1F,$3F,$7F,$FF,$E1
 $722C DEFB $E2,$01,$0A,$15,$F1,$8A,$2A,$55
 $7234 DEFB $AA,$55,$EF,$C0,$70,$2E,$01,$55
 $723C DEFB $AA,$55,$F8,$80,$60,$50,$AE,$55
 $7244 DEFB $03,$FF,$03,$3F,$FF,$FF,$1F,$0F
 $724C DEFB $07,$03,$C0,$80,$A8,$F0,$07,$1F
 $7254 DEFB $3F,$FF,$07,$FC,$F0,$C0,$00,$00
 $725C DEFB $00,$FF,$0F,$0F,$1F,$3F,$3F,$3F
 $7264 DEFB $3F,$3F,$FA,$01,$05,$0A,$11,$2A
 $726C DEFB $15,$FF,$5D,$BA,$55,$AA,$D5,$AA
 $7274 DEFB $55,$AA,$FF,$55,$AA,$55,$AA,$55
 $727C DEFB $AA,$55,$AA,$3F,$57,$AB,$55,$AA
 $7284 DEFB $55,$A0,$0E,$FF,$57,$AA,$0F,$0F
 $728C DEFB $F1,$5E,$A9,$0F,$FF,$FF,$26,$01
 $7294 DEFB $1F,$D5,$BA,$FD,$EE,$1F,$1F,$55
 $729C DEFB $AA,$55,$AE,$FB,$33,$55,$80,$C0
 $72A4 DEFB $7F,$E7,$43,$22,$08,$F8,$0F,$38
 $72AC DEFB $7F,$F3,$08,$05,$0B,$07,$7F,$F0
 $72B4 DEFB $3F,$EB,$BC,$4B,$7F,$E0,$FF,$67
 $72BC DEFB $FF,$7E,$C0,$FC,$03,$81,$80,$E0
 $72C4 DEFB $00,$00,$FF,$01,$03,$03,$03,$07
 $72CC DEFB $07,$07,$07,$A0,$01,$01,$FF,$D5
 $72D4 DEFB $AA,$D5,$AA,$55,$AA,$55,$8A,$7F
 $72DC DEFB $15,$AA,$55,$2A,$50,$A0,$40,$0F
 $72E4 DEFB $55,$A2,$54,$80,$03,$54,$80,$F0
 $72EC DEFB $41,$07,$FC,$80,$3F,$24,$01,$16
 $72F4 DEFB $0B,$7E,$80,$0F,$B6,$58,$B0,$C0
 $72FC DEFB $00,$00,$00,$00,$C0,$07,$38,$6F
 $7304 DEFB $1F,$1F,$07,$01,$0F,$F0,$3F,$D5
 $730C DEFB $EA,$F5,$EA,$35,$FF,$7F,$55,$AA
 $7314 DEFB $55,$AA,$55,$FE,$01,$EF,$50,$A0
 $731C DEFB $10,$80,$80,$C0,$38,$00,$00,$00
 $7324 DEFB $00,$80,$01,$F0,$07,$18,$60,$80
 $732C DEFB $0F,$01,$06,$18,$E0,$01,$C0,$E0
 $7334 DEFB $03,$07,$0F,$FE,$03,$07,$1F,$FF
 $733C DEFB $FE,$FD,$FA,$F1,$8B,$2A,$45,$AA
 $7344 DEFB $45,$FF,$1C,$C3,$F8,$FE,$57,$AA
 $734C DEFB $D5,$AA,$FE,$80,$40,$38,$84,$E3
 $7354 DEFB $70,$BE,$E0,$80,$40,$30,$0F,$0F
 $735C DEFB $07,$07,$01,$E0,$C0,$E0,$E0,$FF
 $7364 DEFB $50,$A8,$D0,$E0,$D0,$E0,$F4,$F8
 $736C DEFB $00,$00,$00,$00,$00,$00,$00,$80
 $7374 DEFB $03,$F0,$07,$18,$60,$80,$0F,$01
 $737C DEFB $06,$08,$E0,$01,$C0,$C0,$03,$07
 $7384 DEFB $9F,$FF,$FC,$F8,$E0,$80,$01,$F9
 $738C DEFB $02,$14,$22,$14,$AA,$45,$F7,$F9
 $7394 DEFB $04,$03,$A8,$55,$AA,$55,$FE,$C0
 $739C DEFB $70,$8E,$F1,$FC,$5F,$AA,$F0,$F0
 $73A4 DEFB $0C,$C3,$E8,$C0,$07,$FF,$F8,$07
 $73AC DEFB $08,$B0,$C0,$80,$07,$0C,$70,$80
 $73B4 DEFB $00,$00,$80,$01,$9F,$F0,$E0,$E0
 $73BC DEFB $80,$80,$01,$FF,$F7,$EE,$D5,$EA
 $73C4 DEFB $D5,$AA,$55,$EA,$FF,$55,$EA,$55
 $73CC DEFB $AA,$55,$AA,$55,$AA,$3F,$55,$AA
 $73D4 DEFB $55,$AA,$41,$80,$1F,$57,$AA,$55
 $73DC DEFB $AA,$40,$0F,$8E,$C1,$78,$AF,$0A
 $73E4 DEFB $FF,$F0,$05,$03,$FF,$05,$F8,$BF
 $73EC DEFB $06,$3E,$C1,$06,$01,$FE,$F3,$60
 $73F4 DEFB $9F,$01,$0E,$30,$C0,$00,$00,$80
 $73FC DEFB $01,$78,$07,$18,$20,$C0,$07,$0C
 $7404 DEFB $30,$C0,$00,$00,$00,$1F,$F0,$F0
 $740C DEFB $E0,$C0,$80,$FF,$FD,$EA,$F7,$EB
 $7414 DEFB $F5,$BB,$D5,$AB,$FF,$D6,$AA,$55
 $741C DEFB $AE,$55,$AA,$55,$AA,$FF,$55,$AA
 $7424 DEFB $55,$AA,$55,$9A,$74,$A8,$3F,$55
 $742C DEFB $EA,$54,$AA,$50,$80,$0F,$7C,$9F
 $7434 DEFB $A2,$80,$0F,$03,$80,$FC,$D0,$03
 $743C DEFB $FC,$03,$0E,$70,$0C,$03,$38,$F8
 $7444 DEFB $06,$01,$C0,$80,$3E,$3F,$01,$03
 $744C DEFB $07,$07,$03,$01,$80,$A0,$7F,$2A
 $7454 DEFB $15,$2B,$5F,$2F,$7F,$2F,$C1,$40
 $745C DEFB $D0,$F0,$00,$00,$00,$E0,$0F,$30
 $7464 DEFB $C0,$30,$07,$F8,$18,$7F,$80,$07
 $746C DEFB $07,$08,$F0,$01,$FF,$00,$00,$F0
 $7474 DEFB $03,$0C,$10,$20,$1F,$06,$1C,$30
 $747C DEFB $C0,$80,$00,$00,$00,$00,$00,$3F
 $7484 DEFB $7F,$7F,$3F,$1F,$0F,$03,$FF,$DD
 $748C DEFB $EA,$D5,$AA,$F5,$FA,$F4,$7A,$FF
 $7494 DEFB $55,$AA,$57,$B4,$54,$A0,$50,$B0
 $749C DEFB $07,$50,$80,$40,$00,$00,$00,$00
 $74A4 DEFB $00,$00,$01,$03,$87,$A0,$10,$0E
 $74AC DEFB $0F,$77,$01,$04,$7B,$03,$0C,$F0
 $74B4 DEFB $1D,$FF,$DF,$07,$F8,$05,$F8,$FF
 $74BC DEFB $06,$0F,$F8,$02,$FF,$03,$07,$FC
 $74C4 DEFB $00,$00,$00,$00,$00,$00,$3E,$01
 $74CC DEFB $02,$04,$28,$D0,$01,$80,$00,$00
 $74D4 DEFB $00,$00,$00,$00,$00,$03,$3F,$0F
 $74DC DEFB $0F,$48,$A0,$F0,$3D,$30,$80,$60
 $74E4 DEFB $00,$00,$00,$80,$3F,$C0,$7F,$80
 $74EC DEFB $38,$01,$0F,$F0,$0C,$03,$FC,$03
 $74F4 DEFB $70,$80,$00,$00,$00,$00,$00,$00
 $74FC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7504 DEFB $00,$00,$00,$00,$00,$C0,$01,$16
 $750C DEFB $60,$1F,$F0,$38,$03,$1E,$F0,$08
 $7514 DEFB $FF,$06,$03,$FE,$02,$FF,$03,$07
 $751C DEFB $FC,$01,$FF,$01,$C0,$00,$00,$00
 $7524 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $752C DEFB $00,$00,$00,$00,$00,$68,$68,$68
 $7534 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $753C DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7544 DEFB $68,$68,$68,$6C,$6C,$6C,$65,$6C
 $754C DEFB $6C,$6C,$6C,$65,$65,$68,$68,$68
 $7554 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $755C DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7564 DEFB $68,$68,$6C,$65,$60,$60,$60,$60
 $756C DEFB $65,$65,$60,$60,$60,$6C,$6C,$68
 $7574 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $757C DEFB $68,$45,$68,$68,$68,$68,$68,$68
 $7584 DEFB $68,$6C,$65,$60,$60,$60,$44,$60
 $758C DEFB $60,$60,$44,$44,$60,$6C,$6C,$6C
 $7594 DEFB $68,$45,$45,$45,$68,$68,$68,$45
 $759C DEFB $45,$68,$68,$68,$68,$68,$68,$68
 $75A4 DEFB $68,$6C,$60,$60,$60,$60,$60,$60
 $75AC DEFB $60,$60,$44,$44,$60,$65,$6C,$6C
 $75B4 DEFB $68,$68,$45,$45,$68,$68,$68,$68
 $75BC DEFB $68,$68,$68,$68,$68,$68,$45,$68
 $75C4 DEFB $6C,$65,$60,$44,$60,$60,$44,$60
 $75CC DEFB $60,$60,$60,$60,$60,$60,$65,$65
 $75D4 DEFB $6C,$68,$68,$68,$68,$68,$68,$68
 $75DC DEFB $68,$68,$45,$68,$68,$68,$68,$68
 $75E4 DEFB $6C,$60,$60,$44,$60,$60,$60,$60
 $75EC DEFB $60,$60,$60,$44,$60,$60,$60,$60
 $75F4 DEFB $60,$65,$68,$68,$45,$45,$45,$68
 $75FC DEFB $68,$45,$45,$68,$68,$68,$68,$68
 $7604 DEFB $65,$60,$60,$44,$60,$60,$60,$44
 $760C DEFB $60,$60,$44,$44,$44,$60,$60,$60
 $7614 DEFB $60,$65,$68,$68,$45,$45,$46,$46
 $761C DEFB $45,$45,$45,$45,$6E,$6E,$45,$44
 $7624 DEFB $60,$60,$60,$60,$60,$60,$60,$44
 $762C DEFB $46,$46,$46,$44,$44,$44,$44,$44
 $7634 DEFB $44,$44,$46,$70,$70,$70,$46,$46
 $763C DEFB $46,$46,$70,$70,$70,$46,$70,$70
 $7644 DEFB $46,$44,$44,$45,$46,$74,$70,$70
 $764C DEFB $70,$46,$46,$46,$46,$70,$70,$45
 $7654 DEFB $46,$70,$70,$70,$70,$70,$46,$70
 $765C DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $7664 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $766C DEFB $46,$70,$70,$70,$70,$70,$70,$70
 $7674 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $767C DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $7684 DEFB $70,$70,$70,$46,$70,$70,$70,$70
 $768C DEFB $46,$70,$70,$70,$70,$70,$70,$70
 $7694 DEFB $70,$70,$70,$70,$70,$70,$46,$46
 $769C DEFB $46,$70,$70,$70,$70,$70,$70,$70
 $76A4 DEFB $70,$46,$70,$70,$70,$70,$70,$70
 $76AC DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $76B4 DEFB $70,$70,$70,$70,$70,$46,$70,$70
 $76BC DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $76C4 DEFB $70,$46,$46,$70,$70,$70,$70,$70
 $76CC DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $76D4 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $76DC DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $76E4 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $76EC DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $76F4 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $76FC DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $7704 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $770C DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $7714 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $771C DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $7724 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $772C DEFB $70,$70,$70,$70,$70

; Graphics: Bridge
;
; #PUSHS #UDGTABLE
; { =h Bridge }
; { #SIM(start=$BB3B,stop=$BB41,ix=#PC)#SCR$02{$00,$00,$200,$100}(bridge) }
; UDGTABLE# #POPS
@label=Image_Bridge
b$7731 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7739 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7741 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7749 DEFB $00,$00,$00,$00,$00,$00,$FC,$03
 $7751 DEFB $07,$0E,$4F,$36,$0E,$F8,$80,$40
 $7759 DEFB $E0,$D8,$F0,$00,$00,$E0,$0E,$0F
 $7761 DEFB $3D,$80,$A0,$00,$C0,$1E,$7F,$C0
 $7769 DEFB $E0,$98,$00,$00,$00,$00,$00,$00
 $7771 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7779 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7781 DEFB $00,$FF,$1D,$13,$0F,$01,$01,$01
 $7789 DEFB $01,$03,$E7,$F8,$D8,$C0,$58,$34
 $7791 DEFB $EF,$00,$FC,$01,$01,$01,$01,$01
 $7799 DEFB $03,$FF,$02,$01,$02,$01,$03,$01
 $77A1 DEFB $06,$03,$FF,$FC,$C2,$C1,$C0,$E0
 $77A9 DEFB $E0,$E0,$E0,$FC,$80,$60,$38,$44
 $77B1 DEFB $43,$40,$80,$C0,$FF,$CE,$C1,$C0
 $77B9 DEFB $E0,$E0,$E0,$E0,$E0,$FE,$80,$40
 $77C1 DEFB $30,$2C,$22,$21,$20,$C0,$80,$40
 $77C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $77D9 DEFB $00,$00,$E0,$02,$1F,$FF,$80,$C0
 $77E1 DEFB $38,$01,$03,$03,$EF,$F8,$84,$80
 $77E9 DEFB $70,$F8,$E0,$C0,$CD,$21,$A0,$60
 $77F1 DEFB $40,$01,$00,$FF,$03,$03,$03,$03
 $77F9 DEFB $07,$0F,$1F,$7F,$FF,$05,$06,$14
 $7801 DEFB $05,$0B,$05,$03,$07,$FF,$E0,$E0
 $7809 DEFB $E0,$E1,$E1,$E1,$E1,$E2,$07,$80
 $7811 DEFB $80,$80,$EF,$80,$80,$C0,$80,$80
 $7819 DEFB $80,$80,$FF,$E0,$E0,$E0,$E0,$E0
 $7821 DEFB $F0,$EC,$E3,$FF,$20,$10,$10,$10
 $7829 DEFB $10,$10,$10,$10,$07,$30,$0C,$03
 $7831 DEFB $F8,$80,$60,$18,$16,$11,$80,$80
 $7839 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7841 DEFB $00,$00,$00,$00,$00,$00,$80,$FC
 $7849 DEFB $FC,$01,$03,$02,$07,$01,$01,$FF
 $7851 DEFB $83,$8E,$85,$86,$09,$D7,$9E,$D9
 $7859 DEFB $FF,$E0,$E0,$F0,$F0,$F0,$E0,$E0
 $7861 DEFB $E0,$FC,$01,$06,$07,$1F,$3F,$77
 $7869 DEFB $FF,$33,$D6,$9C,$3E,$9E,$F9,$7E
 $7871 DEFB $C7,$EE,$40,$80,$04,$50,$41,$C4
 $7879 DEFB $FC,$01,$03,$03,$07,$0F,$FF,$00
 $7881 DEFB $FF,$0D,$0B,$0C,$07,$0F,$0B,$0B
 $7889 DEFB $0E,$FF,$E2,$E2,$E4,$E4,$E4,$E8
 $7891 DEFB $F8,$F0,$FE,$01,$01,$03,$07,$0F
 $7899 DEFB $1F,$1F,$FF,$01,$0B,$05,$0B,$2F
 $78A1 DEFB $1F,$76,$6B,$FF,$E1,$E1,$E1,$E1
 $78A9 DEFB $F1,$F1,$F1,$F1,$FF,$D0,$30,$18
 $78B1 DEFB $0E,$09,$08,$08,$08,$F0,$80,$60
 $78B9 DEFB $10,$1C,$FF,$10,$20,$20,$20,$20
 $78C1 DEFB $20,$20,$20,$FF,$60,$38,$26,$25
 $78C9 DEFB $24,$24,$42,$42,$F8,$80,$60,$18
 $78D1 DEFB $06,$01,$80,$80,$00,$00,$00,$00
 $78D9 DEFB $00,$00,$00,$00,$00,$00,$00,$FF
 $78E1 DEFB $01,$01,$02,$02,$02,$04,$04,$08
 $78E9 DEFB $FF,$07,$C7,$BF,$A9,$85,$82,$81
 $78F1 DEFB $83,$FF,$01,$01,$81,$C3,$E3,$E5
 $78F9 DEFB $EB,$F3,$FF,$F3,$82,$CE,$54,$4B
 $7901 DEFB $1A,$0A,$17,$3F,$1F,$1F,$0F,$0F
 $7909 DEFB $07,$01,$FF,$3F,$2E,$3C,$19,$2F
 $7911 DEFB $43,$47,$E7,$FF,$DF,$7E,$DF,$87
 $7919 DEFB $11,$81,$0F,$3F,$EF,$9E,$56,$01
 $7921 DEFB $03,$E0,$E0,$30,$00,$B8,$02,$03
 $7929 DEFB $0A,$10,$FF,$06,$32,$3B,$54,$71
 $7931 DEFB $0B,$25,$0F,$0F,$0F,$0F,$0F,$08
 $7939 DEFB $FF,$20,$37,$3F,$F0,$F3,$FC,$C2
 $7941 DEFB $08,$FF,$D7,$BD,$7F,$CF,$56,$2B
 $7949 DEFB $16,$4B,$FF,$F9,$F9,$F8,$F8,$F8
 $7951 DEFB $FC,$FC,$F8,$FF,$08,$08,$88,$88
 $7959 DEFB $88,$88,$84,$84,$FF,$13,$20,$20
 $7961 DEFB $20,$20,$20,$40,$40,$FF,$40,$C0
 $7969 DEFB $60,$58,$4E,$49,$48,$48,$FF,$42
 $7971 DEFB $42,$42,$42,$42,$C1,$61,$99,$00
 $7979 DEFB $07,$70,$0C,$03,$F8,$C0,$38,$16
 $7981 DEFB $11,$10,$C0,$80,$70,$00,$00,$00
 $7989 DEFB $00,$00,$00,$00,$00,$C0,$01,$01
 $7991 DEFB $FF,$10,$20,$21,$41,$41,$C1,$41
 $7999 DEFB $41,$FF,$85,$83,$05,$02,$03,$03
 $79A1 DEFB $07,$0E,$FF,$E3,$E3,$E3,$E3,$E3
 $79A9 DEFB $E2,$E2,$F2,$FF,$0E,$13,$85,$8B
 $79B1 DEFB $0B,$07,$07,$0F,$24,$02,$01,$1F
 $79B9 DEFB $52,$41,$58,$20,$20,$37,$38,$BE
 $79C1 DEFB $26,$18,$0C,$01,$10,$00,$06,$07
 $79C9 DEFB $01,$E7,$38,$DF,$FF,$01,$06,$7A
 $79D1 DEFB $3F,$06,$FB,$03,$F8,$70,$80,$F3
 $79D9 DEFB $40,$80,$03,$01,$31,$1B,$1F,$D9
 $79E1 DEFB $EE,$FE,$FC,$78,$00,$5F,$7B,$7B
 $79E9 DEFB $7B,$0B,$03,$01,$FF,$40,$40,$40
 $79F1 DEFB $40,$80,$80,$E0,$F9,$FF,$88,$88
 $79F9 DEFB $88,$88,$84,$84,$84,$04,$FF,$87
 $7A01 DEFB $81,$81,$81,$81,$80,$80,$80,$FE
 $7A09 DEFB $C0,$30,$2E,$21,$C0,$C0,$C0,$F0
 $7A11 DEFB $80,$70,$1C,$13,$FF,$10,$10,$10
 $7A19 DEFB $10,$10,$10,$10,$90,$03,$0C,$03
 $7A21 DEFB $FC,$E0,$5E,$41,$20,$20,$20,$70
 $7A29 DEFB $C0,$38,$07,$C0,$80,$70,$00,$00
 $7A31 DEFB $00,$00,$80,$03,$FF,$02,$04,$04
 $7A39 DEFB $09,$10,$63,$BE,$C2,$FF,$41,$41
 $7A41 DEFB $47,$7D,$C5,$45,$49,$4E,$BF,$CA
 $7A49 DEFB $39,$FA,$FD,$FC,$F5,$FD,$FF,$7E
 $7A51 DEFB $AE,$54,$A8,$5F,$F2,$FE,$18,$FF
 $7A59 DEFB $05,$0D,$25,$1D,$A9,$E9,$12,$05
 $7A61 DEFB $F8,$40,$04,$01,$11,$88,$00,$00
 $7A69 DEFB $00,$00,$01,$7F,$01,$FC,$00,$77
 $7A71 DEFB $E0,$F0,$E0,$C0,$F0,$80,$00,$00
 $7A79 DEFB $F0,$1C,$1F,$1F,$1F,$E2,$02,$80
 $7A81 DEFB $F0,$FE,$0F,$FA,$3A,$0A,$12,$F0
 $7A89 DEFB $80,$7E,$FD,$FF,$FF,$C0,$C0,$C0
 $7A91 DEFB $C0,$C0,$C0,$C0,$E0,$FF,$10,$20
 $7A99 DEFB $20,$20,$20,$20,$20,$40,$FF,$70
 $7AA1 DEFB $1C,$13,$10,$10,$10,$10,$10,$F8
 $7AA9 DEFB $C0,$38,$26,$25,$24,$FF,$20,$10
 $7AB1 DEFB $10,$10,$10,$10,$F8,$0F,$80,$F8
 $7AB9 DEFB $FF,$2F,$20,$40,$40,$40,$40,$80
 $7AC1 DEFB $80,$FE,$FE,$03,$02,$02,$02,$02
 $7AC9 DEFB $02,$84,$FF,$3F,$FE,$01,$FF,$01
 $7AD1 DEFB $01,$03,$3E,$CA,$FE,$FF,$10,$13
 $7AD9 DEFB $3C,$D0,$10,$10,$FF,$3E,$C8,$30
 $7AE1 DEFB $E0,$20,$20,$20,$21,$FF,$02,$02
 $7AE9 DEFB $02,$03,$07,$1E,$7F,$E4,$AF,$B0
 $7AF1 DEFB $E0,$97,$06,$EF,$E0,$E4,$FE,$F8
 $7AF9 DEFB $09,$07,$3F,$C8,$F0,$30,$A0,$C0
 $7B01 DEFB $80,$17,$03,$01,$01,$01,$3F,$EE
 $7B09 DEFB $7F,$46,$30,$80,$03,$7F,$3F,$DD
 $7B11 DEFB $0F,$37,$07,$32,$01,$F8,$44,$10
 $7B19 DEFB $58,$F2,$AC,$FF,$EF,$7F,$DF,$79
 $7B21 DEFB $47,$FA,$E5,$0B,$80,$38,$08,$01
 $7B29 DEFB $FC,$01,$01,$F0,$78,$3C,$1F,$F9
 $7B31 DEFB $C0,$FE,$F0,$E0,$C0,$C2,$00,$00
 $7B39 DEFB $00,$FF,$E0,$E0,$E0,$E0,$E0,$E0
 $7B41 DEFB $E0,$E0,$00,$03,$3F,$07,$1F,$FF
 $7B49 DEFB $FF,$FF,$1F,$03,$E3,$03,$08,$80
 $7B51 DEFB $F0,$FF,$9F,$BF,$3F,$07,$40,$01
 $7B59 DEFB $80,$7F,$EF,$EF,$EF,$EF,$0F,$01
 $7B61 DEFB $02,$FF,$24,$24,$44,$44,$44,$44
 $7B69 DEFB $C4,$FE,$FF,$08,$08,$08,$04,$04
 $7B71 DEFB $04,$04,$02,$FF,$47,$40,$41,$41
 $7B79 DEFB $41,$41,$42,$42,$FF,$F8,$87,$02
 $7B81 DEFB $02,$04,$04,$04,$04,$FF,$0F,$F1
 $7B89 DEFB $01,$01,$01,$01,$01,$01,$FF,$C8
 $7B91 DEFB $08,$08,$04,$04,$04,$04,$3F,$FF
 $7B99 DEFB $0A,$0A,$0A,$0A,$0A,$0C,$7F,$C4
 $7BA1 DEFB $7F,$08,$08,$08,$CB,$FC,$7F,$FF
 $7BA9 DEFB $EF,$27,$19,$78,$FF,$5B,$EE,$3A
 $7BB1 DEFB $F5,$08,$FB,$F8,$04,$F3,$FF,$3F
 $7BB9 DEFB $E0,$FF,$07,$F4,$F8,$C0,$07,$38
 $7BC1 DEFB $B0,$C0,$00,$00,$F0,$E0,$F0,$38
 $7BC9 DEFB $1F,$00,$00,$7F,$97,$76,$3D,$07
 $7BD1 DEFB $8C,$48,$80,$FF,$30,$E0,$E0,$C0
 $7BD9 DEFB $E0,$E0,$E1,$FB,$FF,$01,$03,$87
 $7BE1 DEFB $CE,$C0,$C0,$C1,$C3,$FE,$04,$14
 $7BE9 DEFB $94,$10,$68,$68,$68,$3F,$06,$0E
 $7BF1 DEFB $7C,$3C,$08,$18,$00,$00,$00,$1F
 $7BF9 DEFB $1F,$0F,$0F,$05,$01,$1F,$F7,$E5
 $7C01 DEFB $D1,$C1,$01,$80,$80,$00,$00,$03
 $7C09 DEFB $1F,$03,$07,$FF,$FF,$3F,$0F,$FD
 $7C11 DEFB $FF,$FF,$FF,$E3,$01,$04,$C0,$FF
 $7C19 DEFB $FF,$C5,$BD,$11,$FF,$FF,$CD,$FB
 $7C21 DEFB $CF,$20,$FF,$FF,$3F,$77,$80,$FB
 $7C29 DEFB $BC,$FF,$FF,$1D,$FF,$FF,$9F,$FC
 $7C31 DEFB $0F,$FF,$03,$FB,$FC,$07,$FF,$FF
 $7C39 DEFB $F8,$0F,$BC,$9F,$07,$02,$3F,$80
 $7C41 DEFB $C0,$E0,$C0,$80,$40,$00,$00,$00
 $7C49 DEFB $00,$FF,$0F,$07,$07,$03,$03,$03
 $7C51 DEFB $03,$03,$7F,$1F,$0F,$07,$07,$03
 $7C59 DEFB $02,$02,$FE,$40,$C0,$C0,$C0,$E0
 $7C61 DEFB $E1,$F3,$FF,$1E,$78,$78,$F0,$F0
 $7C69 DEFB $F0,$F0,$F8,$FE,$80,$E2,$F8,$7E
 $7C71 DEFB $7E,$7E,$BC,$27,$3C,$3E,$18,$40
 $7C79 DEFB $FF,$D7,$D7,$D6,$16,$22,$23,$23
 $7C81 DEFB $23,$FF,$FB,$E7,$7D,$C3,$CB,$D7
 $7C89 DEFB $D2,$E7,$00,$00,$00,$00,$00,$FF
 $7C91 DEFB $80,$C4,$C1,$E1,$E0,$F1,$F0,$FC
 $7C99 DEFB $FE,$40,$80,$40,$7C,$E0,$20,$3E
 $7CA1 DEFB $80,$08,$00,$00,$00,$00,$00,$00
 $7CA9 DEFB $0F,$FF,$F7,$E1,$83,$F0,$E0,$F0
 $7CB1 DEFB $F8,$FF,$00,$FC,$01,$03,$05,$1F
 $7CB9 DEFB $3F,$BF,$0F,$FF,$FE,$3E,$3C,$00
 $7CC1 DEFB $00,$00,$3C,$03,$07,$1F,$71,$C3
 $7CC9 DEFB $FF,$C0,$E0,$F0,$3F,$FE,$7E,$1F
 $7CD1 DEFB $0F,$03,$01,$00,$00,$00,$FF,$43
 $7CD9 DEFB $43,$43,$23,$23,$23,$23,$13,$FF
 $7CE1 DEFB $EF,$AC,$86,$84,$84,$88,$88,$91
 $7CE9 DEFB $FF,$23,$27,$47,$47,$47,$47,$86
 $7CF1 DEFB $0F,$FF,$CF,$8F,$8C,$0C,$18,$20
 $7CF9 DEFB $C0,$01,$FB,$EF,$01,$01,$23,$47
 $7D01 DEFB $8F,$1F,$00,$00,$00,$00,$7F,$03
 $7D09 DEFB $03,$02,$07,$04,$02,$03,$FB,$0F
 $7D11 DEFB $DF,$DB,$1A,$80,$04,$46,$7F,$89
 $7D19 DEFB $97,$FA,$D4,$A4,$20,$80,$1F,$10
 $7D21 DEFB $50,$FA,$94,$96,$00,$00,$00,$00
 $7D29 DEFB $FC,$01,$07,$0F,$1F,$3F,$0F,$00
 $7D31 DEFB $00,$07,$7F,$7C,$10,$00,$00,$00
 $7D39 DEFB $00,$80,$01,$3F,$FE,$F8,$F0,$E0
 $7D41 DEFB $E0,$C0,$00,$00,$00,$00,$00,$FF
 $7D49 DEFB $13,$13,$13,$13,$0F,$0F,$8F,$CF
 $7D51 DEFB $FF,$92,$A2,$C4,$C8,$90,$A3,$45
 $7D59 DEFB $58,$FF,$14,$18,$20,$40,$80,$80
 $7D61 DEFB $01,$02,$FF,$02,$0C,$10,$20,$41
 $7D69 DEFB $83,$07,$1F,$FF,$3F,$3F,$7F,$F8
 $7D71 DEFB $F1,$E3,$E2,$C4,$FE,$07,$7C,$E0
 $7D79 DEFB $90,$60,$E0,$80,$00,$00,$00,$00
 $7D81 DEFB $DB,$05,$35,$87,$06,$94,$01,$FF
 $7D89 DEFB $20,$E5,$BF,$B2,$5E,$E8,$7F,$30
 $7D91 DEFB $FF,$70,$80,$03,$FC,$4F,$87,$F8
 $7D99 DEFB $01,$F0,$E0,$30,$E0,$40,$00,$00
 $7DA1 DEFB $00,$FF,$1F,$3F,$2F,$7F,$7F,$7F
 $7DA9 DEFB $7F,$3F,$00,$00,$00,$FC,$0F,$0E
 $7DB1 DEFB $18,$38,$39,$7F,$F0,$F0,$F8,$E0
 $7DB9 DEFB $C0,$F8,$02,$01,$07,$0F,$03,$A0
 $7DC1 DEFB $80,$80,$CF,$03,$03,$07,$07,$E0
 $7DC9 DEFB $E0,$FF,$F8,$F0,$80,$01,$01,$03
 $7DD1 DEFB $03,$03,$C3,$E0,$C0,$0E,$3F,$00
 $7DD9 DEFB $00,$00,$00,$FD,$09,$98,$E9,$95
 $7DE1 DEFB $79,$F9,$F1,$DF,$E0,$80,$07,$38
 $7DE9 DEFB $C0,$07,$7F,$DF,$F3,$8F,$7F,$FE
 $7DF1 DEFB $F8,$01,$01,$FF,$3F,$77,$EF,$FE
 $7DF9 DEFB $6F,$30,$88,$C7,$7F,$3B,$34,$64
 $7E01 DEFB $18,$70,$70,$84,$00,$00,$00,$00
 $7E09 DEFB $00,$EF,$09,$15,$04,$0B,$02,$01
 $7E11 DEFB $01,$FF,$DF,$47,$89,$91,$12,$2C
 $7E19 DEFB $50,$03,$FF,$C0,$3C,$80,$E0,$D8
 $7E21 DEFB $66,$FE,$20,$00,$00,$00,$C0,$08
 $7E29 DEFB $18,$FF,$1F,$1F,$1F,$0F,$1F,$1F
 $7E31 DEFB $3F,$5F,$00,$00,$FF,$01,$03,$07
 $7E39 DEFB $07,$0C,$0D,$09,$03,$00,$FF,$C0
 $7E41 DEFB $80,$C0,$F0,$F8,$FC,$CC,$E0,$FF
 $7E49 DEFB $03,$03,$07,$03,$01,$07,$07,$6D
 $7E51 DEFB $0F,$7F,$1E,$0C,$08,$FF,$C8,$8C
 $7E59 DEFB $96,$0E,$EF,$EF,$FE,$FE,$CF,$07
 $7E61 DEFB $07,$06,$06,$01,$03,$DF,$70,$C0
 $7E69 DEFB $C0,$80,$80,$07,$7F,$C0,$E0,$F8
 $7E71 DEFB $00,$00,$00,$FF,$37,$7F,$BF,$77
 $7E79 DEFB $96,$6E,$2F,$56,$9F,$FF,$FF,$F6
 $7E81 DEFB $F9,$58,$80,$FF,$EE,$06,$07,$06
 $7E89 DEFB $C6,$3F,$07,$07,$7F,$8F,$D3,$6C
 $7E91 DEFB $96,$8B,$85,$01,$FF,$0E,$06,$F1
 $7E99 DEFB $F8,$FE,$7F,$7F,$BF,$00,$00,$00
 $7EA1 DEFB $00,$00,$00,$F8,$40,$40,$40,$63
 $7EA9 DEFB $79,$FB,$7C,$90,$10,$10,$10,$30
 $7EB1 DEFB $B0,$00,$00,$00,$FF,$18,$18,$19
 $7EB9 DEFB $1B,$1F,$1F,$1F,$1F,$00,$00,$80
 $7EC1 DEFB $78,$FF,$03,$03,$03,$03,$03,$62
 $7EC9 DEFB $E0,$FE,$FC,$40,$C2,$C6,$C7,$CF
 $7ED1 DEFB $CF,$FF,$F0,$F0,$B0,$D8,$EF,$27
 $7ED9 DEFB $07,$0F,$07,$9E,$A0,$80,$00,$00
 $7EE1 DEFB $F9,$C3,$20,$F8,$F0,$FF,$FF,$C0
 $7EE9 DEFB $80,$C0,$FF,$03,$07,$0F,$1F,$1F
 $7EF1 DEFB $1F,$3F,$3F,$00,$00,$00,$FF,$5F
 $7EF9 DEFB $BF,$BF,$7E,$7C,$ED,$FD,$1D,$DF
 $7F01 DEFB $03,$04,$28,$67,$C7,$0F,$4F,$DD
 $7F09 DEFB $F0,$D8,$FC,$FE,$F8,$E0,$01,$40
 $7F11 DEFB $FC,$01,$07,$1E,$5C,$3C,$FC,$E0
 $7F19 DEFB $04,$3E,$78,$00,$00,$00,$00,$00
 $7F21 DEFB $07,$03,$03,$03,$DD,$10,$07,$0F
 $7F29 DEFB $0F,$03,$03,$20,$C0,$00,$00,$FF
 $7F31 DEFB $3F,$3F,$7F,$7F,$7F,$7F,$7F,$7F
 $7F39 DEFB $00,$00,$FF,$07,$03,$3F,$3D,$6B
 $7F41 DEFB $0C,$0D,$09,$FB,$80,$03,$02,$02
 $7F49 DEFB $03,$01,$35,$FB,$D0,$40,$87,$9C
 $7F51 DEFB $B1,$21,$03,$E5,$E0,$02,$08,$01
 $7F59 DEFB $E1,$00,$00,$00,$00,$FF,$F0,$F1
 $7F61 DEFB $FC,$F8,$F8,$F0,$F0,$FD,$F9,$3C
 $7F69 DEFB $01,$01,$03,$27,$0F,$00,$00,$00
 $7F71 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7F79 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7F81 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7F89 DEFB $68,$68,$68,$68,$68,$68,$6C,$6C
 $7F91 DEFB $68,$68,$68,$68,$68,$6E,$68,$68
 $7F99 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7FA1 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7FA9 DEFB $68,$68,$68,$68,$68,$68,$6C,$6C
 $7FB1 DEFB $68,$6E,$70,$68,$68,$75,$68,$68
 $7FB9 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7FC1 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7FC9 DEFB $68,$68,$68,$68,$68,$6C,$65,$65
 $7FD1 DEFB $68,$6E,$70,$68,$68,$75,$68,$68
 $7FD9 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7FE1 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $7FE9 DEFB $68,$68,$68,$70,$68,$6C,$68,$65
 $7FF1 DEFB $6E,$70,$70,$68,$6E,$70,$68,$68
 $7FF9 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $8001 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $8009 DEFB $68,$70,$68,$70,$45,$6C,$60,$44
 $8011 DEFB $70,$70,$70,$45,$70,$70,$68,$68
 $8019 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $8021 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $8029 DEFB $68,$70,$68,$70,$46,$44,$44,$44
 $8031 DEFB $70,$70,$70,$70,$70,$46,$47,$45
 $8039 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $8041 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $8049 DEFB $68,$46,$70,$70,$46,$47,$47,$47
 $8051 DEFB $70,$70,$70,$70,$46,$47,$47,$45
 $8059 DEFB $45,$45,$68,$68,$68,$68,$68,$68
 $8061 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $8069 DEFB $45,$46,$70,$70,$70,$70,$46,$70
 $8071 DEFB $70,$70,$70,$46,$47,$47,$47,$68
 $8079 DEFB $68,$68,$68,$45,$45,$45,$68,$68
 $8081 DEFB $68,$68,$68,$68,$68,$68,$68,$46
 $8089 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $8091 DEFB $70,$70,$44,$46,$47,$47,$47,$45
 $8099 DEFB $45,$68,$68,$68,$68,$68,$68,$45
 $80A1 DEFB $45,$45,$68,$68,$68,$68,$68,$75
 $80A9 DEFB $70,$70,$70,$70,$70,$46,$70,$70
 $80B1 DEFB $44,$46,$60,$60,$47,$47,$47,$47
 $80B9 DEFB $47,$68,$68,$68,$68,$68,$68,$68
 $80C1 DEFB $68,$68,$75,$6E,$6E,$6E,$75,$70
 $80C9 DEFB $70,$70,$70,$46,$46,$47,$47,$47
 $80D1 DEFB $60,$60,$60,$60,$60,$47,$47,$47
 $80D9 DEFB $47,$45,$45,$68,$68,$68,$68,$68
 $80E1 DEFB $68,$6E,$70,$70,$75,$70,$70,$70
 $80E9 DEFB $70,$70,$46,$47,$47,$47,$47,$47
 $80F1 DEFB $60,$60,$60,$60,$60,$44,$47,$47
 $80F9 DEFB $47,$47,$45,$68,$68,$68,$68,$68
 $8101 DEFB $68,$6E,$70,$70,$70,$70,$70,$70
 $8109 DEFB $70,$70,$70,$46,$47,$47,$47,$47
 $8111 DEFB $44,$60,$44,$60,$44,$47,$47,$47
 $8119 DEFB $47,$47,$45,$68,$68,$68,$68,$68
 $8121 DEFB $6E,$6E,$70,$70,$70,$47,$70,$70
 $8129 DEFB $46,$70,$70,$46,$46,$47,$47,$47
 $8131 DEFB $60,$60,$60,$44,$60,$47,$47,$47
 $8139 DEFB $47,$47,$47,$68,$68,$68,$68,$68
 $8141 DEFB $6E,$70,$70,$70,$70,$46,$70,$46
 $8149 DEFB $47,$47,$70,$70,$70,$47,$47,$47
 $8151 DEFB $60,$44,$44,$44,$44,$44,$47,$47
 $8159 DEFB $47,$47,$47,$45,$45,$68,$68,$68
 $8161 DEFB $6E,$70,$70,$70,$46,$70,$46,$47
 $8169 DEFB $47,$47,$47,$70,$70,$47,$47,$47

; Graphics: Cave
;
; #PUSHS #UDGTABLE
; { =h Cave }
; { #SIM(start=$BB3B,stop=$BB41,ix=#PC)#SCR$02{$00,$00,$200,$100}(cave) }
; UDGTABLE# #POPS
@label=Image_Cave
b$8171 DEFB $00,$00,$00,$00,$FC,$20,$20,$20
 $8179 DEFB $20,$20,$20,$00,$05,$03,$01,$FF
 $8181 DEFB $80,$C0,$40,$C0,$80,$80,$80,$80
 $8189 DEFB $00,$00,$00,$00,$00,$00,$00,$FC
 $8191 DEFB $01,$01,$01,$01,$02,$02,$07,$40
 $8199 DEFB $C0,$40,$00,$00,$00,$00,$FE,$04
 $81A1 DEFB $04,$04,$04,$04,$02,$02,$00,$00
 $81A9 DEFB $FE,$01,$01,$01,$01,$01,$01,$01
 $81B1 DEFB $FC,$18,$10,$10,$10,$10,$10,$00
 $81B9 DEFB $00,$00,$00,$00,$FF,$40,$40,$40
 $81C1 DEFB $80,$80,$80,$80,$80,$00,$00,$00
 $81C9 DEFB $00,$FF,$20,$20,$20,$20,$20,$20
 $81D1 DEFB $20,$20,$00,$00,$FF,$80,$80,$C0
 $81D9 DEFB $40,$20,$20,$20,$20,$00,$00,$00
 $81E1 DEFB $00,$00,$FF,$20,$20,$40,$42,$40
 $81E9 DEFB $28,$20,$50,$00,$1F,$03,$02,$02
 $81F1 DEFB $02,$01,$E0,$C0,$80,$80,$00,$00
 $81F9 DEFB $00,$00,$FF,$02,$02,$02,$02,$02
 $8201 DEFB $02,$01,$01,$00,$00,$00,$FF,$90
 $8209 DEFB $98,$90,$90,$90,$98,$88,$88,$00
 $8211 DEFB $00,$00,$00,$FE,$01,$01,$01,$01
 $8219 DEFB $01,$01,$02,$01,$80,$00,$00,$00
 $8221 DEFB $00,$FF,$20,$20,$20,$20,$20,$20
 $8229 DEFB $20,$20,$00,$00,$FF,$20,$20,$20
 $8231 DEFB $20,$20,$20,$20,$30,$00,$00,$00
 $8239 DEFB $00,$F8,$01,$03,$07,$0F,$3F,$3F
 $8241 DEFB $DB,$AF,$97,$0B,$16,$0B,$FD,$10
 $8249 DEFB $10,$28,$20,$5A,$D2,$A8,$00,$FF
 $8251 DEFB $90,$C4,$A1,$D0,$E8,$53,$68,$36
 $8259 DEFB $FD,$02,$02,$02,$17,$0C,$0E,$18
 $8261 DEFB $00,$00,$00,$3F,$01,$01,$01,$01
 $8269 DEFB $01,$01,$C0,$80,$80,$00,$00,$FF
 $8271 DEFB $90,$90,$90,$90,$50,$50,$50,$48
 $8279 DEFB $00,$00,$00,$00,$FF,$02,$02,$02
 $8281 DEFB $02,$04,$04,$04,$04,$00,$00,$00
 $8289 DEFB $00,$00,$FF,$20,$20,$30,$30,$30
 $8291 DEFB $20,$20,$60,$00,$00,$FF,$18,$10
 $8299 DEFB $10,$10,$14,$10,$10,$10,$00,$00
 $82A1 DEFB $FC,$04,$08,$08,$08,$0C,$10,$FF
 $82A9 DEFB $01,$03,$07,$07,$0F,$1F,$3F,$3F
 $82B1 DEFB $00,$00,$3F,$0B,$05,$0A,$05,$02
 $82B9 DEFB $01,$FD,$40,$4A,$A8,$40,$D0,$44
 $82C1 DEFB $A0,$FF,$2A,$36,$39,$37,$2F,$3F
 $82C9 DEFB $3F,$3F,$FF,$12,$71,$EB,$F3,$E9
 $82D1 DEFB $F5,$F5,$F9,$00,$00,$00,$00,$FF
 $82D9 DEFB $80,$80,$80,$C0,$80,$80,$80,$C0
 $82E1 DEFB $00,$00,$FF,$48,$48,$48,$4C,$44
 $82E9 DEFB $48,$88,$90,$00,$00,$00,$00,$FF
 $82F1 DEFB $04,$04,$08,$08,$08,$08,$08,$10
 $82F9 DEFB $00,$00,$00,$00,$00,$FF,$60,$60
 $8301 DEFB $20,$20,$30,$10,$10,$10,$00,$00
 $8309 DEFB $FF,$10,$10,$30,$08,$08,$08,$08
 $8311 DEFB $08,$00,$80,$01,$1F,$E7,$CA,$86
 $8319 DEFB $84,$80,$00,$00,$00,$00,$1F,$2F
 $8321 DEFB $47,$0B,$07,$02,$03,$C0,$80,$FF
 $8329 DEFB $FD,$FD,$F9,$FC,$FA,$FC,$FE,$FE
 $8331 DEFB $FC,$80,$80,$80,$C0,$40,$40,$00
 $8339 DEFB $00,$00,$FF,$C0,$C0,$40,$60,$60
 $8341 DEFB $60,$60,$50,$00,$FC,$01,$03,$02
 $8349 DEFB $02,$04,$04,$FF,$8C,$88,$08,$08
 $8351 DEFB $08,$08,$08,$08,$00,$00,$00,$00
 $8359 DEFB $FF,$10,$10,$10,$10,$10,$20,$20
 $8361 DEFB $20,$00,$00,$00,$00,$00,$FF,$10
 $8369 DEFB $10,$10,$10,$10,$28,$08,$08,$00
 $8371 DEFB $00,$FF,$08,$08,$08,$08,$08,$08
 $8379 DEFB $04,$04,$00,$FF,$03,$03,$07,$07
 $8381 DEFB $07,$0F,$0F,$0F,$00,$00,$00,$00
 $8389 DEFB $00,$00,$00,$3E,$01,$01,$01,$01
 $8391 DEFB $01,$FF,$40,$E0,$60,$60,$30,$38
 $8399 DEFB $20,$0C,$00,$00,$00,$FF,$50,$48
 $83A1 DEFB $48,$48,$44,$44,$42,$42,$C0,$03
 $83A9 DEFB $1C,$FF,$04,$04,$08,$08,$18,$E0
 $83B1 DEFB $10,$10,$FF,$08,$08,$10,$10,$10
 $83B9 DEFB $10,$08,$08,$00,$00,$00,$00,$FF
 $83C1 DEFB $20,$20,$20,$40,$40,$40,$40,$40
 $83C9 DEFB $00,$00,$00,$80,$04,$00,$FF,$08
 $83D1 DEFB $08,$08,$04,$04,$04,$04,$04,$00
 $83D9 DEFB $00,$7F,$04,$04,$06,$02,$04,$02
 $83E1 DEFB $06,$00,$7F,$E0,$C0,$C0,$80,$80
 $83E9 DEFB $80,$80,$00,$00,$00,$00,$00,$00
 $83F1 DEFB $00,$01,$01,$FF,$08,$44,$82,$52
 $83F9 DEFB $A2,$52,$EA,$F3,$8C,$80,$80,$80
 $8401 DEFB $00,$00,$FF,$21,$21,$20,$20,$40
 $8409 DEFB $40,$40,$40,$03,$60,$C0,$FF,$10
 $8411 DEFB $10,$10,$10,$10,$10,$10,$10,$FF
 $8419 DEFB $08,$08,$18,$08,$08,$10,$30,$10
 $8421 DEFB $00,$00,$00,$C0,$01,$01,$3F,$80
 $8429 DEFB $80,$80,$80,$80,$80,$00,$80,$02
 $8431 DEFB $FF,$04,$04,$02,$03,$05,$0C,$0C
 $8439 DEFB $0C,$FF,$0C,$08,$08,$88,$D0,$D0
 $8441 DEFB $D0,$73,$00,$3F,$04,$02,$02,$02
 $8449 DEFB $01,$01,$E0,$80,$80,$80,$00,$00
 $8451 DEFB $FF,$01,$03,$03,$07,$0F,$0F,$1F
 $8459 DEFB $1F,$00,$00,$00,$00,$00,$00,$00
 $8461 DEFB $00,$00,$FF,$DD,$F0,$EE,$F7,$F9
 $8469 DEFB $F4,$EA,$EA,$FF,$08,$C0,$24,$DC
 $8471 DEFB $1E,$FE,$83,$90,$C0,$80,$40,$00
 $8479 DEFB $FF,$20,$20,$20,$60,$20,$20,$20
 $8481 DEFB $20,$00,$FF,$11,$10,$10,$20,$20
 $8489 DEFB $20,$20,$20,$FF,$10,$18,$18,$1C
 $8491 DEFB $0A,$0A,$09,$0D,$00,$00,$00,$FF
 $8499 DEFB $01,$01,$01,$02,$02,$02,$02,$02
 $84A1 DEFB $00,$00,$FF,$02,$03,$03,$03,$01
 $84A9 DEFB $C1,$49,$6D,$7F,$EB,$E5,$E1,$E2
 $84B1 DEFB $E0,$C0,$40,$7F,$4C,$0D,$19,$1B
 $84B9 DEFB $0B,$0B,$B0,$FC,$38,$61,$63,$C6
 $84C1 DEFB $8C,$98,$18,$01,$02,$FF,$80,$80
 $84C9 DEFB $80,$80,$80,$80,$40,$40,$00,$F0
 $84D1 DEFB $01,$01,$03,$03,$07,$C0,$C0,$80
 $84D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $84E1 DEFB $00,$FF,$F9,$F9,$F8,$F4,$F4,$FA
 $84E9 DEFB $F9,$FE,$FF,$88,$A1,$D0,$BC,$D4
 $84F1 DEFB $78,$D4,$6A,$9F,$30,$10,$90,$88
 $84F9 DEFB $C0,$80,$FF,$20,$40,$20,$10,$08
 $8501 DEFB $15,$0A,$05,$FF,$20,$20,$20,$20
 $8509 DEFB $10,$10,$10,$10,$00,$FF,$20,$21
 $8511 DEFB $20,$20,$20,$20,$20,$20,$FF,$08
 $8519 DEFB $08,$18,$08,$08,$08,$08,$04,$FF
 $8521 DEFB $80,$40,$40,$20,$10,$10,$08,$0F
 $8529 DEFB $80,$C0,$00,$FF,$02,$04,$04,$04
 $8531 DEFB $06,$06,$05,$09,$00,$00,$3F,$D8
 $8539 DEFB $E4,$E0,$C0,$C8,$4C,$00,$00,$FF
 $8541 DEFB $30,$66,$6C,$D8,$D0,$20,$60,$58
 $8549 DEFB $00,$FF,$40,$40,$40,$40,$C0,$40
 $8551 DEFB $40,$40,$00,$FF,$07,$0F,$0F,$1F
 $8559 DEFB $1F,$1F,$3F,$3F,$00,$00,$00,$00
 $8561 DEFB $00,$00,$00,$00,$00,$00,$13,$03
 $8569 DEFB $03,$01,$FF,$F4,$68,$74,$58,$74
 $8571 DEFB $78,$94,$98,$FF,$01,$10,$09,$24
 $8579 DEFB $08,$19,$0C,$04,$FF,$22,$D5,$FA
 $8581 DEFB $17,$1C,$07,$03,$41,$FF,$88,$58
 $8589 DEFB $A8,$58,$A8,$54,$2C,$D4,$00,$FF
 $8591 DEFB $20,$20,$20,$20,$20,$20,$20,$20
 $8599 DEFB $FF,$0A,$15,$0A,$15,$AA,$15,$2A
 $85A1 DEFB $15,$FF,$05,$01,$01,$01,$01,$02
 $85A9 DEFB $02,$02,$11,$1F,$01,$FF,$FC,$83
 $85B1 DEFB $80,$80,$80,$80,$80,$80,$03,$09
 $85B9 DEFB $F9,$FC,$80,$80,$80,$80,$40,$40
 $85C1 DEFB $00,$7F,$10,$05,$40,$01,$0C,$88
 $85C9 DEFB $88,$00,$FF,$02,$06,$0C,$14,$3C
 $85D1 DEFB $38,$78,$F8,$FF,$F8,$F8,$F0,$F0
 $85D9 DEFB $A0,$E0,$C0,$C0,$E0,$07,$3F,$40
 $85E1 DEFB $FF,$40,$40,$40,$60,$78,$FC,$06
 $85E9 DEFB $02,$00,$FF,$3F,$5F,$5F,$4F,$4F
 $85F1 DEFB $0F,$0F,$1F,$00,$00,$00,$00,$00
 $85F9 DEFB $00,$00,$00,$00,$00,$00,$FF,$BC
 $8601 DEFB $D8,$DA,$E7,$E6,$F3,$F1,$F4,$FE
 $8609 DEFB $01,$01,$40,$A0,$50,$A8,$D0,$FF
 $8611 DEFB $23,$3C,$CC,$07,$0C,$18,$03,$02
 $8619 DEFB $FF,$CC,$F6,$EB,$F5,$76,$69,$E6
 $8621 DEFB $C5,$F8,$80,$C0,$E0,$B0,$58,$FF
 $8629 DEFB $20,$20,$20,$20,$20,$40,$40,$40
 $8631 DEFB $FF,$2A,$05,$A2,$55,$22,$11,$0A
 $8639 DEFB $15,$FF,$02,$02,$82,$83,$83,$43
 $8641 DEFB $C3,$42,$00,$FF,$80,$80,$80,$40
 $8649 DEFB $40,$40,$40,$40,$00,$1F,$40,$40
 $8651 DEFB $20,$20,$20,$00,$FE,$04,$08,$18
 $8659 DEFB $10,$30,$6F,$7C,$FF,$10,$19,$19
 $8661 DEFB $16,$16,$14,$F6,$72,$FF,$A9,$29
 $8669 DEFB $4C,$4B,$5F,$4B,$57,$DF,$F7,$7B
 $8671 DEFB $7E,$15,$03,$0B,$0E,$87,$FF,$C0
 $8679 DEFB $40,$40,$61,$60,$60,$72,$74,$0F
 $8681 DEFB $02,$01,$01,$01,$FE,$10,$41,$80
 $8689 DEFB $92,$68,$66,$3D,$FF,$1F,$1F,$5F
 $8691 DEFB $0F,$07,$57,$27,$57,$00,$00,$00
 $8699 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $86A1 DEFB $FF,$EA,$F4,$EA,$F4,$EB,$F7,$D7
 $86A9 DEFB $F0,$FF,$29,$16,$9A,$24,$C4,$D7
 $86B1 DEFB $12,$1E,$FF,$83,$3C,$02,$44,$08
 $86B9 DEFB $58,$68,$80,$FF,$1A,$BD,$3E,$2F
 $86C1 DEFB $1F,$02,$06,$06,$FF,$A8,$58,$A8
 $86C9 DEFB $D8,$E8,$F8,$5C,$3E,$FF,$40,$40
 $86D1 DEFB $40,$40,$40,$40,$40,$40,$FF,$8A
 $86D9 DEFB $15,$0A,$05,$0A,$05,$0A,$05,$FF
 $86E1 DEFB $C2,$62,$A2,$62,$B2,$53,$B3,$51
 $86E9 DEFB $00,$FF,$40,$40,$40,$40,$40,$20
 $86F1 DEFB $20,$20,$00,$00,$00,$FF,$E7,$41
 $86F9 DEFB $C0,$C1,$C1,$87,$9F,$B1,$FF,$BA
 $8701 DEFB $E2,$A5,$B5,$95,$96,$96,$9E,$FF
 $8709 DEFB $DF,$9F,$BE,$3A,$32,$32,$74,$F5
 $8711 DEFB $DF,$15,$1A,$05,$02,$06,$01,$01
 $8719 DEFB $FF,$FA,$75,$BA,$75,$BA,$7D,$BB
 $8721 DEFB $3F,$FD,$80,$80,$50,$A0,$C0,$A8
 $8729 DEFB $74,$07,$0A,$0D,$07,$FF,$B7,$47
 $8731 DEFB $BF,$DF,$E7,$3F,$02,$01,$00,$00
 $8739 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8741 DEFB $00,$FF,$F0,$E0,$E0,$C0,$88,$D4
 $8749 DEFB $A0,$50,$CF,$11,$20,$01,$01,$40
 $8751 DEFB $50,$FE,$10,$10,$13,$8E,$84,$88
 $8759 DEFB $48,$01,$04,$FF,$07,$07,$05,$05
 $8761 DEFB $05,$03,$03,$02,$FF,$40,$40,$C0
 $8769 DEFB $60,$30,$38,$0C,$87,$FF,$02,$05
 $8771 DEFB $02,$05,$02,$05,$22,$05,$FF,$A9
 $8779 DEFB $57,$AD,$55,$A9,$58,$A8,$79,$E0
 $8781 DEFB $80,$80,$80,$FF,$10,$10,$10,$10
 $8789 DEFB $10,$10,$10,$10,$00,$00,$00,$3F
 $8791 DEFB $1E,$0F,$63,$63,$4F,$38,$FF,$8E
 $8799 DEFB $CF,$ED,$67,$EF,$E4,$E3,$F7,$FF
 $87A1 DEFB $E5,$E5,$E7,$C7,$7E,$0A,$07,$85
 $87A9 DEFB $FF,$E6,$C6,$CC,$91,$90,$8C,$9C
 $87B1 DEFB $94,$FF,$7B,$7B,$7B,$73,$7B,$77
 $87B9 DEFB $7C,$7D,$FF,$AA,$5D,$BA,$75,$A6
 $87C1 DEFB $54,$BE,$DD,$F8,$60,$C8,$53,$AD
 $87C9 DEFB $D2,$FE,$20,$60,$60,$60,$60,$E0
 $87D1 DEFB $E0,$FF,$67,$03,$92,$11,$0A,$54
 $87D9 DEFB $EB,$B7,$C0,$C0,$70,$00,$00,$00
 $87E1 DEFB $00,$00,$00,$00,$C0,$01,$0A,$FF
 $87E9 DEFB $FE,$FD,$FA,$F5,$EA,$55,$EA,$75
 $87F1 DEFB $FF,$AA,$55,$AA,$55,$AA,$55,$AA
 $87F9 DEFB $55,$FF,$A0,$40,$80,$04,$88,$55
 $8801 DEFB $A2,$50,$EF,$50,$50,$30,$10,$10
 $8809 DEFB $08,$30,$FF,$A0,$50,$A8,$55,$2A
 $8811 DEFB $15,$2A,$15,$47,$02,$01,$01,$A0
 $8819 DEFB $00,$FF,$C2,$65,$6A,$35,$1A,$45
 $8821 DEFB $0E,$45,$FF,$AD,$55,$AD,$52,$AA
 $8829 DEFB $5A,$AA,$5A,$04,$80,$01,$10,$00
 $8831 DEFB $00,$00,$FF,$F4,$E4,$F6,$F6,$D7
 $8839 DEFB $DF,$CE,$CE,$FF,$33,$31,$31,$33
 $8841 DEFB $33,$9B,$D8,$DC,$FF,$C4,$E6,$F7
 $8849 DEFB $FC,$BD,$1C,$0E,$26,$FF,$D4,$D4
 $8851 DEFB $D6,$F6,$E6,$E6,$67,$67,$FF,$7F
 $8859 DEFB $76,$74,$70,$71,$F3,$F3,$F6,$FF
 $8861 DEFB $9E,$7E,$F6,$F4,$F4,$E5,$E4,$F5
 $8869 DEFB $0F,$50,$B8,$40,$A0,$FF,$C0,$C2
 $8871 DEFB $E2,$E1,$E1,$E2,$EB,$EE,$FC,$10
 $8879 DEFB $20,$60,$80,$0A,$59,$FF,$47,$C1
 $8881 DEFB $60,$D5,$78,$FC,$DA,$7F,$FC,$C0
 $8889 DEFB $E0,$F0,$50,$18,$80,$00,$00,$00
 $8891 DEFB $00,$00,$00,$C7,$55,$AA,$05,$15
 $8899 DEFB $AA,$FF,$FA,$7F,$BF,$57,$AA,$D7
 $88A1 DEFB $AB,$57,$FF,$AA,$55,$AA,$55,$EA
 $88A9 DEFB $D5,$FA,$5D,$FF,$A0,$54,$A0,$54
 $88B1 DEFB $AA,$55,$AA,$55,$FF,$50,$10,$20
 $88B9 DEFB $08,$88,$55,$AA,$55,$60,$40,$80
 $88C1 DEFB $FF,$AA,$59,$A8,$54,$0A,$14,$0A
 $88C9 DEFB $05,$E0,$40,$40,$88,$1F,$06,$07
 $88D1 DEFB $21,$28,$10,$FF,$AA,$DA,$EA,$1E
 $88D9 DEFB $06,$0E,$03,$01,$80,$80,$00,$00
 $88E1 DEFB $00,$00,$D4,$08,$02,$10,$14,$FF
 $88E9 DEFB $7C,$6D,$EF,$FB,$DF,$DF,$DF,$DF
 $88F1 DEFB $BF,$1D,$3D,$7C,$B8,$20,$60,$06
 $88F9 DEFB $FF,$63,$73,$62,$63,$33,$33,$7F
 $8901 DEFB $DF,$8F,$02,$02,$06,$04,$01,$FF
 $8909 DEFB $F5,$D9,$D9,$D1,$89,$93,$92,$D0
 $8911 DEFB $FF,$E5,$CA,$8E,$1E,$18,$18,$30
 $8919 DEFB $30,$FF,$CC,$C1,$C3,$82,$98,$9C
 $8921 DEFB $BE,$BE,$FF,$F9,$F7,$EF,$CE,$93
 $8929 DEFB $21,$8C,$FC,$FF,$20,$21,$38,$72
 $8931 DEFB $F5,$FB,$78,$01,$FF,$24,$08,$90
 $8939 DEFB $D0,$FC,$F0,$F9,$FB,$FF,$FE,$77
 $8941 DEFB $CF,$2C,$8B,$04,$08,$05,$7E,$80
 $8949 DEFB $B8,$9E,$FF,$2D,$2F,$F0,$80,$C3
 $8951 DEFB $E1,$30,$9C,$01,$08,$50,$82,$EF
 $8959 DEFB $50,$20,$01,$AA,$A8,$50,$2A,$FF
 $8961 DEFB $FA,$F5,$FA,$DF,$FA,$D5,$AA,$55
 $8969 DEFB $F3,$55,$A8,$14,$AA,$55,$AA,$EF
 $8971 DEFB $50,$A0,$05,$A7,$AA,$55,$AA,$FF
 $8979 DEFB $EE,$7F,$AF,$FD,$0A,$41,$80,$41
 $8981 DEFB $F5,$55,$01,$55,$AA,$55,$BF,$EF
 $8989 DEFB $55,$20,$45,$AA,$88,$71,$EA,$ED
 $8991 DEFB $55,$55,$AA,$2A,$55,$AA,$FD,$55
 $8999 DEFB $55,$A2,$10,$A8,$54,$AA,$EB,$55
 $89A1 DEFB $FF,$A8,$2A,$15,$0A,$FE,$80,$C0
 $89A9 DEFB $61,$AA,$55,$AA,$55,$F0,$A0,$40
 $89B1 DEFB $E2,$98,$03,$7E,$01,$0E,$F0,$0C
 $89B9 DEFB $03,$70,$FC,$06,$03,$40,$FF,$60
 $89C1 DEFB $70,$DE,$57,$57,$57,$57,$50,$57
 $89C9 DEFB $50,$50,$57,$57,$57,$57,$57,$57
 $89D1 DEFB $57,$50,$50,$57,$57,$57,$57,$50
 $89D9 DEFB $57,$57,$50,$50,$57,$57,$57,$57
 $89E1 DEFB $50,$50,$57,$57,$57,$57,$50,$50
 $89E9 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $89F1 DEFB $50,$50,$50,$57,$57,$57,$57,$50
 $89F9 DEFB $57,$57,$50,$50,$57,$57,$57,$57
 $8A01 DEFB $50,$50,$57,$57,$57,$50,$50,$57
 $8A09 DEFB $57,$50,$57,$57,$57,$57,$50,$42
 $8A11 DEFB $50,$57,$50,$50,$57,$57,$57,$50
 $8A19 DEFB $50,$57,$50,$50,$57,$57,$57,$57
 $8A21 DEFB $50,$57,$57,$57,$57,$57,$50,$57
 $8A29 DEFB $57,$50,$57,$57,$50,$50,$47,$47
 $8A31 DEFB $42,$50,$50,$50,$57,$57,$57,$50
 $8A39 DEFB $50,$57,$50,$50,$57,$57,$57,$57
 $8A41 DEFB $50,$57,$57,$57,$57,$57,$50,$57
 $8A49 DEFB $57,$50,$57,$50,$42,$47,$47,$47
 $8A51 DEFB $47,$42,$42,$50,$50,$57,$57,$57
 $8A59 DEFB $50,$50,$50,$50,$50,$57,$57,$50
 $8A61 DEFB $50,$57,$57,$57,$57,$57,$50,$57
 $8A69 DEFB $57,$50,$50,$50,$47,$41,$41,$41
 $8A71 DEFB $41,$47,$47,$42,$50,$57,$57,$57
 $8A79 DEFB $50,$50,$50,$50,$50,$57,$57,$50
 $8A81 DEFB $50,$50,$50,$50,$54,$57,$50,$57
 $8A89 DEFB $57,$50,$50,$42,$47,$41,$41,$47
 $8A91 DEFB $47,$47,$47,$42,$50,$50,$57,$57
 $8A99 DEFB $50,$50,$50,$50,$50,$57,$57,$50
 $8AA1 DEFB $50,$57,$54,$54,$54,$54,$50,$50
 $8AA9 DEFB $57,$50,$50,$47,$47,$47,$47,$47
 $8AB1 DEFB $47,$41,$47,$47,$50,$50,$50,$57
 $8AB9 DEFB $50,$50,$50,$50,$50,$57,$50,$50
 $8AC1 DEFB $50,$57,$54,$62,$62,$54,$50,$50
 $8AC9 DEFB $57,$50,$42,$47,$47,$47,$47,$47
 $8AD1 DEFB $47,$41,$47,$47,$50,$50,$50,$50
 $8AD9 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $8AE1 DEFB $50,$57,$62,$60,$60,$54,$57,$50
 $8AE9 DEFB $57,$50,$47,$47,$47,$47,$47,$41
 $8AF1 DEFB $41,$41,$47,$47,$42,$50,$50,$50
 $8AF9 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $8B01 DEFB $50,$57,$62,$60,$60,$54,$50,$50
 $8B09 DEFB $50,$50,$42,$42,$42,$47,$47,$41
 $8B11 DEFB $41,$47,$47,$47,$47,$50,$50,$50
 $8B19 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $8B21 DEFB $50,$57,$60,$60,$60,$42,$50,$50
 $8B29 DEFB $50,$50,$42,$47,$42,$42,$41,$41
 $8B31 DEFB $41,$47,$47,$47,$47,$50,$50,$50
 $8B39 DEFB $50,$50,$50,$50,$50,$57,$50,$50
 $8B41 DEFB $50,$50,$60,$60,$60,$42,$50,$50
 $8B49 DEFB $50,$50,$47,$41,$41,$41,$41,$41
 $8B51 DEFB $47,$47,$47,$47,$47,$50,$50,$50
 $8B59 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $8B61 DEFB $50,$50,$44,$60,$60,$60,$50,$50
 $8B69 DEFB $50,$54,$50,$42,$41,$41,$41,$42
 $8B71 DEFB $47,$47,$47,$42,$50,$50,$50,$50
 $8B79 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $8B81 DEFB $50,$50,$60,$60,$60,$60,$60,$60
 $8B89 DEFB $42,$44,$44,$50,$42,$42,$42,$42
 $8B91 DEFB $42,$42,$47,$42,$50,$50,$50,$50
 $8B99 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $8BA1 DEFB $50,$50,$42,$60,$44,$60,$44,$60
 $8BA9 DEFB $60,$44,$44,$44,$44,$42,$42,$42
 $8BB1 DEFB $42,$42,$50,$42,$42,$50,$42,$42
 $8BB9 DEFB $42,$42,$42,$50,$50,$50,$50,$50
 $8BC1 DEFB $50,$50

; Graphics: Door
;
; #PUSHS #UDGTABLE
; { =h Door }
; { #SIM(start=$BB3B,stop=$BB41,ix=#PC)#SCR$02{$00,$00,$200,$100}(door) }
; UDGTABLE# #POPS
@label=Image_Door
b$8BC3 DEFB $F0,$03,$03,$03,$7F,$F8,$18,$3C
 $8BCB DEFB $9E,$83,$81,$E0,$08,$CE,$AE,$7F
 $8BD3 DEFB $F8,$F8,$FC,$F0,$FC,$1C,$10,$00
 $8BDB DEFB $00,$00,$00,$00,$00,$FF,$FC,$FE
 $8BE3 DEFB $EE,$E7,$F7,$FB,$FE,$FC,$78,$60
 $8BEB DEFB $C0,$80,$80,$00,$00,$FC,$01,$03
 $8BF3 DEFB $02,$02,$02,$02,$06,$80,$80,$FF
 $8BFB DEFB $10,$30,$20,$20,$20,$20,$20,$10
 $8C03 DEFB $FF,$03,$07,$07,$0A,$0A,$12,$12
 $8C0B DEFB $12,$03,$80,$80,$00,$00,$FC,$0C
 $8C13 DEFB $38,$60,$40,$40,$80,$C0,$03,$7F
 $8C1B DEFB $F1,$03,$0F,$3F,$FF,$FF,$0E,$80
 $8C23 DEFB $F8,$FF,$08,$F0,$00,$00,$00,$00
 $8C2B DEFB $00,$00,$33,$80,$99,$81,$C0,$FF
 $8C33 DEFB $03,$03,$9F,$9F,$0F,$07,$1F,$9F
 $8C3B DEFB $00,$00,$00,$00,$00,$00,$00,$80
 $8C43 DEFB $01,$E7,$07,$13,$03,$0F,$0F,$07
 $8C4B DEFB $38,$E0,$60,$80,$00,$00,$FF,$02
 $8C53 DEFB $02,$02,$02,$02,$01,$01,$01,$80
 $8C5B DEFB $E0,$FF,$10,$10,$10,$08,$04,$04
 $8C63 DEFB $02,$02,$FF,$12,$0A,$0A,$0D,$03
 $8C6B DEFB $03,$03,$02,$80,$80,$00,$FE,$01
 $8C73 DEFB $01,$01,$03,$0F,$1F,$7F,$07,$7E
 $8C7B DEFB $78,$E0,$00,$00,$00,$00,$00,$00
 $8C83 DEFB $00,$00,$00,$00,$00,$0F,$30,$78
 $8C8B DEFB $3C,$0C,$00,$00,$00,$00,$00,$00
 $8C93 DEFB $00,$FE,$21,$31,$3F,$3F,$3F,$0F
 $8C9B DEFB $03,$FF,$78,$7C,$7C,$20,$20,$20
 $8CA3 DEFB $10,$10,$00,$00,$00,$FF,$01,$03
 $8CAB DEFB $02,$06,$0E,$0C,$04,$08,$01,$80
 $8CB3 DEFB $01,$01,$FF,$02,$82,$82,$41,$21
 $8CBB DEFB $19,$08,$06,$FF,$80,$80,$80,$80
 $8CC3 DEFB $40,$40,$A0,$90,$1F,$01,$07,$1F
 $8CCB DEFB $3E,$30,$FC,$0B,$FB,$FB,$FB,$FB
 $8CD3 DEFB $F9,$07,$FF,$FF,$7F,$F8,$C0,$E0
 $8CDB DEFB $F8,$FF,$FC,$00,$00,$00,$00,$00
 $8CE3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8CEB DEFB $00,$00,$00,$00,$FF,$E7,$C1,$C0
 $8CF3 DEFB $C0,$64,$E6,$FE,$E6,$B7,$FE,$F8
 $8CFB DEFB $F8,$04,$08,$81,$FF,$38,$30,$30
 $8D03 DEFB $30,$20,$A0,$E0,$30,$C0,$01,$06
 $8D0B DEFB $B8,$07,$38,$C0,$01,$FE,$0F,$F0
 $8D13 DEFB $03,$04,$03,$0F,$F1,$FB,$18,$FF
 $8D1B DEFB $F0,$C8,$F0,$FC,$03,$8E,$80,$78
 $8D23 DEFB $07,$E0,$F0,$E0,$18,$04,$03,$07
 $8D2B DEFB $02,$01,$01,$FF,$88,$64,$1A,$87
 $8D33 DEFB $81,$40,$20,$18,$F0,$80,$C0,$C0
 $8D3B DEFB $60,$FF,$05,$0C,$08,$08,$10,$10
 $8D43 DEFB $10,$10,$F3,$80,$7E,$01,$03,$07
 $8D4B DEFB $0F,$07,$FC,$F0,$C0,$00,$00,$00
 $8D53 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8D5B DEFB $00,$00,$00,$00,$00,$00,$00,$FF
 $8D63 DEFB $CC,$E0,$F8,$7E,$F7,$F1,$F0,$F0
 $8D6B DEFB $27,$8C,$82,$03,$80,$FF,$08,$30
 $8D73 DEFB $40,$81,$83,$80,$80,$80,$1F,$0E
 $8D7B DEFB $39,$DA,$D0,$FF,$1F,$01,$75,$97
 $8D83 DEFB $10,$FF,$9F,$21,$F8,$46,$7F,$80
 $8D8B DEFB $3F,$8F,$1C,$A2,$21,$FF,$FF,$8C
 $8D93 DEFB $80,$E0,$FF,$FF,$80,$60,$70,$70
 $8D9B DEFB $78,$78,$78,$F8,$03,$06,$01,$1F
 $8DA3 DEFB $30,$E8,$36,$19,$07,$FF,$20,$20
 $8DAB DEFB $20,$FD,$E3,$DF,$7F,$DF,$07,$E0
 $8DB3 DEFB $C0,$80,$00,$00,$00,$00,$00,$00
 $8DBB DEFB $00,$00,$00,$C0,$07,$07,$00,$00
 $8DC3 DEFB $00,$00,$00,$00,$00,$00,$80,$01
 $8DCB DEFB $FF,$E0,$F0,$F0,$50,$F0,$D0,$60
 $8DD3 DEFB $E0,$FF,$01,$01,$01,$01,$01,$01
 $8DDB DEFB $01,$01,$FE,$FE,$FE,$FE,$FE,$FE
 $8DE3 DEFB $FE,$FE,$FE,$07,$3F,$5F,$3F,$7F
 $8DEB DEFB $7B,$6F,$09,$FF,$40,$FF,$F0,$70
 $8DF3 DEFB $70,$70,$70,$70,$70,$70,$00,$FF
 $8DFB DEFB $20,$20,$20,$20,$30,$10,$10,$10
 $8E03 DEFB $FF,$38,$38,$38,$38,$3C,$1C,$1E
 $8E0B DEFB $1E,$00,$FE,$01,$01,$01,$01,$01
 $8E13 DEFB $01,$01,$07,$9F,$9C,$30,$01,$FE
 $8E1B DEFB $E3,$0F,$01,$07,$1F,$7F,$1E,$80
 $8E23 DEFB $F0,$E0,$80,$00,$00,$00,$00,$00
 $8E2B DEFB $00,$3F,$7F,$07,$07,$03,$03,$01
 $8E33 DEFB $8F,$FE,$0F,$07,$01,$E0,$00,$00
 $8E3B DEFB $00,$00,$00,$00,$00,$FF,$FC,$F9
 $8E43 DEFB $F9,$71,$F0,$E4,$FE,$FE,$FE,$24
 $8E4B DEFB $04,$17,$1F,$3F,$3F,$3F,$03,$B0
 $8E53 DEFB $80,$FF,$01,$03,$02,$02,$02,$02
 $8E5B DEFB $02,$02,$FD,$FE,$FC,$FC,$FC,$FC
 $8E63 DEFB $FC,$FC,$FF,$C0,$80,$80,$C0,$80
 $8E6B DEFB $80,$80,$80,$00,$FF,$70,$70,$70
 $8E73 DEFB $70,$70,$70,$70,$70,$00,$FF,$10
 $8E7B DEFB $1F,$10,$10,$10,$10,$10,$10,$FF
 $8E83 DEFB $1E,$FE,$1E,$1F,$0F,$0F,$0F,$0F
 $8E8B DEFB $FE,$18,$10,$10,$10,$10,$10,$08
 $8E93 DEFB $FF,$01,$03,$02,$02,$02,$04,$04
 $8E9B DEFB $08,$00,$3F,$FE,$F8,$F0,$E0,$C0
 $8EA3 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $8EAB DEFB $FF,$E3,$C0,$80,$80,$C0,$C0,$E0
 $8EB3 DEFB $F0,$FC,$E0,$F8,$FC,$FC,$FC,$FE
 $8EBB DEFB $FF,$C0,$80,$80,$80,$C0,$C0,$C0
 $8EC3 DEFB $C0,$FF,$0C,$18,$18,$38,$78,$78
 $8ECB DEFB $78,$30,$00,$00,$00,$00,$00,$00
 $8ED3 DEFB $7F,$07,$03,$43,$8F,$83,$01,$04
 $8EDB DEFB $C0,$70,$F0,$00,$FF,$02,$02,$02
 $8EE3 DEFB $07,$04,$04,$04,$04,$F7,$FC,$FC
 $8EEB DEFB $FC,$FC,$FC,$FC,$FC,$FF,$C0,$80
 $8EF3 DEFB $80,$80,$80,$80,$80,$80,$00,$FF
 $8EFB DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $8F03 DEFB $00,$FF,$10,$08,$08,$0F,$08,$08
 $8F0B DEFB $08,$08,$F7,$F0,$F0,$F8,$F8,$F8
 $8F13 DEFB $F8,$F8,$FF,$08,$08,$08,$08,$08
 $8F1B DEFB $C8,$C8,$C8,$FF,$08,$08,$10,$10
 $8F23 DEFB $10,$10,$10,$10,$FF,$01,$01,$01
 $8F2B DEFB $03,$03,$07,$07,$08,$F0,$01,$03
 $8F33 DEFB $FF,$FF,$0F,$FF,$FF,$FF,$80,$E3
 $8F3B DEFB $FF,$F0,$01,$01,$01,$0E,$E0,$C0
 $8F43 DEFB $80,$F0,$01,$0F,$3F,$7F,$1F,$FF
 $8F4B DEFB $FB,$F1,$C1,$01,$0E,$01,$01,$01
 $8F53 DEFB $FF,$BF,$3F,$1F,$0F,$8F,$8F,$87
 $8F5B DEFB $07,$1F,$0F,$07,$07,$03,$01,$01
 $8F63 DEFB $01,$03,$80,$80,$FF,$70,$70,$70
 $8F6B DEFB $E0,$E0,$E0,$E0,$E0,$C0,$10,$30
 $8F73 DEFB $F8,$60,$30,$3E,$17,$0B,$C0,$80
 $8F7B DEFB $F0,$00,$00,$00,$C0,$01,$01,$DF
 $8F83 DEFB $7E,$7F,$0F,$0F,$1C,$80,$48,$E7
 $8F8B DEFB $80,$FF,$70,$E0,$F0,$C0,$FF,$E4
 $8F93 DEFB $24,$14,$17,$18,$08,$08,$08,$F7
 $8F9B DEFB $FC,$FC,$FC,$FC,$FC,$F8,$F8,$FF
 $8FA3 DEFB $80,$80,$80,$80,$80,$80,$80,$80
 $8FAB DEFB $00,$FF,$70,$70,$70,$70,$70,$70
 $8FB3 DEFB $70,$70,$00,$FF,$08,$08,$08,$0F
 $8FBB DEFB $04,$04,$04,$04,$F7,$F8,$FC,$FC
 $8FC3 DEFB $FC,$FC,$FC,$FC,$FF,$88,$88,$84
 $8FCB DEFB $84,$84,$85,$C9,$F9,$FF,$10,$20
 $8FD3 DEFB $E0,$B0,$9C,$02,$03,$06,$01,$08
 $8FDB DEFB $E0,$01,$01,$01,$20,$80,$FF,$03
 $8FE3 DEFB $03,$07,$07,$0F,$0F,$0F,$0F,$FC
 $8FEB DEFB $01,$03,$07,$0F,$1F,$1F,$00,$00
 $8FF3 DEFB $C0,$80,$80,$FF,$07,$07,$87,$87
 $8FFB DEFB $87,$87,$83,$83,$00,$F0,$80,$80
 $9003 DEFB $80,$C0,$00,$FF,$E0,$E0,$F0,$F0
 $900B DEFB $F0,$F1,$F1,$F1,$FF,$70,$70,$E0
 $9013 DEFB $E0,$E0,$E0,$E0,$E0,$FB,$05,$06
 $901B DEFB $03,$03,$03,$03,$03,$FF,$08,$08
 $9023 DEFB $10,$30,$10,$0C,$02,$01,$FE,$C0
 $902B DEFB $D0,$B0,$B8,$BE,$BF,$FE,$C0,$81
 $9033 DEFB $81,$FC,$02,$1E,$6E,$EF,$F6,$F7
 $903B DEFB $FF,$0D,$3B,$FB,$F7,$F6,$71,$67
 $9043 DEFB $4F,$10,$80,$3F,$3D,$01,$16,$0C
 $904B DEFB $01,$01,$FF,$08,$08,$08,$08,$08
 $9053 DEFB $9F,$D0,$90,$DF,$F8,$F8,$F8,$F8
 $905B DEFB $F8,$F8,$F8,$00,$00,$FF,$70,$70
 $9063 DEFB $70,$70,$70,$70,$70,$70,$20,$40
 $906B DEFB $FF,$04,$04,$04,$04,$04,$07,$04
 $9073 DEFB $02,$3F,$01,$01,$01,$01,$01,$FF
 $907B DEFB $FF,$E9,$E9,$E9,$EA,$F2,$F4,$F4
 $9083 DEFB $FC,$FF,$07,$0F,$0E,$1B,$20,$20
 $908B DEFB $20,$20,$08,$FF,$0F,$01,$02,$1C
 $9093 DEFB $E0,$00,$FF,$0F,$0F,$0F,$1F,$1E
 $909B DEFB $1E,$1C,$1C,$07,$C0,$C0,$80,$00
 $90A3 DEFB $00,$FF,$3F,$1F,$1F,$0F,$0F,$0E
 $90AB DEFB $18,$18,$07,$81,$80,$80,$F0,$80
 $90B3 DEFB $80,$80,$80,$FF,$C0,$F0,$F1,$E0
 $90BB DEFB $E0,$E2,$F1,$F1,$73,$CF,$C7,$C0
 $90C3 DEFB $E0,$41,$FF,$0F,$0F,$0F,$0F,$07
 $90CB DEFB $07,$07,$07,$FF,$E0,$E0,$E0,$E0
 $90D3 DEFB $E0,$E0,$E0,$E0,$3D,$03,$01,$01
 $90DB DEFB $01,$01,$C2,$FF,$03,$FC,$EF,$02
 $90E3 DEFB $84,$48,$50,$20,$C3,$1C,$FF,$C2
 $90EB DEFB $C6,$EF,$9F,$DF,$5B,$DB,$BD,$FF
 $90F3 DEFB $16,$04,$84,$82,$82,$41,$42,$27
 $90FB DEFB $3B,$86,$40,$27,$F8,$80,$FF,$80
 $9103 DEFB $80,$40,$20,$E0,$D0,$E0,$E0,$00
 $910B DEFB $FF,$50,$D0,$D0,$F0,$F0,$F0,$BF
 $9113 DEFB $A0,$BF,$F8,$F8,$F8,$F8,$F8,$F8
 $911B DEFB $F8,$00,$FE,$1C,$63,$5D,$BA,$B2
 $9123 DEFB $A2,$5D,$FF,$70,$71,$76,$75,$FB
 $912B DEFB $FB,$FA,$F5,$FE,$C0,$30,$D0,$A8
 $9133 DEFB $28,$28,$D8,$FF,$02,$02,$02,$02
 $913B DEFB $02,$02,$03,$02,$40,$FF,$FF,$F8
 $9143 DEFB $F8,$F8,$F0,$F0,$70,$F8,$78,$FF
 $914B DEFB $20,$20,$30,$10,$10,$10,$10,$10
 $9153 DEFB $00,$00,$00,$03,$0C,$0C,$00,$00
 $915B DEFB $C6,$02,$01,$01,$01,$7D,$10,$80
 $9163 DEFB $F3,$3F,$8F,$81,$F8,$80,$E0,$F0
 $916B DEFB $F8,$3C,$FF,$7F,$3F,$3F,$3F,$3F
 $9173 DEFB $1F,$1F,$1F,$03,$0E,$04,$00,$FF
 $917B DEFB $07,$03,$03,$03,$03,$03,$03,$01
 $9183 DEFB $FF,$E0,$E0,$E0,$F0,$F1,$F3,$F3
 $918B DEFB $F3,$FE,$40,$C0,$C0,$C0,$82,$86
 $9193 DEFB $9E,$F8,$81,$06,$99,$1B,$3F,$7F
 $919B DEFB $E6,$D0,$24,$84,$02,$80,$80,$FF
 $91A3 DEFB $C2,$C2,$C1,$C1,$C0,$C0,$82,$44
 $91AB DEFB $7F,$28,$10,$20,$40,$80,$F8,$07
 $91B3 DEFB $EF,$E0,$1F,$10,$01,$01,$E3,$04
 $91BB DEFB $DF,$E0,$A0,$40,$80,$80,$FC,$FB
 $91C3 DEFB $00,$7F,$1F,$1F,$1F,$7F,$1F,$1F
 $91CB DEFB $1F,$FF,$07,$06,$0E,$0E,$0E,$0E
 $91D3 DEFB $0E,$FE,$00,$07,$63,$1F,$0E,$FF
 $91DB DEFB $F6,$71,$70,$70,$70,$70,$70,$70
 $91E3 DEFB $07,$38,$F8,$E0,$FF,$02,$02,$02
 $91EB DEFB $01,$01,$01,$01,$01,$80,$FF,$FF
 $91F3 DEFB $78,$78,$78,$78,$38,$38,$38,$FD
 $91FB DEFB $FF,$10,$10,$10,$10,$10,$10,$10
 $9203 DEFB $20,$00,$00,$00,$00,$00,$FF,$80
 $920B DEFB $C0,$70,$18,$0E,$0F,$07,$F3,$3F
 $9213 DEFB $FE,$FC,$FD,$FD,$FD,$1C,$F8,$10
 $921B DEFB $08,$08,$0C,$7E,$FF,$1E,$1F,$0F
 $9223 DEFB $07,$67,$73,$3B,$3F,$03,$E0,$60
 $922B DEFB $00,$00,$07,$01,$01,$01,$E1,$04
 $9233 DEFB $01,$01,$02,$FF,$27,$2E,$1C,$F2
 $923B DEFB $E2,$40,$06,$8A,$FF,$EA,$78,$03
 $9243 DEFB $64,$10,$10,$2F,$61,$FF,$BE,$EB
 $924B DEFB $06,$60,$63,$A6,$9A,$1C,$FF,$8E
 $9253 DEFB $B7,$8E,$06,$EE,$17,$0F,$0F,$FE
 $925B DEFB $C0,$BF,$EE,$EF,$EF,$F7,$F3,$1F
 $9263 DEFB $E7,$1E,$F0,$C0,$C0,$7F,$CC,$01
 $926B DEFB $03,$07,$07,$0F,$0F,$FC,$80,$80
 $9273 DEFB $80,$B0,$7C,$FF,$BF,$3F,$01,$01
 $927B DEFB $01,$07,$05,$80,$FF,$0E,$0E,$0E
 $9283 DEFB $0E,$0E,$CE,$8E,$8E,$00,$00,$FF
 $928B DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $9293 DEFB $00,$3F,$01,$01,$01,$01,$01,$01
 $929B DEFB $C0,$80,$80,$FF,$3E,$3E,$3E,$1E
 $92A3 DEFB $1E,$1E,$1E,$1E,$FF,$60,$38,$18
 $92AB DEFB $60,$42,$40,$40,$C2,$00,$84,$03
 $92B3 DEFB $02,$1E,$FF,$FF,$1F,$03,$E1,$FF
 $92BB DEFB $C0,$F8,$9E,$1F,$FF,$FF,$1F,$07
 $92C3 DEFB $01,$FF,$7C,$1F,$0F,$03,$01,$C0
 $92CB DEFB $E0,$F0,$40,$C0,$00,$01,$C0,$00
 $92D3 DEFB $00,$00,$00,$FF,$03,$07,$07,$07
 $92DB DEFB $07,$0F,$0F,$0E,$FF,$89,$90,$80
 $92E3 DEFB $80,$80,$73,$77,$FB,$FF,$41,$C1
 $92EB DEFB $3C,$02,$83,$82,$80,$87,$FF,$0C
 $92F3 DEFB $1F,$10,$10,$F1,$3E,$30,$30,$FF
 $92FB DEFB $17,$F3,$22,$27,$C5,$71,$4F,$21
 $9303 DEFB $EF,$1C,$0F,$C6,$E2,$F0,$E0,$40
 $930B DEFB $1C,$80,$80,$40,$FF,$0E,$0E,$1F
 $9313 DEFB $3F,$3F,$08,$01,$20,$5F,$07,$68
 $931B DEFB $DD,$DF,$BC,$0C,$EF,$7E,$1C,$E0
 $9323 DEFB $E0,$40,$02,$34,$FF,$8E,$8E,$1F
 $932B DEFB $FE,$FE,$EE,$9E,$9E,$80,$E0,$08
 $9333 DEFB $02,$FF,$70,$70,$70,$70,$70,$70
 $933B DEFB $70,$70,$80,$80,$08,$40,$F7,$7F
 $9343 DEFB $7F,$7F,$7F,$7F,$7F,$7F,$F7,$E1
 $934B DEFB $F0,$F0,$F0,$F0,$F0,$F0,$FF,$E0
 $9353 DEFB $EA,$FD,$D6,$FD,$FA,$FD,$FA,$7F
 $935B DEFB $83,$C0,$F8,$53,$A9,$50,$A8,$DF
 $9363 DEFB $FB,$F3,$71,$31,$80,$50,$20,$FF
 $936B DEFB $61,$23,$26,$3E,$DE,$1E,$9F,$DF
 $9373 DEFB $F9,$C0,$07,$0C,$30,$FE,$F1,$FF
 $937B DEFB $7F,$3F,$1F,$07,$01,$3F,$1F,$83
 $9383 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $938B DEFB $3F,$1D,$1F,$1F,$1E,$0C,$08,$F9
 $9393 DEFB $04,$F8,$F8,$F8,$F8,$FC,$FF,$99
 $939B DEFB $A1,$C1,$E1,$F1,$FC,$FE,$F9,$FF
 $93A3 DEFB $30,$30,$10,$18,$0D,$BE,$BF,$CF
 $93AB DEFB $7F,$CE,$CF,$B7,$77,$FB,$FB,$7C
 $93B3 DEFB $7F,$3F,$DF,$9F,$DF,$7F,$3F,$F0
 $93BB DEFB $F0,$18,$EE,$F5,$F9,$F8,$03,$1E
 $93C3 DEFB $3C,$7C,$71,$F8,$04,$18,$02,$06
 $93CB DEFB $84,$00,$6F,$40,$40,$81,$22,$01
 $93D3 DEFB $03,$99,$80,$FC,$E0,$80,$C2,$04
 $93DB DEFB $20,$78,$FF,$70,$70,$70,$70,$70
 $93E3 DEFB $70,$70,$73,$81,$01,$FC,$80,$0F
 $93EB DEFB $FF,$80,$84,$42,$7F,$61,$40,$40
 $93F3 DEFB $CF,$F7,$F8,$F8,$F8,$F0,$70,$29
 $93FB DEFB $42,$FD,$10,$15,$20,$55,$AA,$14
 $9403 DEFB $A0,$3E,$20,$14,$AA,$55,$AA,$00
 $940B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9413 DEFB $00,$00,$00,$00,$01,$01,$0F,$F8
 $941B DEFB $F0,$60,$60,$03,$87,$83,$07,$FF
 $9423 DEFB $FF,$07,$06,$C0,$E0,$03,$03,$01
 $942B DEFB $03,$94,$98,$03,$2D,$1E,$0F,$FC
 $9433 DEFB $79,$F0,$C0,$F8,$03,$13,$63,$1F
 $943B DEFB $FF,$23,$7F,$C0,$01,$41,$87,$17
 $9443 DEFB $43,$FC,$01,$20,$03,$01,$82,$07
 $944B DEFB $F0,$0F,$38,$03,$7F,$C0,$FF,$EF
 $9453 DEFB $8F,$1F,$3F,$7F,$47,$03,$03,$01
 $945B DEFB $45,$06,$68,$18,$00,$00,$00,$00
 $9463 DEFB $00,$00,$00,$00,$00,$00,$00,$58
 $946B DEFB $58,$58,$43,$44,$44,$44,$44,$44
 $9473 DEFB $44,$58,$58,$58,$58,$58,$58,$58
 $947B DEFB $58,$58,$58,$58,$58,$58,$58,$43
 $9483 DEFB $43,$44,$44,$44,$44,$44,$44,$43
 $948B DEFB $58,$44,$44,$44,$44,$44,$44,$44
 $9493 DEFB $44,$43,$58,$58,$58,$58,$58,$58
 $949B DEFB $58,$58,$58,$58,$43,$44,$44,$44
 $94A3 DEFB $44,$44,$44,$44,$44,$44,$44,$44
 $94AB DEFB $43,$44,$44,$44,$44,$44,$44,$44
 $94B3 DEFB $43,$58,$58,$58,$58,$58,$58,$58
 $94BB DEFB $58,$58,$58,$43,$58,$43,$44,$44
 $94C3 DEFB $44,$44,$44,$44,$44,$44,$44,$44
 $94CB DEFB $44,$44,$44,$44,$44,$44,$44,$58
 $94D3 DEFB $58,$58,$58,$58,$58,$58,$58,$58
 $94DB DEFB $58,$58,$58,$58,$58,$43,$44,$44
 $94E3 DEFB $44,$44,$44,$44,$44,$44,$44,$44
 $94EB DEFB $44,$44,$44,$44,$44,$44,$44,$44
 $94F3 DEFB $58,$58,$58,$58,$58,$58,$58,$58
 $94FB DEFB $58,$58,$58,$58,$43,$44,$44,$44
 $9503 DEFB $44,$44,$44,$44,$44,$44,$43,$44
 $950B DEFB $44,$44,$44,$44,$44,$44,$44,$44
 $9513 DEFB $58,$58,$43,$43,$58,$58,$58,$58
 $951B DEFB $58,$58,$58,$58,$58,$58,$43,$44
 $9523 DEFB $44,$44,$44,$44,$44,$43,$58,$44
 $952B DEFB $44,$44,$44,$44,$44,$44,$58,$43
 $9533 DEFB $58,$58,$43,$58,$58,$58,$58,$58
 $953B DEFB $58,$58,$58,$58,$43,$44,$44,$44
 $9543 DEFB $44,$44,$44,$44,$58,$43,$58,$44
 $954B DEFB $44,$44,$44,$44,$44,$44,$43,$58
 $9553 DEFB $58,$58,$43,$58,$58,$58,$58,$58
 $955B DEFB $43,$58,$58,$58,$43,$58,$58,$43
 $9563 DEFB $43,$58,$43,$58,$43,$58,$58,$44
 $956B DEFB $44,$44,$44,$44,$44,$44,$44,$43
 $9573 DEFB $58,$58,$43,$58,$58,$58,$58,$58
 $957B DEFB $43,$58,$58,$58,$58,$58,$58,$43
 $9583 DEFB $58,$58,$43,$58,$44,$58,$58,$44
 $958B DEFB $44,$44,$60,$44,$44,$44,$44,$44
 $9593 DEFB $43,$58,$43,$58,$58,$58,$58,$58
 $959B DEFB $58,$58,$58,$58,$58,$58,$58,$58
 $95A3 DEFB $58,$58,$58,$58,$43,$58,$43,$60
 $95AB DEFB $44,$44,$60,$60,$44,$60,$60,$44
 $95B3 DEFB $44,$58,$43,$58,$58,$58,$58,$58
 $95BB DEFB $58,$58,$58,$58,$58,$58,$58,$58
 $95C3 DEFB $58,$58,$58,$58,$58,$43,$44,$60
 $95CB DEFB $44,$44,$60,$44,$60,$60,$60,$44
 $95D3 DEFB $44,$43,$58,$58,$58,$58,$58,$58
 $95DB DEFB $58,$58,$58,$58,$58,$58,$58,$58
 $95E3 DEFB $58,$43,$58,$58,$43,$44,$44,$60
 $95EB DEFB $60,$60,$60,$60,$60,$44,$44,$44
 $95F3 DEFB $44,$43,$58,$58,$58,$58,$58,$58
 $95FB DEFB $58,$58,$58,$58,$58,$58,$43,$43
 $9603 DEFB $58,$43,$44,$44,$44,$44,$44,$60
 $960B DEFB $60,$60,$60,$60,$60,$44,$44,$44
 $9613 DEFB $44,$44,$58,$58,$58,$58,$58,$58
 $961B DEFB $43,$43,$58,$43,$43,$58,$58,$58
 $9623 DEFB $44,$44,$44,$44,$44,$44,$44,$60
 $962B DEFB $60,$44,$60,$60,$44,$60,$44,$44
 $9633 DEFB $44,$44,$43,$58,$58,$58,$58,$58
 $963B DEFB $58,$43,$43,$43,$44,$44,$44,$44
 $9643 DEFB $44,$44,$44,$44,$44,$44,$44,$60
 $964B DEFB $60,$60,$60,$60,$60,$60,$60,$60
 $9653 DEFB $60,$60,$66,$70,$70,$70,$70,$70
 $965B DEFB $70,$70,$43,$43,$44,$44,$44,$44
 $9663 DEFB $44,$44,$44,$44,$44,$44,$44

; Graphics: Huts
;
; #PUSHS #UDGTABLE
; { =h Huts }
; { #SIM(start=$BB3B,stop=$BB41,ix=#PC)#SCR$02{$00,$00,$200,$100}(huts) }
; UDGTABLE# #POPS
@label=Image_Huts
b$966A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9672 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $967A DEFB $00,$00,$00,$00,$E0,$03,$01,$01
 $9682 DEFB $F8,$1E,$3F,$FF,$9F,$FE,$F8,$40
 $968A DEFB $C0,$80,$C0,$C0,$FE,$1E,$07,$17
 $9692 DEFB $3F,$1F,$3F,$FF,$FC,$40,$61,$F3
 $969A DEFB $F7,$FF,$FF,$FE,$20,$60,$E0,$D8
 $96A2 DEFB $98,$E0,$C0,$F0,$03,$07,$0F,$0F
 $96AA DEFB $FF,$1B,$7F,$3F,$17,$8F,$81,$81
 $96B2 DEFB $C1,$F8,$01,$01,$C9,$17,$C0,$FC
 $96BA DEFB $01,$01,$03,$43,$43,$23,$00,$00
 $96C2 DEFB $00,$80,$03,$80,$08,$C0,$30,$50
 $96CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96DA DEFB $FF,$05,$0D,$14,$1F,$3F,$53,$27
 $96E2 DEFB $1F,$D7,$10,$04,$21,$80,$20,$76
 $96EA DEFB $FF,$80,$81,$61,$20,$F3,$F3,$F1
 $96F2 DEFB $C1,$08,$E0,$00,$1F,$3F,$2F,$0F
 $96FA DEFB $0C,$08,$07,$C0,$C0,$C0,$FF,$E1
 $9702 DEFB $E0,$E0,$E0,$F0,$F0,$F0,$FC,$FF
 $970A DEFB $68,$F8,$30,$20,$40,$40,$40,$40
 $9712 DEFB $FF,$DC,$7C,$74,$14,$14,$14,$14
 $971A DEFB $16,$F0,$0F,$07,$01,$01,$E0,$F0
 $9722 DEFB $F8,$FC,$00,$FF,$03,$04,$04,$02
 $972A DEFB $03,$03,$03,$39,$6F,$6A,$AC,$80
 $9732 DEFB $40,$06,$40,$FF,$A8,$58,$58,$68
 $973A DEFB $78,$58,$FC,$FE,$00,$00,$00,$00
 $9742 DEFB $00,$E0,$01,$01,$01,$F0,$80,$80
 $974A DEFB $80,$80,$00,$00,$00,$00,$00,$00
 $9752 DEFB $00,$00,$00,$07,$0C,$02,$03,$FF
 $975A DEFB $8F,$DF,$5B,$4B,$2B,$3F,$1C,$10
 $9762 DEFB $DF,$C0,$80,$81,$05,$03,$01,$0F
 $976A DEFB $00,$00,$00,$00,$07,$07,$07,$01
 $9772 DEFB $FF,$40,$40,$40,$C0,$C0,$F8,$F8
 $977A DEFB $FE,$7F,$E9,$E3,$E1,$C1,$81,$80
 $9782 DEFB $80,$3F,$7C,$3C,$7C,$30,$10,$10
 $978A DEFB $00,$00,$F7,$C1,$C0,$80,$80,$C1
 $9792 DEFB $E1,$E0,$FF,$F7,$12,$8A,$8A,$06
 $979A DEFB $02,$02,$02,$FD,$06,$C1,$87,$9F
 $97A2 DEFB $DF,$DF,$DF,$00,$00,$00,$00,$10
 $97AA DEFB $01,$EF,$86,$E2,$F0,$F0,$A0,$F0
 $97B2 DEFB $F2,$FF,$83,$BE,$F8,$F0,$F0,$F8
 $97BA DEFB $FC,$FE,$00,$FC,$03,$38,$0C,$07
 $97C2 DEFB $03,$03,$FF,$10,$30,$B0,$FE,$7F
 $97CA DEFB $F0,$F8,$F8,$10,$80,$00,$00,$00
 $97D2 DEFB $00,$00,$00,$FF,$10,$10,$10,$10
 $97DA DEFB $10,$10,$10,$10,$F3,$03,$01,$03
 $97E2 DEFB $0F,$0F,$0F,$00,$00,$00,$00,$00
 $97EA DEFB $00,$00,$00,$00,$D8,$01,$03,$18
 $97F2 DEFB $7F,$5F,$F7,$F7,$F7,$F7,$07,$01
 $97FA DEFB $FF,$02,$02,$02,$02,$0E,$37,$1A
 $9802 DEFB $22,$1F,$20,$60,$40,$80,$80,$00
 $980A DEFB $00,$00,$00,$00,$1F,$3D,$39,$31
 $9812 DEFB $61,$01,$7F,$F0,$B8,$9C,$8F,$87
 $981A DEFB $43,$01,$F0,$80,$80,$C4,$E2,$FF
 $9822 DEFB $07,$1F,$2B,$03,$07,$0F,$0E,$1C
 $982A DEFB $1F,$F8,$FC,$8C,$C6,$44,$80,$08
 $9832 DEFB $00,$00,$F8,$60,$7C,$FF,$FF,$7F
 $983A DEFB $3F,$FE,$FE,$FC,$F8,$78,$60,$E3
 $9842 DEFB $C0,$80,$37,$F4,$FD,$F8,$1C,$F9
 $984A DEFB $F0,$F7,$C6,$FF,$10,$10,$16,$11
 $9852 DEFB $B0,$F0,$F0,$70,$7F,$F8,$98,$8E
 $985A DEFB $0C,$80,$C0,$E0,$68,$03,$01,$01
 $9862 DEFB $FE,$40,$48,$48,$AB,$BC,$FD,$FE
 $986A DEFB $48,$80,$80,$00,$00,$80,$10,$00
 $9872 DEFB $00,$00,$00,$00,$BF,$55,$04,$04
 $987A DEFB $0C,$09,$01,$02,$C0,$80,$80,$80
 $9882 DEFB $10,$A8,$02,$01,$01,$FF,$02,$04
 $988A DEFB $28,$10,$1C,$50,$F8,$F0,$00,$00
 $9892 DEFB $80,$01,$80,$F8,$FF,$FE,$7F,$3F
 $989A DEFB $3F,$3F,$1F,$1F,$7F,$1F,$C3,$07
 $98A2 DEFB $07,$06,$04,$1F,$9F,$3F,$3C,$7E
 $98AA DEFB $1C,$1F,$37,$6F,$6F,$5E,$80,$FC
 $98B2 DEFB $F0,$E0,$C0,$80,$80,$C0,$7F,$FB
 $98BA DEFB $BC,$DC,$9E,$9A,$BC,$80,$00,$E0
 $98C2 DEFB $01,$03,$07,$1F,$FF,$AF,$CA,$C1
 $98CA DEFB $85,$A2,$80,$C0,$80,$00,$00,$7F
 $98D2 DEFB $FE,$FC,$F8,$F0,$E0,$C0,$80,$FE
 $98DA DEFB $40,$C0,$60,$E0,$B0,$F0,$D8,$0F
 $98E2 DEFB $7F,$1F,$0F,$03,$E0,$E0,$FC,$FF
 $98EA DEFB $EE,$0C,$03,$01,$0F,$03,$0F,$FF
 $98F2 DEFB $20,$30,$A8,$F8,$F0,$F8,$FC,$FE
 $98FA DEFB $00,$00,$00,$00,$00,$00,$0F,$FF
 $9902 DEFB $1E,$16,$04,$1F,$0F,$1F,$0F,$0D
 $990A DEFB $09,$3F,$FE,$FC,$F0,$E0,$C0,$80
 $9912 DEFB $03,$03,$01,$F8,$80,$C0,$E0,$F0
 $991A DEFB $F8,$FC,$18,$3D,$3F,$0F,$0F,$3F
 $9922 DEFB $F1,$07,$80,$80,$C7,$FF,$3E,$C0
 $992A DEFB $E0,$F0,$F0,$80,$00,$00,$00,$00
 $9932 DEFB $1F,$3E,$3E,$78,$E0,$80,$00,$F8
 $993A DEFB $01,$07,$0F,$3F,$3F,$03,$E0,$80
 $9942 DEFB $7F,$7F,$5F,$0F,$3F,$07,$25,$80
 $994A DEFB $9F,$3F,$1F,$0F,$03,$01,$40,$C0
 $9952 DEFB $E0,$FC,$FE,$01,$03,$07,$0F,$1F
 $995A DEFB $3F,$7F,$FE,$01,$11,$80,$02,$06
 $9962 DEFB $04,$08,$FF,$87,$23,$43,$07,$87
 $996A DEFB $0B,$09,$39,$00,$F0,$01,$03,$07
 $9972 DEFB $0F,$FF,$F7,$EF,$D9,$33,$26,$4E
 $997A DEFB $9D,$9B,$FE,$40,$40,$40,$C0,$D8
 $9982 DEFB $DC,$48,$FE,$80,$C0,$E0,$E0,$F0
 $998A DEFB $FC,$FF,$00,$00,$00,$00,$00,$C0
 $9992 DEFB $01,$03,$9F,$FE,$FC,$F0,$E0,$80
 $999A DEFB $01,$FF,$51,$D1,$11,$21,$42,$86
 $99A2 DEFB $C4,$08,$FF,$BF,$7F,$5D,$1F,$9D
 $99AA DEFB $0F,$0D,$37,$A5,$01,$80,$04,$10
 $99B2 DEFB $FC,$80,$E0,$F8,$FC,$FE,$FF,$80
 $99BA DEFB $80,$00,$00,$00,$00,$00,$C0,$03
 $99C2 DEFB $0F,$1F,$FF,$FC,$F8,$E0,$80,$FF
 $99CA DEFB $04,$1C,$F0,$83,$06,$48,$12,$A0
 $99D2 DEFB $FF,$20,$52,$86,$44,$08,$18,$12
 $99DA DEFB $17,$FF,$14,$8B,$0B,$03,$39,$B1
 $99E2 DEFB $21,$21,$0C,$40,$08,$00,$07,$FF
 $99EA DEFB $1F,$03,$7F,$E7,$ED,$E8,$CF,$DF
 $99F2 DEFB $1F,$01,$FF,$B1,$23,$21,$01,$01
 $99FA DEFB $13,$FB,$CF,$FF,$CF,$7F,$7F,$3C
 $9A02 DEFB $71,$C1,$83,$2E,$FF,$F1,$E1,$94
 $9A0A DEFB $1C,$F0,$83,$06,$09,$FF,$D1,$11
 $9A12 DEFB $21,$42,$86,$C4,$08,$18,$FF,$B7
 $9A1A DEFB $5F,$15,$8F,$0F,$0F,$3B,$B1,$00
 $9A22 DEFB $03,$1F,$03,$F8,$E0,$FC,$FF,$FF
 $9A2A DEFB $FF,$E0,$46,$4B,$4D,$00,$E0,$0F
 $9A32 DEFB $1F,$1F,$0F,$E0,$C0,$C0,$C0,$FF
 $9A3A DEFB $13,$12,$60,$60,$40,$80,$04,$1F
 $9A42 DEFB $FF,$18,$12,$17,$30,$20,$20,$7F
 $9A4A DEFB $85,$FF,$B3,$23,$25,$01,$21,$01
 $9A52 DEFB $9F,$FA,$BC,$21,$20,$30,$78,$57
 $9A5A DEFB $EC,$80,$C0,$90,$20,$45,$07,$1F
 $9A62 DEFB $07,$01,$F8,$C0,$F0,$F8,$BC,$80
 $9A6A DEFB $00,$00,$00,$3C,$01,$07,$1F,$01
 $9A72 DEFB $E3,$C0,$80,$01,$FF,$FF,$BF,$DB
 $9A7A DEFB $36,$EE,$86,$1C,$90,$0F,$FF,$60
 $9A82 DEFB $40,$80,$04,$1F,$FB,$FE,$FA,$FF
 $9A8A DEFB $30,$20,$20,$7F,$81,$FE,$EC,$2D
 $9A92 DEFB $FF,$01,$41,$01,$9F,$FC,$4F,$7F
 $9A9A DEFB $1F,$97,$40,$40,$60,$CC,$12,$98
 $9AA2 DEFB $20,$C4,$80,$00,$F8,$14,$D3,$C7
 $9AAA DEFB $9F,$7A,$87,$F6,$F8,$E0,$03,$9F
 $9AB2 DEFB $4C,$30,$20,$09,$01,$03,$DF,$12
 $9ABA DEFB $A0,$60,$40,$80,$1F,$FB,$FF,$12
 $9AC2 DEFB $17,$30,$20,$20,$7F,$81,$FE,$FF
 $9ACA DEFB $21,$21,$01,$01,$01,$9F,$FA,$4F
 $9AD2 DEFB $5E,$21,$40,$41,$40,$60,$40,$C3
 $9ADA DEFB $20,$16,$FF,$4B,$4E,$48,$48,$50
 $9AE2 DEFB $50,$50,$70,$06,$01,$03,$07,$3F
 $9AEA DEFB $FF,$F6,$FF,$0F,$FE,$78,$69,$D9
 $9AF2 DEFB $59,$13,$51,$FF,$FB,$E4,$B4,$A4
 $9AFA DEFB $AC,$6C,$6C,$6C,$FE,$46,$5E,$56
 $9B02 DEFB $D7,$F7,$E7,$AE,$7F,$B0,$1C,$F4
 $9B0A DEFB $D5,$6D,$6D,$68,$FE,$80,$20,$A0
 $9B12 DEFB $A8,$B8,$B8,$7B,$F0,$04,$88,$02
 $9B1A DEFB $64,$C0,$90,$80,$81,$80,$8C,$FF
 $9B22 DEFB $02,$35,$3C,$20,$20,$40,$40,$84
 $9B2A DEFB $C0,$01,$0F,$C0,$C0,$F0,$00,$C0
 $9B32 DEFB $01,$01,$FF,$E9,$D8,$88,$98,$98
 $9B3A DEFB $80,$90,$80,$EF,$82,$C2,$C2,$D0
 $9B42 DEFB $94,$90,$90,$FF,$6A,$2C,$2D,$19
 $9B4A DEFB $51,$53,$13,$97,$0F,$FD,$FF,$EF
 $9B52 DEFB $4E,$FF,$0D,$21,$F9,$7F,$FC,$FE
 $9B5A DEFB $FE,$FE,$FF,$7F,$53,$57,$2A,$AA
 $9B62 DEFB $3E,$2A,$28,$F4,$80,$40,$40,$40
 $9B6A DEFB $50,$FE,$28,$60,$40,$E0,$C0,$C0
 $9B72 DEFB $A0,$00,$FE,$07,$7A,$4A,$5A,$5A
 $9B7A DEFB $5A,$7A,$FE,$14,$96,$97,$D7,$D7
 $9B82 DEFB $D7,$5F,$FF,$BF,$B3,$30,$20,$25
 $9B8A DEFB $25,$65,$47,$FC,$C1,$7D,$FD,$CA
 $9B92 DEFB $80,$80,$FE,$1C,$3E,$5E,$57,$87
 $9B9A DEFB $87,$03,$FE,$20,$22,$22,$A2,$A4
 $9BA2 DEFB $A4,$E4,$FC,$80,$30,$A0,$A0,$90
 $9BAA DEFB $90,$FF,$60,$60,$60,$7F,$75,$7F
 $9BB2 DEFB $6A,$6E,$F8,$1F,$15,$1F,$0A,$0E
 $9BBA DEFB $00,$FF,$11,$31,$51,$51,$51,$C9
 $9BC2 DEFB $48,$59,$FF,$24,$28,$68,$A8,$29
 $9BCA DEFB $A1,$63,$43,$FF,$57,$57,$DF,$1F
 $9BD2 DEFB $1F,$BF,$3F,$5F,$00,$07,$01,$01
 $9BDA DEFB $01,$FF,$3D,$1F,$0D,$4B,$06,$02
 $9BE2 DEFB $16,$89,$FF,$BF,$BF,$BF,$BF,$AF
 $9BEA DEFB $EF,$FB,$2F,$FF,$2C,$15,$09,$0A
 $9BF2 DEFB $0A,$0C,$0C,$18,$FF,$9F,$02,$01
 $9BFA DEFB $01,$01,$01,$01,$01,$7F,$FF,$9F
 $9C02 DEFB $0F,$0F,$1B,$1B,$10,$FD,$05,$03
 $9C0A DEFB $C3,$C3,$C7,$D3,$DB,$FD,$DF,$7F
 $9C12 DEFB $7F,$7F,$7F,$7F,$7F,$E7,$01,$01
 $9C1A DEFB $01,$01,$01,$03,$F8,$1F,$15,$1F
 $9C22 DEFB $0A,$0E,$FD,$80,$91,$11,$11,$04
 $9C2A DEFB $08,$88,$FF,$B7,$9F,$3F,$3F,$5F
 $9C32 DEFB $1F,$9F,$3F,$00,$00,$FF,$AE,$2A
 $9C3A DEFB $2A,$08,$88,$88,$88,$C0,$FF,$AF
 $9C42 DEFB $AF,$AF,$D7,$47,$8B,$CB,$43,$FF
 $9C4A DEFB $9F,$9F,$1F,$0F,$0F,$0F,$0F,$5A
 $9C52 DEFB $F0,$03,$1F,$3F,$FF,$F8,$1F,$15
 $9C5A DEFB $1F,$0A,$8E,$FF,$A8,$A8,$A8,$28
 $9C62 DEFB $A0,$A0,$80,$14,$FF,$47,$CF,$AF
 $9C6A DEFB $8F,$2F,$1F,$5F,$9F,$00,$03,$01
 $9C72 DEFB $01,$FF,$1B,$0D,$5D,$58,$59,$1D
 $9C7A DEFB $4D,$88,$FF,$6F,$6F,$6F,$4F,$4F
 $9C82 DEFB $77,$1F,$27,$1F,$FF,$AD,$FF,$52
 $9C8A DEFB $73,$FF,$DF,$5F,$80,$9F,$D5,$1F
 $9C92 DEFB $0A,$0E,$FC,$80,$1F,$15,$1F,$0A
 $9C9A DEFB $0E,$3F,$C1,$40,$40,$40,$40,$C0
 $9CA2 DEFB $BF,$40,$88,$A8,$A0,$20,$20,$01
 $9CAA DEFB $FF,$1F,$1F,$1F,$0F,$0F,$0F,$0F
 $9CB2 DEFB $9E,$F0,$03,$1F,$3F,$FF,$F8,$65
 $9CBA DEFB $FD,$FD,$F0,$FC,$7F,$85,$96,$81
 $9CC2 DEFB $80,$08,$48,$90,$FF,$AF,$BF,$33
 $9CCA DEFB $35,$B3,$14,$A3,$30,$FF,$18,$10
 $9CD2 DEFB $10,$17,$95,$27,$22,$E3,$FF,$01
 $9CDA DEFB $01,$01,$C1,$41,$C1,$80,$80,$F8
 $9CE2 DEFB $08,$1A,$B7,$57,$08,$F8,$20,$48
 $9CEA DEFB $78,$83,$24,$3F,$80,$80,$80,$80
 $9CF2 DEFB $80,$80,$07,$02,$06,$0E,$1F,$FF
 $9CFA DEFB $AD,$FF,$52,$73,$FF,$D0,$50,$C0
 $9D02 DEFB $80,$A0,$0C,$0F,$01,$FF,$3F,$3F
 $9D0A DEFB $3F,$3F,$1F,$1F,$07,$F0,$0F,$FF
 $9D12 DEFB $FC,$E0,$C0,$7F,$9A,$02,$02,$0E
 $9D1A DEFB $01,$03,$03,$FF,$E0,$F0,$E0,$F0
 $9D22 DEFB $F0,$F0,$E0,$80,$5F,$43,$23,$43
 $9D2A DEFB $23,$80,$08,$B0,$80,$20,$40,$F8
 $9D32 DEFB $1F,$15,$1F,$0A,$8E,$1F,$FF,$AD
 $9D3A DEFB $FF,$52,$73,$5F,$10,$28,$A0,$20
 $9D42 DEFB $20,$22,$FF,$9F,$1F,$0F,$1F,$1F
 $9D4A DEFB $9F,$7F,$09,$F8,$03,$1F,$3F,$F7
 $9D52 DEFB $FF,$3F,$FF,$FF,$9A,$02,$02,$01
 $9D5A DEFB $7F,$08,$94,$C2,$C2,$A0,$C2,$80
 $9D62 DEFB $7F,$B7,$9B,$D7,$33,$1C,$B2,$48
 $9D6A DEFB $00,$1F,$FF,$AD,$FF,$52,$73,$1F
 $9D72 DEFB $FF,$AD,$FF,$D2,$F3,$1F,$CD,$40
 $9D7A DEFB $C0,$80,$80,$21,$A4,$40,$27,$20
 $9D82 DEFB $08,$02,$80,$00,$01,$1D,$01,$80
 $9D8A DEFB $00,$00,$00,$05,$0A,$01,$03,$08
 $9D92 DEFB $60,$00,$00,$00,$04,$04,$00,$00
 $9D9A DEFB $00,$01,$68,$08,$12,$08,$40,$1F
 $9DA2 DEFB $FF,$AD,$FF,$52,$73,$07,$10,$26
 $9DAA DEFB $80,$01,$80,$00,$05,$60,$02,$00
 $9DB2 DEFB $00,$01,$10,$00,$00,$00,$00,$00
 $9DBA DEFB $00,$00,$00,$00,$00,$C0,$1F,$15
 $9DC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9DCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9DD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9DDA DEFB $00,$00,$00,$00,$00,$00,$00,$D7
 $9DE2 DEFB $E0,$F5,$F1,$52,$AD,$8C,$F8,$C0
 $9DEA DEFB $40,$C0,$80,$80,$00,$00,$00,$00
 $9DF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9DFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9E02 DEFB $80,$FF,$80,$FF,$80,$FF,$80,$FF
 $9E0A DEFB $80,$FF,$80,$FF,$80,$FF,$80,$FF
 $9E12 DEFB $80,$FF,$80,$FF,$80,$FF,$80,$FF
 $9E1A DEFB $80,$FF,$80,$FF,$80,$FF,$80,$FF
 $9E22 DEFB $80,$FF,$80,$FF,$80,$FF,$80,$FF
 $9E2A DEFB $80,$FF,$80,$FF,$80,$FF,$80,$FF
 $9E32 DEFB $80,$FF,$80,$FF,$80,$FF,$80,$FF
 $9E3A DEFB $80,$FF,$80,$FF,$80,$FF,$80,$FF
 $9E42 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $9E4A DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $9E52 DEFB $68,$68,$68,$68,$6C,$6C,$6C,$6C
 $9E5A DEFB $6C,$6C,$6C,$6C,$65,$65,$6C,$68
 $9E62 DEFB $68,$6C,$6C,$6C,$68,$68,$68,$68
 $9E6A DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $9E72 DEFB $68,$68,$68,$68,$6C,$65,$6C,$65
 $9E7A DEFB $60,$65,$65,$6C,$6C,$6C,$6C,$6C
 $9E82 DEFB $68,$6C,$65,$6C,$68,$68,$68,$68
 $9E8A DEFB $6C,$6C,$6C,$68,$68,$68,$6C,$6C
 $9E92 DEFB $68,$68,$68,$68,$6C,$6C,$6C,$60
 $9E9A DEFB $60,$60,$60,$65,$6C,$65,$65,$60
 $9EA2 DEFB $68,$65,$6C,$65,$68,$68,$68,$68
 $9EAA DEFB $6C,$65,$6C,$68,$6C,$6C,$6C,$6C
 $9EB2 DEFB $68,$68,$68,$68,$68,$6C,$6C,$60
 $9EBA DEFB $60,$60,$60,$60,$60,$60,$60,$60
 $9EC2 DEFB $6C,$65,$6C,$6C,$68,$68,$68,$68
 $9ECA DEFB $68,$6C,$6C,$6C,$6C,$6C,$6C,$6C
 $9ED2 DEFB $6C,$6C,$65,$6C,$6C,$6C,$65,$60
 $9EDA DEFB $60,$60,$60,$60,$60,$60,$60,$60
 $9EE2 DEFB $60,$60,$65,$6C,$6C,$68,$68,$68
 $9EEA DEFB $6C,$6C,$6C,$6C,$65,$65,$65,$6C
 $9EF2 DEFB $65,$60,$66,$44,$60,$60,$60,$74
 $9EFA DEFB $46,$44,$60,$60,$60,$60,$60,$60
 $9F02 DEFB $60,$60,$60,$65,$65,$75,$45,$68
 $9F0A DEFB $6C,$6C,$65,$60,$60,$60,$60,$65
 $9F12 DEFB $60,$66,$74,$70,$44,$60,$66,$70
 $9F1A DEFB $70,$44,$46,$70,$46,$60,$60,$60
 $9F22 DEFB $60,$60,$60,$66,$74,$70,$70,$46
 $9F2A DEFB $60,$60,$60,$60,$60,$60,$60,$66
 $9F32 DEFB $74,$70,$70,$70,$46,$44,$46,$46
 $9F3A DEFB $70,$70,$70,$70,$70,$44,$44,$60
 $9F42 DEFB $60,$60,$66,$74,$70,$70,$70,$46
 $9F4A DEFB $46,$44,$60,$60,$60,$60,$66,$74
 $9F52 DEFB $46,$70,$70,$70,$46,$46,$44,$46
 $9F5A DEFB $70,$70,$70,$70,$70,$46,$46,$46
 $9F62 DEFB $60,$66,$66,$70,$70,$46,$46,$46
 $9F6A DEFB $46,$46,$60,$60,$60,$60,$60,$60
 $9F72 DEFB $70,$70,$70,$46,$70,$70,$46,$46
 $9F7A DEFB $44,$46,$46,$70,$46,$46,$46,$46
 $9F82 DEFB $60,$60,$60,$70,$70,$70,$44,$46
 $9F8A DEFB $70,$70,$60,$60,$60,$44,$44,$60
 $9F92 DEFB $70,$70,$70,$44,$44,$70,$70,$70
 $9F9A DEFB $41,$70,$70,$70,$44,$46,$70,$70
 $9FA2 DEFB $70,$70,$70,$70,$70,$70,$41,$41
 $9FAA DEFB $70,$70,$70,$70,$72,$72,$70,$70
 $9FB2 DEFB $70,$70,$70,$48,$48,$70,$70,$70
 $9FBA DEFB $70,$70,$70,$70,$41,$48,$70,$70
 $9FC2 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $9FCA DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $9FD2 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $9FDA DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $9FE2 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $9FEA DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $9FF2 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $9FFA DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $A002 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $A00A DEFB $70,$70,$46,$70,$70,$70,$70,$70
 $A012 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $A01A DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $A022 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $A02A DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $A032 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $A03A DEFB $70,$70,$70,$70,$70,$70,$70,$70

; Graphics: Cliffs
;
; #PUSHS #UDGTABLE
; { =h Cliffs }
; { #SIM(start=$BB3B,stop=$BB41,ix=#PC)#SCR$02{$00,$00,$200,$100}(cliffs) }
; UDGTABLE# #POPS
@label=Image_Cliffs
b$A042 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A04A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A052 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A05A DEFB $00,$00,$00,$00,$00,$FD,$01,$07
 $A062 DEFB $03,$03,$1F,$0F,$03,$6F,$FC,$40
 $A06A DEFB $83,$05,$E0,$C0,$3F,$FF,$DF,$DC
 $A072 DEFB $90,$01,$01,$00,$00,$00,$00,$00
 $A07A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A082 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A08A DEFB $00,$00,$30,$01,$01,$F0,$FF,$FF
 $A092 DEFB $3F,$1F,$F0,$E0,$F8,$FF,$FF,$CF
 $A09A DEFB $02,$03,$01,$01,$E0,$F0,$FC,$80
 $A0A2 DEFB $F0,$FC,$7F,$3F,$3F,$EC,$03,$07
 $A0AA DEFB $C0,$E0,$E0,$F9,$01,$8F,$C2,$F7
 $A0B2 DEFB $BF,$FB,$FF,$7E,$DF,$F9,$F0,$F8
 $A0BA DEFB $7C,$F8,$7C,$9F,$5F,$F3,$83,$E0
 $A0C2 DEFB $C0,$01,$00,$00,$00,$00,$00,$00
 $A0CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0DA DEFB $00,$00,$87,$07,$01,$01,$07,$78
 $A0E2 DEFB $80,$80,$C0,$C0,$1F,$03,$01,$01
 $A0EA DEFB $01,$01,$0F,$C0,$80,$80,$80,$0F
 $A0F2 DEFB $1E,$0E,$0E,$0C,$3F,$80,$C2,$06
 $A0FA DEFB $60,$C3,$01,$EF,$FC,$D8,$C0,$80
 $A102 DEFB $C0,$F8,$F8,$FF,$01,$03,$02,$03
 $A10A DEFB $12,$1F,$4D,$86,$00,$00,$00,$00
 $A112 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A11A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A122 DEFB $00,$00,$0C,$01,$03,$1F,$07,$3F
 $A12A DEFB $FF,$E7,$01,$E0,$80,$80,$C0,$00
 $A132 DEFB $00,$00,$00,$00,$FD,$01,$7C,$FD
 $A13A DEFB $7D,$3D,$1D,$0A,$FF,$C3,$61,$59
 $A142 DEFB $C8,$C8,$AC,$26,$92,$00,$00,$00
 $A14A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A152 DEFB $00,$00,$00,$00,$00,$E0,$0F,$03
 $A15A DEFB $03,$FE,$30,$30,$10,$18,$19,$DB
 $A162 DEFB $FF,$F0,$30,$E0,$E0,$C0,$F8,$C0
 $A16A DEFB $E0,$38,$1C,$1E,$80,$09,$E0,$20
 $A172 DEFB $C0,$46,$00,$E0,$03,$07,$06,$CF
 $A17A DEFB $F8,$FE,$E0,$80,$4B,$7F,$E0,$80
 $A182 DEFB $C0,$80,$00,$00,$00,$00,$FB,$08
 $A18A DEFB $06,$01,$40,$39,$1E,$1E,$FF,$72
 $A192 DEFB $13,$CA,$A0,$F0,$78,$98,$48,$00
 $A19A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A1A2 DEFB $00,$C0,$0F,$3F,$E0,$7F,$FF,$FF
 $A1AA DEFB $F0,$07,$FF,$FF,$FF,$0F,$FF,$FF
 $A1B2 DEFB $D9,$C9,$0F,$FA,$F5,$80,$80,$03
 $A1BA DEFB $DD,$79,$3F,$3F,$3F,$0F,$03,$FF
 $A1C2 DEFB $3F,$C0,$FE,$F1,$0F,$F8,$E0,$F8
 $A1CA DEFB $78,$07,$31,$18,$08,$3F,$F6,$E2
 $A1D2 DEFB $70,$30,$30,$10,$7F,$31,$27,$0F
 $A1DA DEFB $1F,$3F,$1E,$06,$7F,$E7,$E7,$F3
 $A1E2 DEFB $F3,$F9,$78,$38,$F3,$0C,$08,$1E
 $A1EA DEFB $78,$F8,$E0,$FC,$01,$07,$07,$0F
 $A1F2 DEFB $1F,$1F,$00,$00,$00,$00,$C0,$01
 $A1FA DEFB $02,$5F,$0E,$06,$07,$07,$03,$03
 $A202 DEFB $FF,$28,$10,$D0,$30,$68,$98,$1C
 $A20A DEFB $84,$00,$00,$00,$00,$00,$00,$E0
 $A212 DEFB $01,$01,$03,$F0,$7C,$FC,$FF,$FF
 $A21A DEFB $C0,$3C,$FE,$00,$FF,$80,$80,$80
 $A222 DEFB $80,$80,$80,$80,$80,$00,$FF,$01
 $A22A DEFB $01,$01,$01,$01,$01,$01,$01,$FC
 $A232 DEFB $C0,$E0,$F0,$F8,$F8,$FC,$00,$00
 $A23A DEFB $FE,$0B,$56,$5A,$7E,$2F,$34,$EF
 $A242 DEFB $1F,$7F,$F6,$5F,$5F,$A4,$FF,$85
 $A24A DEFB $07,$F7,$65,$CE,$8D,$90,$A0,$FC
 $A252 DEFB $62,$03,$67,$01,$E4,$DB,$FE,$20
 $A25A DEFB $1E,$A0,$A3,$38,$40,$58,$F9,$04
 $A262 DEFB $70,$FE,$B9,$84,$93,$D0,$02,$23
 $A26A DEFB $B1,$3F,$0F,$03,$01,$01,$01,$01
 $A272 DEFB $CF,$3F,$1C,$1E,$18,$03,$1F,$FF
 $A27A DEFB $F1,$83,$07,$0F,$1E,$1E,$98,$FA
 $A282 DEFB $7C,$1F,$7E,$F0,$B0,$A0,$84,$40
 $A28A DEFB $20,$F7,$02,$04,$0C,$10,$1E,$1E
 $A292 DEFB $1E,$FE,$03,$07,$C1,$86,$CF,$F7
 $A29A DEFB $F7,$7F,$DF,$7F,$10,$18,$08,$E8
 $A2A2 DEFB $1C,$FF,$60,$F0,$38,$36,$11,$09
 $A2AA DEFB $08,$04,$00,$00,$00,$00,$00,$00
 $A2B2 DEFB $FF,$07,$07,$0F,$0F,$0F,$0F,$0F
 $A2BA DEFB $0F,$FA,$01,$02,$01,$02,$04,$0C
 $A2C2 DEFB $FF,$01,$01,$01,$01,$01,$01,$01
 $A2CA DEFB $01,$3F,$FF,$FE,$FE,$FC,$F0,$C0
 $A2D2 DEFB $FF,$80,$80,$80,$80,$80,$80,$80
 $A2DA DEFB $80,$00,$06,$01,$01,$FF,$82,$02
 $A2E2 DEFB $02,$82,$82,$82,$82,$41,$FF,$80
 $A2EA DEFB $C0,$C0,$C0,$C0,$C0,$E0,$E0,$00
 $A2F2 DEFB $FF,$E7,$FE,$38,$7F,$3F,$17,$13
 $A2FA DEFB $FD,$DF,$C0,$E0,$64,$A8,$F8,$70
 $A302 DEFB $88,$03,$C0,$80,$1F,$29,$31,$01
 $A30A DEFB $01,$01,$FF,$21,$63,$4D,$C9,$83
 $A312 DEFB $05,$0E,$0C,$FF,$F0,$E0,$F7,$CF
 $A31A DEFB $0C,$EF,$6B,$D0,$FF,$B6,$D6,$FA
 $A322 DEFB $F3,$07,$83,$43,$C0,$EF,$98,$F8
 $A32A DEFB $E0,$10,$04,$F8,$02,$FE,$01,$20
 $A332 DEFB $08,$0C,$C0,$E1,$60,$B3,$40,$82
 $A33A DEFB $04,$03,$40,$1C,$01,$08,$60,$7F
 $A342 DEFB $30,$20,$F0,$E0,$F0,$30,$10,$FF
 $A34A DEFB $EF,$E7,$EB,$EF,$FC,$FA,$FC,$F0
 $A352 DEFB $BF,$F6,$89,$17,$83,$71,$18,$2C
 $A35A DEFB $FF,$0F,$0C,$06,$81,$C0,$F9,$47
 $A362 DEFB $40,$FF,$84,$64,$1C,$8E,$92,$D0
 $A36A DEFB $54,$CC,$00,$00,$00,$00,$00,$00
 $A372 DEFB $FF,$1F,$1F,$1F,$1F,$1F,$1F,$1F
 $A37A DEFB $1F,$FF,$08,$08,$08,$08,$10,$10
 $A382 DEFB $10,$10,$03,$01,$01,$FF,$01,$02
 $A38A DEFB $82,$82,$42,$42,$42,$44,$00,$00
 $A392 DEFB $00,$FF,$41,$41,$41,$41,$41,$21
 $A39A DEFB $21,$21,$FF,$E0,$E0,$E0,$E0,$E0
 $A3A2 DEFB $E0,$E0,$E0,$00,$7F,$6F,$38,$1F
 $A3AA DEFB $0F,$1F,$05,$0F,$BF,$0F,$3F,$01
 $A3B2 DEFB $B3,$0D,$50,$C1,$E0,$C3,$F2,$5E
 $A3BA DEFB $00,$00,$0F,$90,$B0,$E0,$40,$19
 $A3C2 DEFB $40,$01,$01,$FF,$1E,$1E,$EC,$FB
 $A3CA DEFB $8B,$0A,$0C,$08,$FF,$89,$64,$73
 $A3D2 DEFB $49,$E7,$A1,$E0,$50,$FF,$0F,$0C
 $A3DA DEFB $78,$F9,$F8,$F8,$4C,$7C,$FF,$79
 $A3E2 DEFB $3C,$6F,$FB,$07,$18,$78,$7E,$7F
 $A3EA DEFB $9D,$1D,$1F,$FF,$3B,$67,$C1,$3F
 $A3F2 DEFB $0F,$1F,$0F,$0F,$0E,$0C,$FF,$38
 $A3FA DEFB $1C,$9E,$BE,$3E,$F8,$C0,$98,$FF
 $A402 DEFB $4F,$4F,$CF,$CC,$DD,$79,$B9,$41
 $A40A DEFB $FF,$CC,$C8,$45,$41,$42,$06,$A0
 $A412 DEFB $A8,$00,$00,$00,$00,$00,$00,$FF
 $A41A DEFB $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0
 $A422 DEFB $FF,$10,$10,$10,$10,$10,$20,$20
 $A42A DEFB $20,$00,$FF,$44,$44,$44,$44,$48
 $A432 DEFB $28,$28,$28,$00,$00,$00,$FF,$21
 $A43A DEFB $21,$21,$11,$11,$11,$11,$11,$FF
 $A442 DEFB $E0,$E0,$F0,$F0,$F0,$F0,$F8,$FC
 $A44A DEFB $00,$00,$DF,$7F,$07,$03,$7D,$FF
 $A452 DEFB $01,$07,$EF,$08,$2C,$0B,$10,$E0
 $A45A DEFB $04,$30,$6E,$6F,$F0,$43,$9F,$CC
 $A462 DEFB $FF,$80,$0E,$F8,$E1,$3E,$1C,$FE
 $A46A DEFB $5F,$C0,$01,$FF,$C0,$F8,$F0,$00
 $A472 DEFB $11,$30,$01,$3F,$49,$1B,$12,$1C
 $A47A DEFB $38,$10,$7F,$E7,$A1,$A4,$A0,$61
 $A482 DEFB $50,$70,$7F,$10,$DC,$06,$03,$03
 $A48A DEFB $03,$40,$FF,$3E,$2F,$1F,$1C,$30
 $A492 DEFB $38,$B8,$78,$0F,$20,$47,$FE,$7F
 $A49A DEFB $F3,$BC,$D8,$C5,$C2,$91,$BF,$F7
 $A4A2 DEFB $D8,$58,$59,$40,$40,$44,$9E,$00
 $A4AA DEFB $00,$00,$00,$00,$00,$FF,$E0,$E0
 $A4B2 DEFB $E0,$E0,$E0,$E0,$E0,$E0,$FF,$20
 $A4BA DEFB $20,$20,$20,$20,$20,$40,$40,$00
 $A4C2 DEFB $FF,$48,$48,$50,$30,$30,$30,$10
 $A4CA DEFB $20,$00,$00,$00,$FF,$10,$10,$08
 $A4D2 DEFB $08,$08,$08,$08,$08,$7F,$80,$80
 $A4DA DEFB $80,$80,$80,$40,$40,$3F,$FF,$7F
 $A4E2 DEFB $1F,$0F,$03,$01,$80,$80,$00,$1F
 $A4EA DEFB $3F,$01,$03,$FF,$1F,$5F,$2F,$F3
 $A4F2 DEFB $FF,$DF,$BF,$3F,$BF,$03,$69,$10
 $A4FA DEFB $09,$01,$91,$E1,$BF,$01,$08,$82
 $A502 DEFB $A8,$04,$52,$3E,$FF,$C0,$BE,$FC
 $A50A DEFB $F0,$A7,$BF,$17,$E7,$F0,$FC,$FE
 $A512 DEFB $C6,$FC,$00,$00,$00,$00,$07,$78
 $A51A DEFB $68,$20,$00,$01,$03,$03,$60,$C0
 $A522 DEFB $00,$00,$00,$00,$00,$00,$FF,$E0
 $A52A DEFB $E0,$E0,$E0,$C0,$C0,$C0,$C0,$FF
 $A532 DEFB $40,$40,$40,$40,$40,$40,$40,$80
 $A53A DEFB $00,$FF,$20,$20,$20,$20,$20,$40
 $A542 DEFB $40,$40,$00,$00,$00,$FF,$08,$08
 $A54A DEFB $04,$04,$04,$04,$04,$04,$FF,$02
 $A552 DEFB $02,$02,$02,$02,$02,$02,$01,$00
 $A55A DEFB $03,$0F,$03,$1F,$FF,$FF,$7F,$0F
 $A562 DEFB $03,$E0,$80,$F0,$FC,$00,$FB,$EF
 $A56A DEFB $F1,$07,$7F,$43,$03,$3F,$65,$C1
 $A572 DEFB $0F,$B9,$06,$BF,$8F,$10,$E0,$08
 $A57A DEFB $48,$C6,$03,$FB,$7F,$E3,$FF,$FD
 $A582 DEFB $E0,$FA,$3F,$9A,$80,$80,$F0,$FF
 $A58A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A592 DEFB $00,$00,$00,$00,$00,$FF,$C0,$80
 $A59A DEFB $80,$80,$80,$80,$80,$80,$FF,$80
 $A5A2 DEFB $80,$80,$80,$80,$80,$80,$80,$00
 $A5AA DEFB $FF,$40,$40,$80,$80,$80,$80,$80
 $A5B2 DEFB $80,$00,$00,$00,$FF,$04,$04,$04
 $A5BA DEFB $04,$04,$04,$04,$02,$FF,$01,$01
 $A5C2 DEFB $01,$01,$01,$03,$03,$03,$00,$00
 $A5CA DEFB $E0,$03,$07,$1F,$0F,$FF,$FC,$F0
 $A5D2 DEFB $C0,$00,$FF,$0F,$0F,$14,$03,$03
 $A5DA DEFB $0C,$3F,$73,$3C,$FB,$F8,$03,$C8
 $A5E2 DEFB $BF,$E0,$01,$38,$F8,$80,$0C,$86
 $A5EA DEFB $B3,$05,$E9,$95,$0D,$E0,$CE,$80
 $A5F2 DEFB $FF,$F0,$1E,$F6,$00,$00,$00,$00
 $A5FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A602 DEFB $00,$9F,$80,$81,$81,$80,$80,$01
 $A60A DEFB $79,$80,$80,$80,$80,$80,$FF,$01
 $A612 DEFB $01,$01,$01,$01,$01,$02,$02,$00
 $A61A DEFB $00,$00,$00,$FF,$02,$03,$01,$01
 $A622 DEFB $01,$01,$01,$01,$FF,$02,$02,$02
 $A62A DEFB $02,$02,$02,$02,$02,$E0,$03,$1F
 $A632 DEFB $7F,$1F,$FF,$FE,$FC,$F0,$80,$01
 $A63A DEFB $80,$00,$00,$FF,$07,$0E,$07,$77
 $A642 DEFB $0E,$7F,$EF,$3C,$BD,$0A,$18,$98
 $A64A DEFB $02,$60,$9C,$BD,$78,$01,$20,$03
 $A652 DEFB $0F,$C1,$FD,$09,$90,$19,$0C,$18
 $A65A DEFB $88,$C3,$FD,$E0,$FF,$F8,$07,$D4
 $A662 DEFB $F0,$0F,$94,$C0,$F8,$80,$00,$00
 $A66A DEFB $00,$00,$00,$00,$00,$00,$C0,$03
 $A672 DEFB $0E,$F0,$07,$7F,$FA,$FF,$57,$FF
 $A67A DEFB $FE,$80,$02,$10,$00,$F8,$01,$81
 $A682 DEFB $C1,$F7,$FF,$37,$80,$80,$80,$80
 $A68A DEFB $80,$FF,$02,$02,$02,$04,$04,$04
 $A692 DEFB $04,$04,$00,$00,$00,$00,$FF,$01
 $A69A DEFB $01,$01,$01,$01,$01,$01,$01,$7F
 $A6A2 DEFB $FC,$FC,$F0,$E0,$C0,$80,$80,$00
 $A6AA DEFB $00,$00,$C0,$7F,$1F,$FE,$30,$5F
 $A6B2 DEFB $3D,$5F,$B7,$FF,$F5,$7B,$FC,$F0
 $A6BA DEFB $09,$03,$80,$A8,$D3,$03,$40,$D0
 $A6C2 DEFB $03,$10,$BF,$82,$39,$1F,$82,$01
 $A6CA DEFB $67,$22,$FE,$73,$DF,$81,$13,$F0
 $A6D2 DEFB $9C,$7F,$ED,$FC,$07,$F8,$80,$FF
 $A6DA DEFB $FC,$46,$33,$EC,$80,$00,$00,$00
 $A6E2 DEFB $00,$00,$00,$00,$FC,$01,$07,$0D
 $A6EA DEFB $1F,$3B,$7F,$01,$C0,$00,$00,$00
 $A6F2 DEFB $00,$FD,$80,$80,$84,$DC,$FE,$FE
 $A6FA DEFB $FF,$FF,$04,$08,$08,$08,$08,$08
 $A702 DEFB $10,$10,$00,$00,$5F,$FF,$FF,$F3
 $A70A DEFB $D3,$C1,$80,$0F,$FF,$7E,$2F,$08
 $A712 DEFB $03,$FE,$48,$00,$00,$00,$FC,$0C
 $A71A DEFB $06,$0F,$3C,$F0,$87,$FC,$D9,$EE
 $A722 DEFB $F7,$1D,$36,$FD,$CF,$A0,$E4,$40
 $A72A DEFB $FF,$78,$87,$DB,$10,$07,$F3,$C0
 $A732 DEFB $0E,$E1,$CE,$80,$1F,$FC,$01,$C0
 $A73A DEFB $FF,$E5,$F5,$77,$FB,$AF,$DB,$EF
 $A742 DEFB $F0,$EF,$20,$04,$44,$F0,$30,$2F
 $A74A DEFB $E0,$3E,$FF,$E0,$80,$80,$C0,$00
 $A752 DEFB $00,$00,$00,$00,$00,$00,$68,$68
 $A75A DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A762 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A76A DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A772 DEFB $68,$68,$68,$68,$44,$44,$68,$68
 $A77A DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A782 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A78A DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A792 DEFB $68,$68,$68,$68,$60,$60,$68,$68
 $A79A DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A7A2 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A7AA DEFB $68,$68,$68,$68,$68,$68,$68,$45
 $A7B2 DEFB $45,$45,$45,$44,$60,$60,$68,$68
 $A7BA DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A7C2 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A7CA DEFB $68,$68,$68,$68,$68,$68,$45,$47
 $A7D2 DEFB $47,$47,$47,$47,$44,$60,$68,$68
 $A7DA DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A7E2 DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A7EA DEFB $68,$68,$68,$68,$68,$68,$45,$45
 $A7F2 DEFB $47,$47,$47,$47,$44,$60,$68,$68
 $A7FA DEFB $68,$68,$68,$68,$68,$68,$68,$68
 $A802 DEFB $6C,$6C,$6C,$65,$65,$65,$60,$44
 $A80A DEFB $45,$45,$45,$45,$45,$68,$68,$47
 $A812 DEFB $47,$47,$47,$44,$44,$60,$68,$68
 $A81A DEFB $68,$68,$68,$68,$6C,$6C,$6C,$68
 $A822 DEFB $78,$78,$78,$67,$60,$60,$67,$60
 $A82A DEFB $60,$44,$44,$44,$44,$45,$68,$68
 $A832 DEFB $45,$44,$44,$44,$60,$60,$68,$68
 $A83A DEFB $68,$68,$68,$68,$6F,$78,$78,$7D
 $A842 DEFB $78,$78,$78,$78,$67,$60,$67,$67
 $A84A DEFB $60,$60,$60,$60,$60,$44,$44,$44
 $A852 DEFB $44,$44,$60,$60,$60,$60,$68,$68
 $A85A DEFB $68,$68,$68,$68,$6F,$78,$78,$78
 $A862 DEFB $78,$78,$78,$78,$67,$60,$67,$7C
 $A86A DEFB $67,$67,$67,$60,$60,$60,$60,$60
 $A872 DEFB $60,$60,$44,$60,$60,$60,$48,$48
 $A87A DEFB $48,$48,$48,$48,$79,$78,$78,$78
 $A882 DEFB $78,$78,$78,$78,$67,$60,$67,$67
 $A88A DEFB $7C,$7C,$67,$67,$67,$60,$60,$60
 $A892 DEFB $60,$60,$60,$60,$44,$44,$48,$48
 $A89A DEFB $48,$48,$48,$48,$79,$78,$78,$78
 $A8A2 DEFB $78,$78,$78,$78,$78,$7C,$67,$67
 $A8AA DEFB $67,$67,$7C,$7C,$67,$67,$60,$60
 $A8B2 DEFB $60,$60,$60,$60,$60,$60,$48,$48
 $A8BA DEFB $48,$48,$48,$48,$79,$78,$78,$78
 $A8C2 DEFB $78,$78,$78,$78,$78,$78,$7C,$7C
 $A8CA DEFB $67,$67,$67,$7C,$7C,$67,$67,$60
 $A8D2 DEFB $60,$60,$60,$60,$60,$60,$48,$48
 $A8DA DEFB $48,$48,$48,$48,$79,$78,$78,$78
 $A8E2 DEFB $78,$78,$78,$78,$78,$78,$78,$7C
 $A8EA DEFB $67,$60,$67,$7C,$7C,$7C,$67,$67
 $A8F2 DEFB $60,$60,$60,$60,$60,$60,$48,$48
 $A8FA DEFB $48,$48,$48,$4E,$79,$78,$78,$78
 $A902 DEFB $78,$78,$78,$78,$78,$7C,$67,$67
 $A90A DEFB $60,$67,$67,$7C,$7C,$7C,$67,$67
 $A912 DEFB $60,$60,$60,$60,$60,$60,$48,$48
 $A91A DEFB $4E,$4E,$71,$70,$7E,$78,$78,$78
 $A922 DEFB $78,$78,$78,$78,$67,$67,$60,$60
 $A92A DEFB $67,$67,$7C,$7C,$7C,$7C,$67,$67
 $A932 DEFB $60,$60,$60,$60,$60,$60,$48,$4E
 $A93A DEFB $71,$70,$70,$70,$70,$7E,$78,$78
 $A942 DEFB $78,$67,$67,$67,$60,$60,$60,$67
 $A94A DEFB $67,$7C,$7C,$7C,$67,$7C,$67,$67
 $A952 DEFB $60,$60,$60,$60,$60,$60

; Graphics: Cavern
;
; #PUSHS #UDGTABLE
; { =h Dunno }
; { #SIM(start=$BB3B,stop=$BB41,ix=#PC)#SCR$02{$00,$00,$200,$100}(cavern) }
; UDGTABLE# #POPS
@label=Image_Cavern
b$A958 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A960 DEFB $00,$40,$04,$F8,$05,$0A,$15,$2A
 $A968 DEFB $15,$FC,$04,$54,$A1,$54,$AA,$54
 $A970 DEFB $FC,$15,$2A,$15,$2A,$50,$01,$7F
 $A978 DEFB $0A,$55,$AA,$54,$80,$01,$08,$B7
 $A980 DEFB $AA,$54,$A0,$22,$84,$80,$1B,$AA
 $A988 DEFB $15,$40,$80,$01,$A0,$00,$00,$00
 $A990 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A998 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A9A0 DEFB $00,$00,$00,$C0,$08,$10,$F8,$14
 $A9A8 DEFB $20,$14,$50,$28,$FF,$EB,$D5,$AB
 $A9B0 DEFB $D5,$EA,$D5,$AA,$54,$BF,$A2,$15
 $A9B8 DEFB $6A,$51,$80,$04,$80,$0F,$A0,$40
 $A9C0 DEFB $20,$40,$00,$02,$40,$00,$00,$00
 $A9C8 DEFB $00,$00,$00,$00,$00,$00,$80,$07
 $A9D0 DEFB $C0,$07,$FF,$E0,$0C,$FF,$FF,$D0
 $A9D8 DEFB $02,$C6,$FF,$80,$80,$00,$00,$00
 $A9E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A9E8 DEFB $FF,$EE,$F6,$EF,$FD,$D7,$AD,$DE
 $A9F0 DEFB $F7,$FF,$AB,$57,$AB,$55,$AB,$55
 $A9F8 DEFB $AF,$52,$76,$54,$80,$80,$80,$80
 $AA00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AA08 DEFB $00,$00,$00,$F0,$03,$07,$0F,$7F
 $AA10 DEFB $77,$FF,$F8,$C0,$28,$14,$02,$F9
 $AA18 DEFB $40,$08,$44,$AA,$40,$A0,$FF,$7F
 $AA20 DEFB $F7,$FE,$55,$AA,$57,$AA,$55,$FC
 $AA28 DEFB $50,$8A,$44,$88,$45,$AA,$FB,$04
 $AA30 DEFB $40,$A8,$05,$A8,$15,$8A,$B7,$01
 $AA38 DEFB $80,$18,$02,$B8,$2A,$F7,$0F,$03
 $AA40 DEFB $A0,$8C,$28,$48,$30,$FC,$C0,$F8
 $AA48 DEFB $FE,$FF,$77,$ED,$E0,$80,$FF,$FF
 $AA50 DEFB $D0,$08,$80,$F1,$00,$00,$00,$00
 $AA58 DEFB $00,$00,$FE,$01,$04,$11,$10,$21
 $AA60 DEFB $12,$24,$FF,$AA,$54,$A8,$50,$A8
 $AA68 DEFB $50,$20,$54,$03,$A2,$44,$00,$00
 $AA70 DEFB $00,$00,$00,$00,$00,$F0,$05,$01
 $AA78 DEFB $03,$0D,$FC,$0F,$3F,$F9,$EF,$FD
 $AA80 DEFB $FF,$F3,$01,$80,$20,$82,$55,$8A
 $AA88 DEFB $F9,$DF,$10,$40,$A8,$50,$8A,$FC
 $AA90 DEFB $C1,$F1,$FE,$FF,$77,$57,$FF,$5E
 $AA98 DEFB $EF,$EF,$FD,$FE,$75,$EF,$FC,$7F
 $AAA0 DEFB $45,$80,$14,$A8,$15,$28,$13,$78
 $AAA8 DEFB $85,$C0,$08,$40,$FF,$C0,$FC,$02
 $AAB0 DEFB $7F,$E8,$F0,$F9,$F7,$FF,$AA,$D5
 $AAB8 DEFB $AA,$E5,$2A,$E5,$A2,$44,$FF,$AE
 $AAC0 DEFB $01,$46,$55,$A0,$01,$02,$11,$FF
 $AAC8 DEFB $AA,$55,$AA,$15,$8A,$40,$2A,$05
 $AAD0 DEFB $FF,$AA,$55,$AE,$35,$8A,$05,$40
 $AAD8 DEFB $44,$FF,$AF,$57,$EA,$75,$AB,$55
 $AAE0 DEFB $8A,$51,$FD,$40,$45,$A0,$54,$2A
 $AAE8 DEFB $55,$A8,$FB,$01,$42,$22,$92,$2C
 $AAF0 DEFB $03,$F0,$00,$00,$FF,$FE,$FC,$FD
 $AAF8 DEFB $FD,$FB,$FA,$FB,$E3,$7F,$08,$41
 $AB00 DEFB $AB,$55,$AA,$41,$80,$D0,$80,$80
 $AB08 DEFB $C0,$00,$FF,$AB,$57,$2B,$57,$AF
 $AB10 DEFB $57,$AF,$57,$29,$20,$80,$80,$00
 $AB18 DEFB $00,$F0,$03,$1F,$3E,$FB,$FC,$07
 $AB20 DEFB $3F,$D7,$F1,$4C,$D4,$F8,$FF,$01
 $AB28 DEFB $67,$3A,$55,$F8,$C0,$E0,$B0,$98
 $AB30 DEFB $5E,$00,$E0,$01,$06,$1F,$FB,$E0
 $AB38 DEFB $80,$02,$22,$04,$15,$02,$FF,$FA
 $AB40 DEFB $F5,$2F,$50,$A2,$44,$A8,$D4,$B7
 $AB48 DEFB $EA,$75,$E8,$A0,$04,$40,$DB,$AA
 $AB50 DEFB $C5,$01,$02,$02,$04,$DF,$A9,$55
 $AB58 DEFB $0A,$02,$03,$08,$04,$7F,$EA,$85
 $AB60 DEFB $EC,$F8,$EF,$6F,$01,$FD,$80,$5A
 $AB68 DEFB $C2,$17,$04,$03,$E0,$F7,$C7,$05
 $AB70 DEFB $FB,$B4,$18,$4E,$16,$1F,$EF,$FF
 $AB78 DEFB $FF,$EF,$1F,$FF,$F2,$90,$E0,$E0
 $AB80 DEFB $3C,$F8,$34,$52,$08,$02,$00,$02
 $AB88 DEFB $80,$00,$5F,$8A,$11,$A0,$10,$81
 $AB90 DEFB $10,$07,$1F,$C2,$04,$00,$00,$FF
 $AB98 DEFB $E4,$CF,$D8,$DF,$B7,$BD,$B7,$F7
 $ABA0 DEFB $00,$FF,$DF,$2F,$D7,$EF,$D7,$EB
 $ABA8 DEFB $F7,$AB,$00,$3F,$20,$40,$20,$40
 $ABB0 DEFB $20,$40,$00,$C0,$01,$07,$FF,$01
 $ABB8 DEFB $03,$06,$1F,$76,$ED,$DD,$FB,$FF
 $ABC0 DEFB $DE,$45,$2A,$75,$EA,$F1,$A2,$55
 $ABC8 DEFB $FF,$AA,$55,$A8,$51,$AA,$55,$A0
 $ABD0 DEFB $01,$EF,$AB,$55,$0A,$41,$14,$80
 $ABD8 DEFB $55,$FF,$DE,$5D,$EB,$5D,$AB,$15
 $ABE0 DEFB $0E,$15,$F8,$81,$81,$C2,$F2,$5D
 $ABE8 DEFB $FB,$D0,$C0,$80,$83,$84,$4A,$8A
 $ABF0 DEFB $FF,$EA,$D4,$A8,$54,$A0,$41,$A0
 $ABF8 DEFB $40,$00,$00,$00,$00,$00,$3F,$1C
 $AC00 DEFB $1E,$07,$03,$03,$02,$FF,$90,$48
 $AC08 DEFB $BD,$78,$18,$9C,$CC,$34,$50,$04
 $AC10 DEFB $04,$7F,$19,$14,$0A,$0D,$07,$02
 $AC18 DEFB $01,$FE,$80,$80,$80,$40,$F0,$E8
 $AC20 DEFB $7C,$00,$00,$00,$00,$00,$00,$08
 $AC28 DEFB $01,$4F,$D0,$90,$90,$40,$C0,$00
 $AC30 DEFB $BF,$0A,$04,$0A,$04,$02,$05,$01
 $AC38 DEFB $FD,$01,$04,$0A,$10,$48,$B0,$40
 $AC40 DEFB $00,$F8,$01,$07,$1F,$3D,$35,$FF
 $AC48 DEFB $1A,$7F,$EA,$DD,$2A,$14,$F8,$50
 $AC50 DEFB $3F,$AE,$74,$AA,$55,$20,$40,$00
 $AC58 DEFB $00,$00,$00,$1F,$2C,$05,$0A,$01
 $AC60 DEFB $03,$7F,$BA,$55,$A8,$51,$8A,$54
 $AC68 DEFB $A0,$00,$00,$00,$00,$00,$00,$00
 $AC70 DEFB $FF,$0F,$07,$2F,$23,$13,$12,$02
 $AC78 DEFB $02,$F0,$80,$80,$80,$C0,$00,$FF
 $AC80 DEFB $9C,$FE,$63,$13,$13,$13,$0B,$07
 $AC88 DEFB $00,$00,$00,$00,$FF,$FC,$FA,$F0
 $AC90 DEFB $E1,$EA,$E1,$C0,$CF,$00,$C6,$02
 $AC98 DEFB $02,$03,$01,$F4,$80,$80,$80,$C0
 $ACA0 DEFB $40,$00,$00,$00,$FC,$01,$03,$0E
 $ACA8 DEFB $18,$2B,$D5,$FF,$F3,$5D,$0A,$15
 $ACB0 DEFB $AA,$14,$AA,$41,$FF,$A0,$50,$A0
 $ACB8 DEFB $40,$80,$32,$84,$01,$00,$00,$FF
 $ACC0 DEFB $FE,$EB,$DC,$F9,$D3,$A7,$4F,$5F
 $ACC8 DEFB $03,$5E,$C3,$0F,$82,$FD,$0F,$07
 $ACD0 DEFB $FE,$14,$8A,$F5,$C8,$30,$0C,$07
 $ACD8 DEFB $00,$80,$04,$FF,$FD,$F8,$EE,$D1
 $ACE0 DEFB $D7,$0F,$7F,$7F,$07,$36,$BD,$EC
 $ACE8 DEFB $2F,$D0,$F0,$16,$01,$01,$F6,$80
 $ACF0 DEFB $80,$E0,$E0,$60,$30,$00,$00,$9F
 $ACF8 DEFB $03,$01,$01,$01,$01,$01,$FF,$C0
 $AD00 DEFB $E0,$A0,$B0,$90,$A0,$E0,$C0,$00
 $AD08 DEFB $FF,$07,$07,$05,$03,$01,$03,$03
 $AD10 DEFB $0B,$20,$80,$00,$F8,$03,$03,$07
 $AD18 DEFB $04,$0B,$F0,$FB,$5F,$E7,$93,$9F
 $AD20 DEFB $C2,$DF,$CC,$A8,$20,$20,$00,$3F
 $AD28 DEFB $04,$04,$04,$04,$06,$03,$A0,$80
 $AD30 DEFB $80,$00,$00,$FF,$01,$03,$03,$07
 $AD38 DEFB $0D,$17,$07,$06,$FF,$D6,$E9,$AA
 $AD40 DEFB $95,$2A,$54,$A0,$D0,$01,$80,$00
 $AD48 DEFB $00,$0F,$29,$96,$74,$0F,$0F,$60
 $AD50 DEFB $C0,$80,$80,$00,$00,$0F,$06,$03
 $AD58 DEFB $01,$01,$FF,$7F,$BF,$DF,$6B,$6E
 $AD60 DEFB $16,$81,$E8,$FF,$FE,$E8,$F1,$F9
 $AD68 DEFB $CB,$A7,$EF,$CF,$00,$00,$00,$FF
 $AD70 DEFB $10,$10,$18,$18,$18,$1C,$1C,$0C
 $AD78 DEFB $00,$00,$FF,$01,$02,$04,$0C,$0B
 $AD80 DEFB $03,$01,$01,$7F,$40,$40,$40,$80
 $AD88 DEFB $80,$80,$80,$00,$7F,$03,$07,$06
 $AD90 DEFB $06,$0A,$06,$06,$00,$00,$FF,$C4
 $AD98 DEFB $E1,$84,$88,$30,$20,$10,$40,$00
 $ADA0 DEFB $00,$00,$FF,$FE,$FD,$F9,$FA,$FB
 $ADA8 DEFB $FB,$FD,$FD,$E7,$80,$80,$80,$80
 $ADB0 DEFB $80,$80,$00,$00,$FF,$09,$0E,$0E
 $ADB8 DEFB $16,$2C,$3E,$38,$3C,$8F,$80,$20
 $ADC0 DEFB $40,$80,$80,$00,$00,$00,$00,$00
 $ADC8 DEFB $00,$00,$00,$01,$03,$03,$E0,$40
 $ADD0 DEFB $00,$00,$00,$FF,$0C,$0C,$04,$04
 $ADD8 DEFB $08,$08,$08,$0C,$00,$20,$01,$FF
 $ADE0 DEFB $07,$02,$1A,$14,$24,$28,$F4,$C0
 $ADE8 DEFB $00,$00,$09,$0C,$20,$20,$80,$FF
 $ADF0 DEFB $FE,$FC,$FC,$F9,$F8,$F8,$F0,$F4
 $ADF8 DEFB $00,$00,$00,$00,$17,$03,$02,$03
 $AE00 DEFB $01,$FF,$AF,$5F,$BF,$57,$BB,$57
 $AE08 DEFB $AE,$57,$00,$00,$FF,$39,$5A,$59
 $AE10 DEFB $79,$3B,$33,$71,$61,$00,$00,$00
 $AE18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AE20 DEFB $00,$00,$00,$FF,$0C,$1C,$18,$08
 $AE28 DEFB $08,$18,$18,$30,$00,$00,$7A,$50
 $AE30 DEFB $80,$80,$80,$80,$C0,$07,$32,$E0
 $AE38 DEFB $E0,$B0,$78,$00,$04,$80,$FF,$F0
 $AE40 DEFB $E4,$F4,$E4,$E8,$D8,$D0,$80,$00
 $AE48 DEFB $FF,$0B,$32,$05,$2E,$55,$6F,$5F
 $AE50 DEFB $7F,$FC,$40,$B0,$D0,$EE,$F4,$EA
 $AE58 DEFB $00,$00,$3F,$54,$02,$04,$09,$06
 $AE60 DEFB $01,$FF,$80,$40,$A0,$50,$A8,$54
 $AE68 DEFB $AA,$55,$00,$BF,$61,$E0,$E0,$20
 $AE70 DEFB $30,$0C,$12,$FF,$C0,$80,$E0,$70
 $AE78 DEFB $70,$34,$1F,$87,$00,$00,$00,$00
 $AE80 DEFB $00,$00,$00,$00,$00,$00,$FF,$01
 $AE88 DEFB $03,$03,$03,$02,$02,$02,$06,$FF
 $AE90 DEFB $80,$80,$80,$80,$80,$80,$C0,$C0
 $AE98 DEFB $FC,$01,$01,$01,$03,$0F,$1C,$1F
 $AEA0 DEFB $20,$40,$C0,$80,$80,$00,$39,$04
 $AEA8 DEFB $04,$08,$10,$FE,$01,$03,$02,$03
 $AEB0 DEFB $07,$05,$07,$FF,$45,$94,$01,$07
 $AEB8 DEFB $01,$01,$02,$01,$FF,$C7,$E7,$97
 $AEC0 DEFB $43,$30,$08,$1E,$3A,$F0,$80,$C0
 $AEC8 DEFB $97,$61,$3F,$FF,$FF,$FE,$FD,$F8
 $AED0 DEFB $F1,$FF,$A0,$01,$43,$63,$CE,$01
 $AED8 DEFB $04,$30,$FF,$A0,$C1,$85,$2B,$4F
 $AEE0 DEFB $1F,$2B,$17,$00,$7F,$01,$05,$0B
 $AEE8 DEFB $07,$0B,$05,$01,$00,$00,$00,$FF
 $AEF0 DEFB $95,$EA,$DD,$FA,$ED,$FA,$FD,$FE
 $AEF8 DEFB $FF,$80,$40,$A0,$50,$A8,$54,$AA
 $AF00 DEFB $54,$01,$01,$FB,$01,$C0,$A4,$80
 $AF08 DEFB $12,$1C,$10,$FE,$E0,$90,$18,$07
 $AF10 DEFB $19,$06,$03,$F8,$0E,$7F,$C0,$42
 $AF18 DEFB $0A,$F8,$E3,$3F,$AA,$55,$22,$F8
 $AF20 DEFB $80,$C0,$E0,$78,$94,$00,$00,$00
 $AF28 DEFB $00,$00,$C0,$10,$38,$3F,$1C,$7C
 $AF30 DEFB $38,$38,$60,$C0,$03,$60,$1F,$03
 $AF38 DEFB $38,$C0,$00,$00,$00,$FF,$FA,$C4
 $AF40 DEFB $E9,$ED,$C4,$C1,$94,$21,$00,$A7
 $AF48 DEFB $1E,$0F,$09,$20,$02,$F7,$C4,$FC
 $AF50 DEFB $80,$01,$03,$02,$20,$BC,$01,$63
 $AF58 DEFB $FE,$88,$48,$FF,$C6,$FD,$F6,$F3
 $AF60 DEFB $CC,$B7,$4A,$DD,$3F,$50,$A8,$50
 $AF68 DEFB $A0,$40,$80,$00,$00,$00,$00,$00
 $AF70 DEFB $00,$03,$28,$14,$1F,$50,$A8,$15
 $AF78 DEFB $02,$01,$FA,$40,$A8,$D5,$F3,$4F
 $AF80 DEFB $0E,$F0,$82,$B9,$3F,$B5,$F3,$98
 $AF88 DEFB $01,$01,$F8,$EF,$5B,$FF,$E7,$3F
 $AF90 DEFB $FE,$F4,$36,$F9,$81,$8A,$F7,$F0
 $AF98 DEFB $D7,$1E,$22,$4A,$0D,$AE,$F7,$7F
 $AFA0 DEFB $3F,$07,$30,$84,$51,$A6,$F8,$C0
 $AFA8 DEFB $FF,$7F,$FE,$FF,$F0,$E0,$FC,$FF
 $AFB0 DEFB $EF,$C0,$FF,$DF,$F0,$03,$7F,$FF
 $AFB8 DEFB $FF,$7F,$C5,$C0,$82,$01,$03,$82
 $AFC0 DEFB $04,$FC,$C0,$70,$44,$7B,$EF,$FF
 $AFC8 DEFB $C0,$C0,$FC,$00,$00,$00,$3F,$FC
 $AFD0 DEFB $FE,$F9,$FB,$F1,$C0,$0F,$80,$28
 $AFD8 DEFB $44,$A8,$00,$00,$0F,$08,$56,$A8
 $AFE0 DEFB $02,$78,$41,$22,$55,$20,$FF,$2F
 $AFE8 DEFB $17,$AF,$5F,$AF,$5F,$2F,$5F,$00
 $AFF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AFF8 DEFB $01,$01,$07,$49,$2A,$01,$07,$D8
 $B000 DEFB $85,$5A,$07,$AA,$54,$A0,$01,$C4
 $B008 DEFB $07,$BF,$07,$01,$3F,$7F,$FF,$BB
 $B010 DEFB $5F,$37,$01,$DF,$08,$18,$10,$C0
 $B018 DEFB $10,$E0,$F8,$00,$00,$00,$00,$00
 $B020 DEFB $0F,$FF,$7F,$3E,$08,$03,$FF,$F1
 $B028 DEFB $07,$FE,$DC,$80,$00,$00,$00,$FF
 $B030 DEFB $40,$4E,$40,$0B,$16,$01,$20,$FC
 $B038 DEFB $FF,$08,$60,$D0,$AC,$5F,$15,$66
 $B040 DEFB $10,$7F,$60,$A6,$C7,$FF,$3F,$1F
 $B048 DEFB $0F,$E3,$C0,$80,$20,$40,$80,$00
 $B050 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B058 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B060 DEFB $03,$7F,$03,$07,$BF,$FD,$7E,$07
 $B068 DEFB $BF,$FC,$60,$01,$E0,$03,$7F,$7F
 $B070 DEFB $0F,$FF,$FF,$0E,$01,$1F,$FF,$FF
 $B078 DEFB $FB,$EF,$3F,$F8,$01,$7F,$FF,$FF
 $B080 DEFB $FF,$1F,$EF,$FF,$FB,$0F,$03,$FC
 $B088 DEFB $15,$03,$0F,$BF,$FF,$FF,$07,$FF
 $B090 DEFB $FE,$E0,$1F,$F7,$FF,$0F,$07,$01
 $B098 DEFB $1F,$7F,$EE,$FF,$FF,$F8,$0F,$FF
 $B0A0 DEFB $DF,$FE,$F0,$00,$00,$00,$00,$47
 $B0A8 DEFB $45,$47,$47,$45,$45,$45,$46,$46
 $B0B0 DEFB $46,$46,$46,$46,$46,$46,$46,$45
 $B0B8 DEFB $45,$41,$41,$41,$41,$41,$41,$41
 $B0C0 DEFB $41,$41,$41,$41,$41,$41,$41,$47
 $B0C8 DEFB $45,$45,$45,$45,$47,$46,$46,$46
 $B0D0 DEFB $70,$46,$46,$45,$45,$41,$41,$41
 $B0D8 DEFB $41,$41,$41,$41,$41,$41,$45,$45
 $B0E0 DEFB $45,$45,$46,$46,$41,$41,$41,$47
 $B0E8 DEFB $47,$47,$47,$47,$47,$46,$70,$70
 $B0F0 DEFB $46,$45,$41,$41,$41,$41,$41,$41
 $B0F8 DEFB $41,$41,$41,$41,$45,$68,$68,$45
 $B100 DEFB $68,$68,$68,$68,$45,$45,$45,$47
 $B108 DEFB $47,$45,$46,$45,$45,$46,$46,$46
 $B110 DEFB $41,$41,$41,$41,$41,$41,$41,$45
 $B118 DEFB $45,$68,$68,$45,$45,$68,$68,$45
 $B120 DEFB $45,$45,$45,$45,$45,$68,$68,$47
 $B128 DEFB $45,$70,$46,$46,$46,$70,$46,$41
 $B130 DEFB $41,$45,$45,$45,$45,$46,$45,$68
 $B138 DEFB $45,$45,$45,$45,$45,$68,$45,$45
 $B140 DEFB $45,$45,$45,$45,$45,$45,$45,$47
 $B148 DEFB $45,$70,$46,$68,$46,$46,$41,$45
 $B150 DEFB $45,$45,$45,$45,$45,$45,$68,$45
 $B158 DEFB $46,$41,$41,$41,$41,$45,$45,$45
 $B160 DEFB $45,$45,$45,$45,$45,$41,$41,$47
 $B168 DEFB $46,$46,$41,$45,$45,$46,$45,$45
 $B170 DEFB $45,$46,$46,$41,$46,$45,$45,$46
 $B178 DEFB $41,$41,$41,$41,$41,$41,$45,$45
 $B180 DEFB $41,$45,$45,$45,$45,$41,$70,$47
 $B188 DEFB $46,$45,$41,$41,$46,$45,$45,$45
 $B190 DEFB $41,$41,$48,$41,$41,$41,$41,$41
 $B198 DEFB $48,$41,$41,$41,$41,$41,$45,$45
 $B1A0 DEFB $41,$45,$45,$41,$46,$46,$70,$47
 $B1A8 DEFB $46,$46,$41,$41,$45,$45,$41,$41
 $B1B0 DEFB $41,$41,$41,$41,$41,$41,$48,$48
 $B1B8 DEFB $41,$41,$41,$41,$41,$45,$45,$45
 $B1C0 DEFB $45,$45,$41,$41,$70,$70,$70,$47
 $B1C8 DEFB $70,$46,$41,$46,$45,$45,$41,$41
 $B1D0 DEFB $41,$41,$41,$41,$41,$41,$41,$41
 $B1D8 DEFB $41,$41,$41,$41,$41,$45,$45,$45
 $B1E0 DEFB $45,$45,$45,$70,$70,$70,$70,$47
 $B1E8 DEFB $46,$70,$45,$46,$45,$45,$45,$41
 $B1F0 DEFB $41,$41,$41,$41,$41,$41,$41,$41
 $B1F8 DEFB $41,$41,$41,$41,$41,$41,$45,$45
 $B200 DEFB $45,$41,$45,$70,$70,$70,$70,$47
 $B208 DEFB $47,$46,$46,$46,$45,$45,$45,$45
 $B210 DEFB $45,$41,$41,$41,$41,$41,$41,$41
 $B218 DEFB $41,$41,$41,$41,$41,$45,$46,$70
 $B220 DEFB $70,$46,$70,$70,$70,$47,$46,$47
 $B228 DEFB $47,$46,$70,$46,$46,$45,$46,$46
 $B230 DEFB $46,$46,$41,$41,$41,$41,$41,$41
 $B238 DEFB $41,$41,$41,$41,$45,$45,$70,$70
 $B240 DEFB $70,$70,$70,$70,$46,$47,$47,$47
 $B248 DEFB $47,$45,$46,$46,$46,$46,$46,$46
 $B250 DEFB $70,$70,$70,$46,$46,$46,$46,$70
 $B258 DEFB $46,$46,$41,$46,$45,$70,$70,$70
 $B260 DEFB $70,$70,$70,$70,$47,$47,$47,$47
 $B268 DEFB $47,$47,$47,$47,$47,$45,$46,$46
 $B270 DEFB $46,$46,$46,$46,$70,$70,$70,$70
 $B278 DEFB $70,$70,$70,$70,$70,$70,$70,$70
 $B280 DEFB $70,$70,$70,$41,$47,$47,$47,$47
 $B288 DEFB $47,$47,$47,$47,$47,$47,$47,$47
 $B290 DEFB $47,$47,$47,$45,$45,$46,$46,$46
 $B298 DEFB $46,$46,$46,$46,$70,$46,$70,$46
 $B2A0 DEFB $46,$46,$46,$47,$47,$47,$47

; Graphics: Treasure
;
; #PUSHS #UDGTABLE
; { =h Treasure }
; { #SIM(start=$BB3B,stop=$BB41,ix=#PC)#SCR$02{$00,$00,$200,$100}(treasure) }
; UDGTABLE# #POPS
@label=Image_Treasure
b$B2A7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B2AF DEFB $00,$00,$80,$07,$C0,$0F,$F0,$60
 $B2B7 DEFB $1F,$E0,$30,$3F,$C0,$FC,$01,$7F
 $B2BF DEFB $82,$02,$02,$02,$FE,$03,$FC,$06
 $B2C7 DEFB $08,$10,$20,$20,$03,$07,$F8,$FF
 $B2CF DEFB $80,$04,$04,$04,$04,$04,$02,$02
 $B2D7 DEFB $00,$00,$0F,$60,$18,$06,$01,$78
 $B2DF DEFB $80,$60,$18,$07,$80,$C0,$00,$00
 $B2E7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B2EF DEFB $00,$00,$00,$00,$00,$F0,$03,$0F
 $B2F7 DEFB $3F,$FF,$0F,$FF,$FF,$FF,$C0,$07
 $B2FF DEFB $FF,$FE,$80,$F9,$FC,$01,$07,$0F
 $B307 DEFB $1F,$3F,$03,$F8,$80,$00,$00,$00
 $B30F DEFB $FF,$04,$04,$05,$05,$09,$09,$08
 $B317 DEFB $10,$0F,$40,$80,$40,$80,$00,$FF
 $B31F DEFB $02,$02,$02,$02,$02,$02,$01,$01
 $B327 DEFB $00,$00,$00,$00,$07,$30,$0C,$03
 $B32F DEFB $78,$C0,$38,$06,$01,$C0,$80,$60
 $B337 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B33F DEFB $00,$00,$80,$01,$F0,$03,$3F,$FF
 $B347 DEFB $FF,$07,$F8,$E0,$C0,$00,$00,$00
 $B34F DEFB $E3,$80,$80,$80,$80,$80,$00,$00
 $B357 DEFB $00,$00,$FF,$10,$10,$10,$20,$20
 $B35F DEFB $20,$20,$40,$00,$00,$3F,$01,$01
 $B367 DEFB $01,$01,$01,$01,$C0,$80,$80,$00
 $B36F DEFB $00,$00,$00,$00,$07,$18,$06,$01
 $B377 DEFB $3C,$C0,$30,$0C,$03,$C0,$C0,$30
 $B37F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B387 DEFB $FF,$07,$0F,$1F,$1F,$3F,$3F,$7F
 $B38F DEFB $7F,$00,$00,$00,$00,$00,$1D,$80
 $B397 DEFB $80,$80,$80,$00,$00,$00,$C0,$01
 $B39F DEFB $01,$3F,$40,$40,$40,$80,$80,$80
 $B3A7 DEFB $00,$C0,$01,$02,$7C,$03,$0C,$10
 $B3AF DEFB $60,$80,$03,$80,$80,$00,$00,$00
 $B3B7 DEFB $00,$00,$00,$00,$FF,$0C,$04,$04
 $B3BF DEFB $04,$04,$04,$02,$02,$00,$00,$00
 $B3C7 DEFB $00,$00,$00,$00,$FF,$01,$01,$03
 $B3CF DEFB $03,$07,$07,$0F,$1F,$00,$00,$00
 $B3D7 DEFB $00,$00,$00,$BC,$80,$80,$80,$80
 $B3DF DEFB $80,$00,$00,$00,$FF,$01,$01,$02
 $B3E7 DEFB $02,$02,$02,$04,$04,$00,$F8,$01
 $B3EF DEFB $06,$08,$30,$C0,$0F,$0C,$30,$40
 $B3F7 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $B3FF DEFB $00,$00,$FF,$02,$02,$02,$02,$02
 $B407 DEFB $02,$02,$02,$00,$00,$00,$00,$00
 $B40F DEFB $00,$C0,$01,$01,$0F,$E0,$C0,$C0
 $B417 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $B41F DEFB $00,$00,$00,$FF,$04,$08,$08,$08
 $B427 DEFB $09,$16,$18,$10,$1F,$01,$06,$18
 $B42F DEFB $60,$80,$00,$00,$00,$00,$00,$00
 $B437 DEFB $00,$00,$00,$00,$00,$FF,$02,$01
 $B43F DEFB $01,$01,$01,$01,$01,$01,$00,$00
 $B447 DEFB $00,$00,$00,$00,$FF,$03,$03,$03
 $B44F DEFB $03,$03,$03,$03,$01,$00,$00,$00
 $B457 DEFB $00,$00,$00,$FF,$FE,$FE,$FC,$F8
 $B45F DEFB $F8,$F8,$F8,$F0,$00,$00,$00,$00
 $B467 DEFB $FF,$10,$20,$20,$20,$40,$40,$40
 $B46F DEFB $40,$00,$00,$00,$00,$00,$00,$00
 $B477 DEFB $00,$00,$00,$00,$00,$07,$01,$01
 $B47F DEFB $01,$F8,$80,$80,$80,$80,$80,$00
 $B487 DEFB $00,$FC,$40,$40,$40,$60,$20,$20
 $B48F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B497 DEFB $00,$FF,$F8,$F8,$F8,$F8,$FC,$FC
 $B49F DEFB $F8,$FC,$00,$00,$00,$F0,$01,$01
 $B4A7 DEFB $01,$02,$0F,$80,$80,$80,$80,$00
 $B4AF DEFB $00,$00,$00,$FC,$01,$01,$03,$03
 $B4B7 DEFB $07,$07,$F6,$1F,$0F,$1F,$1F,$3F
 $B4BF DEFB $3F,$09,$FF,$FF,$09,$FF,$FF,$09
 $B4C7 DEFB $FF,$FF,$F6,$FE,$FC,$F8,$F0,$E0
 $B4CF DEFB $E0,$3E,$80,$80,$C0,$80,$80,$00
 $B4D7 DEFB $FC,$10,$10,$10,$10,$10,$10,$FF
 $B4DF DEFB $80,$80,$80,$80,$80,$80,$40,$40
 $B4E7 DEFB $00,$00,$FF,$20,$20,$20,$30,$30
 $B4EF DEFB $10,$10,$10,$00,$00,$00,$00,$00
 $B4F7 DEFB $00,$00,$00,$00,$3F,$03,$03,$03
 $B4FF DEFB $03,$03,$03,$00,$00,$00,$FF,$02
 $B507 DEFB $02,$02,$04,$04,$04,$04,$08,$00
 $B50F DEFB $00,$00,$00,$C0,$03,$FF,$3F,$F0
 $B517 DEFB $F0,$E0,$E0,$C0,$C0,$83,$80,$80
 $B51F DEFB $FC,$00,$00,$F8,$01,$01,$03,$07
 $B527 DEFB $07,$97,$81,$80,$02,$04,$10,$C3
 $B52F DEFB $80,$80,$80,$80,$00,$FF,$10,$20
 $B537 DEFB $20,$20,$20,$20,$20,$20,$FF,$40
 $B53F DEFB $40,$40,$40,$40,$40,$40,$40,$C0
 $B547 DEFB $02,$04,$00,$FF,$10,$18,$18,$08
 $B54F DEFB $08,$08,$08,$0C,$00,$00,$00,$C0
 $B557 DEFB $80,$80,$00,$00,$00,$00,$00,$00
 $B55F DEFB $00,$00,$00,$FF,$08,$08,$08,$10
 $B567 DEFB $10,$10,$20,$20,$00,$FF,$01,$01
 $B56F DEFB $01,$01,$01,$01,$01,$01,$FE,$C1
 $B577 DEFB $DE,$EF,$CF,$EF,$DF,$EF,$CD,$FF
 $B57F DEFB $F0,$0F,$01,$02,$FF,$01,$42,$AF
 $B587 DEFB $B3,$7C,$03,$F0,$08,$7F,$1E,$E9
 $B58F DEFB $B8,$46,$D9,$E9,$1F,$FD,$FC,$F9
 $B597 DEFB $C6,$95,$67,$EA,$03,$FF,$FC,$01
 $B59F DEFB $FD,$80,$51,$E8,$23,$3F,$3F,$FF
 $B5A7 DEFB $01,$7E,$82,$30,$80,$7B,$E0,$C0
 $B5AF DEFB $10,$42,$10,$04,$01,$20,$03,$1F
 $B5B7 DEFB $07,$FC,$80,$C0,$C0,$E0,$E0,$E0
 $B5BF DEFB $FF,$20,$20,$20,$20,$20,$20,$40
 $B5C7 DEFB $40,$FF,$40,$20,$20,$3F,$20,$20
 $B5CF DEFB $20,$20,$09,$08,$C0,$00,$FF,$0C
 $B5D7 DEFB $0C,$04,$0C,$14,$14,$24,$44,$00
 $B5DF DEFB $00,$00,$FF,$7F,$7F,$7F,$7F,$7F
 $B5E7 DEFB $7F,$7F,$7F,$00,$00,$00,$00,$00
 $B5EF DEFB $00,$00,$00,$00,$7F,$DF,$DF,$BF
 $B5F7 DEFB $BF,$BF,$BF,$7F,$80,$FF,$7F,$FE
 $B5FF DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FF,$20
 $B607 DEFB $10,$20,$10,$20,$20,$40,$20,$FF
 $B60F DEFB $04,$08,$10,$10,$10,$10,$10,$08
 $B617 DEFB $FF,$64,$62,$41,$C1,$C1,$C1,$C1
 $B61F DEFB $02,$00,$01,$07,$FF,$C2,$81,$80
 $B627 DEFB $80,$80,$80,$80,$80,$FF,$0E,$87
 $B62F DEFB $61,$18,$06,$41,$30,$0C,$F8,$90
 $B637 DEFB $E4,$78,$9E,$E7,$00,$00,$EB,$0F
 $B63F DEFB $07,$01,$01,$01,$03,$FF,$40,$40
 $B647 DEFB $40,$40,$40,$40,$40,$40,$FF,$20
 $B64F DEFB $20,$20,$10,$10,$10,$10,$10,$30
 $B657 DEFB $18,$07,$FC,$01,$02,$04,$04,$C8
 $B65F DEFB $30,$FF,$84,$82,$02,$02,$02,$02
 $B667 DEFB $02,$01,$00,$00,$00,$FF,$7F,$7F
 $B66F DEFB $3F,$3F,$3F,$3F,$3F,$3F,$00,$00
 $B677 DEFB $00,$00,$C0,$03,$1F,$1F,$FE,$FF
 $B67F DEFB $FC,$F0,$C0,$01,$FF,$01,$FF,$01
 $B687 DEFB $FF,$01,$80,$00,$FF,$01,$01,$01
 $B68F DEFB $01,$01,$03,$05,$09,$0F,$40,$80
 $B697 DEFB $40,$80,$07,$04,$02,$01,$07,$04
 $B69F DEFB $08,$F0,$00,$00,$FF,$80,$80,$80
 $B6A7 DEFB $80,$80,$80,$80,$80,$01,$03,$FF
 $B6AF DEFB $01,$C1,$35,$0D,$43,$31,$0C,$02
 $B6B7 DEFB $00,$C0,$20,$40,$6F,$07,$07,$02
 $B6BF DEFB $07,$01,$01,$FF,$40,$40,$80,$80
 $B6C7 DEFB $80,$80,$80,$80,$FF,$10,$10,$10
 $B6CF DEFB $10,$10,$10,$08,$08,$00,$00,$3F
 $B6D7 DEFB $01,$01,$01,$01,$01,$01,$C0,$80
 $B6DF DEFB $80,$00,$00,$FF,$1F,$1F,$0F,$0F
 $B6E7 DEFB $07,$03,$03,$01,$00,$00,$E0,$01
 $B6EF DEFB $03,$07,$1F,$FF,$FE,$F8,$E0,$80
 $B6F7 DEFB $01,$80,$00,$00,$00,$C0,$02,$02
 $B6FF DEFB $1E,$0E,$19,$1F,$0E,$1C,$EA,$B5
 $B707 DEFB $40,$07,$14,$50,$A0,$01,$07,$07
 $B70F DEFB $FF,$0F,$03,$0F,$FF,$FF,$FF,$03
 $B717 DEFB $F0,$80,$E0,$FF,$FF,$80,$F0,$FF
 $B71F DEFB $80,$80,$80,$80,$80,$80,$80,$80
 $B727 DEFB $F8,$01,$0F,$7F,$FF,$FF,$07,$FC
 $B72F DEFB $F8,$80,$00,$00,$00,$9D,$80,$80
 $B737 DEFB $80,$80,$80,$FF,$08,$08,$08,$08
 $B73F DEFB $08,$08,$10,$10,$00,$00,$00,$FF
 $B747 DEFB $80,$80,$80,$80,$80,$80,$80,$80
 $B74F DEFB $00,$00,$01,$01,$FC,$80,$80,$C0
 $B757 DEFB $E0,$E0,$F0,$F8,$01,$07,$0F,$1F
 $B75F DEFB $7F,$03,$E0,$C0,$00,$00,$00,$00
 $B767 DEFB $00,$19,$01,$03,$04,$7F,$C0,$C0
 $B76F DEFB $60,$80,$C0,$C0,$20,$00,$FE,$02
 $B777 DEFB $0D,$1E,$29,$50,$61,$A2,$F8,$80
 $B77F DEFB $40,$C0,$C0,$80,$FE,$07,$1A,$3A
 $B787 DEFB $4D,$3B,$09,$06,$FE,$98,$B4,$CA
 $B78F DEFB $FF,$95,$E7,$4F,$F8,$18,$98,$FE
 $B797 DEFB $93,$F6,$80,$3E,$C0,$3C,$64,$00
 $B79F DEFB $00,$00,$00,$00,$00,$7F,$0F,$0F
 $B7A7 DEFB $0F,$1F,$1F,$1F,$07,$80,$FF,$80
 $B7AF DEFB $E0,$00,$FF,$80,$80,$80,$80,$80
 $B7B7 DEFB $80,$80,$80,$00,$00,$00,$0F,$0F
 $B7BF DEFB $07,$03,$01,$F0,$80,$C0,$FC,$FF
 $B7C7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B7CF DEFB $00,$07,$5D,$37,$08,$01,$80,$7F
 $B7D7 DEFB $0F,$17,$26,$3F,$65,$67,$3C,$FF
 $B7DF DEFB $90,$DE,$3D,$EF,$19,$77,$51,$33
 $B7E7 DEFB $EF,$CC,$D6,$C6,$FC,$F8,$9C,$F9
 $B7EF DEFB $C7,$22,$22,$3E,$C0,$21,$DF,$44
 $B7F7 DEFB $7D,$CF,$F8,$0F,$3C,$D8,$DC,$80
 $B7FF DEFB $80,$80,$01,$02,$C0,$E0,$20,$00
 $B807 DEFB $00,$00,$00,$00,$00,$01,$1F,$01
 $B80F DEFB $FF,$7F,$80,$80,$80,$80,$80,$80
 $B817 DEFB $80,$00,$00,$00,$80,$01,$3F,$FC
 $B81F DEFB $F0,$E0,$C0,$C0,$80,$00,$00,$00
 $B827 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B82F DEFB $00,$07,$04,$04,$03,$03,$60,$80
 $B837 DEFB $79,$E1,$70,$D8,$88,$F8,$3D,$78
 $B83F DEFB $0F,$1F,$22,$3C,$01,$01,$01,$C0
 $B847 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B84F DEFB $00,$50,$50,$50,$50,$50,$50,$50
 $B857 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B85F DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B867 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B86F DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B877 DEFB $42,$42,$42,$50,$50,$50,$50,$50
 $B87F DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B887 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B88F DEFB $50,$50,$50,$50,$50,$50,$42,$47
 $B897 DEFB $47,$47,$50,$50,$50,$50,$50,$50
 $B89F DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B8A7 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B8AF DEFB $50,$50,$50,$50,$50,$47,$47,$47
 $B8B7 DEFB $47,$47,$50,$50,$50,$50,$50,$50
 $B8BF DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B8C7 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B8CF DEFB $50,$50,$50,$50,$47,$47,$47,$47
 $B8D7 DEFB $47,$47,$50,$50,$50,$50,$50,$50
 $B8DF DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B8E7 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B8EF DEFB $50,$50,$50,$42,$47,$47,$47,$47
 $B8F7 DEFB $47,$47,$50,$50,$50,$50,$50,$50
 $B8FF DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B907 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B90F DEFB $50,$50,$50,$47,$47,$47,$47,$47
 $B917 DEFB $47,$50,$50,$50,$50,$50,$50,$50
 $B91F DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B927 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $B92F DEFB $50,$50,$50,$47,$47,$47,$47,$47
 $B937 DEFB $47,$50,$50,$50,$50,$50,$50,$50
 $B93F DEFB $50,$50,$50,$50,$45,$68,$68,$68
 $B947 DEFB $45,$50,$50,$50,$50,$50,$50,$50
 $B94F DEFB $50,$50,$50,$47,$47,$47,$47,$47
 $B957 DEFB $47,$42,$50,$50,$50,$50,$50,$50
 $B95F DEFB $50,$50,$50,$42,$68,$68,$68,$68
 $B967 DEFB $45,$50,$50,$50,$50,$50,$50,$50
 $B96F DEFB $50,$50,$50,$42,$47,$47,$47,$47
 $B977 DEFB $47,$47,$50,$50,$50,$50,$50,$50
 $B97F DEFB $45,$68,$68,$68,$45,$68,$45,$45
 $B987 DEFB $45,$42,$50,$50,$50,$50,$50,$50
 $B98F DEFB $50,$50,$50,$50,$47,$47,$47,$47
 $B997 DEFB $47,$47,$50,$50,$50,$42,$50,$42
 $B99F DEFB $68,$68,$68,$68,$68,$48,$48,$41
 $B9A7 DEFB $47,$42,$42,$50,$50,$50,$50,$50
 $B9AF DEFB $50,$50,$50,$50,$47,$47,$47,$47
 $B9B7 DEFB $47,$78,$78,$78,$78,$78,$78,$78
 $B9BF DEFB $68,$68,$68,$68,$68,$48,$48,$48
 $B9C7 DEFB $47,$47,$42,$50,$50,$50,$50,$50
 $B9CF DEFB $50,$50,$50,$50,$47,$47,$47,$78
 $B9D7 DEFB $78,$78,$78,$78,$78,$7A,$78,$78
 $B9DF DEFB $7D,$7D,$7D,$6F,$6F,$48,$4F,$79
 $B9E7 DEFB $78,$78,$7A,$50,$50,$50,$50,$50
 $B9EF DEFB $50,$50,$50,$50,$42,$47,$78,$78
 $B9F7 DEFB $78,$78,$78,$78,$78,$7C,$78,$79
 $B9FF DEFB $79,$7E,$7E,$7E,$7E,$7E,$78,$78
 $BA07 DEFB $78,$78,$78,$78,$7A,$57,$50,$50
 $BA0F DEFB $50,$50,$50,$50,$50,$7A,$78,$78
 $BA17 DEFB $78,$78,$78,$78,$78,$78,$78,$79
 $BA1F DEFB $79,$7E,$7E,$7E,$7E,$7E,$7E,$7E
 $BA27 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $BA2F DEFB $50,$50,$50,$50,$50,$7A,$78,$78
 $BA37 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $BA3F DEFB $78,$78,$7E,$7E,$7E,$7E,$7E,$7E
 $BA47 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $BA4F DEFB $78

; Game Entry Point
;
; Used by the routine at #R$EDD7.
@label=GameEntryPoint
c$BA50 LD HL,$5C6A   ; {#HTML(Set CAPS LOCK on, using bit 3 of *<a
 $BA53 SET 3,(HL)    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C6A.html">FLAGS2</a>).
                     ; }
 $BA55 LD A,$18      ; {Write #N$18 to *#R$BD70.
 $BA57 LD ($BD70),A  ; }
 $BA5A JP $C592      ; Jump to #R$C592.

; Get User Input
;
; Used by the routines at #R$BB59, #R$C00A, #R$EDD7, #R$F246 and #R$FEFA.
;
; O:A The keypress value
@label=GetUserInput
c$BA5D LD A,($5C3B)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3B.html">FLAGS</a>.)
 $BA60 BIT 5,A       ; {Jump back to #R$BA5D until a new key is pressed.
 $BA62 JR Z,$BA5D    ; }
 $BA64 RES 5,A       ; Reset the "new key has been pressed" flag in #REGa.
 $BA66 LD ($5C3B),A  ; #HTML(Write it back to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3B.html">FLAGS</a>.)
; Fetch the keypress.
 $BA69 LD A,($5C08)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C08.html">LAST_K</a>.)
 $BA6C RET           ; Return.

; Clear Screen
;
; Used by the routines at #R$C21E, #R$C26A, #R$EDF2 and #R$F12E.
@label=ClearScreen
c$BA6D CALL $BA96    ; Call #R$BA96.
 $BA70 CALL $0D6B    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0D6B.html">CLS</a>.)
 $BA73 RET           ; Return.

; Clear Lines
@label=ClearLines
c$BA74 CALL $BA96    ; Call #R$BA96.
 $BA77 LD A,($BD70)  ; {#HTML(Clear the number of lines held by *#R$BD70 from
 $BA7A LD B,A        ; the bottom of the screen using <a rel="noopener
 $BA7B CALL $0E44    ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
 $BA7E RET           ; Return.

; Set Default Screen Position
;
; Used by the routines at #R$BABA and #R$C00A.
@label=SetDefaultScreenPosition
c$BA7F CALL $BA96    ; Call #R$BA96.
 $BA82 LD BC,$0321   ; #REGbc=#N($0321,$04,$04).
 $BA85 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $BA88 RET           ; Return.

; Set Screen Position
;
; Used by the routines at #R$C315, #R$EDF2 and #R$F12E.
@label=SetScreenPosition
c$BA89 CALL $BA96    ; Call #R$BA96.
 $BA8C LD A,($BD70)  ; {#REGb=*#R$BD70.
 $BA8F LD B,A        ; }
 $BA90 LD C,$21      ; {#HTML(Call <a rel="noopener nofollow" href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>
 $BA92 CALL $0DD9    ; with column number #N$21.)}
 $BA95 RET           ; Return.

; Switch To Upper Screen
;
; Used by the routines at #R$BA6D, #R$BA74, #R$BA7F, #R$BA89, #R$BAA4, #R$BAE1,
; #R$C00A and #R$C058.
@label=SwitchScreenUpper
c$BA96 PUSH HL       ; {Stash #REGhl, #REGde, #REGbc and #REGaf on the stack.
 $BA97 PUSH DE       ;
 $BA98 PUSH BC       ;
 $BA99 PUSH AF       ; }
 $BA9A LD A,$02      ; {#HTML(Switch to upper screen using <a rel="noopener
 $BA9C CALL $1601    ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1601.html">CHAN_OPEN</a>.)
                     ; }
 $BA9F POP AF        ; {Restore #REGaf, #REGbc, #REGde and #REGhl from the
 $BAA0 POP BC        ; stack.
 $BAA1 POP DE        ;
 $BAA2 POP HL        ; }
 $BAA3 RET           ; Return.

; Print String
;
; Used by the routines at #R$BAB1, #R$BBD4, #R$C041, #R$C26A, #R$C32A, #R$F263
; and #R$F4D4.
; .
; Standard printing loop, which prints the fetched character byte and
; loops until the termination byte is reached (#N$FF).
;
; HL Pointer to string to be printed
@label=PrintString
c$BAA4 CALL $BA96    ; Call #R$BA96.
; Just keep looping and printing the fetched character until the
; termination byte is reached (#N$FF).
@label=PrintString_Loop
*$BAA7 LD A,(HL)     ; Load a character from the string pointer into #REGa.
 $BAA8 INC HL        ; Move the string pointer to the next character.
 $BAA9 CP $FF        ; {Return if the string termination character (#N$FF) has been
 $BAAB RET Z         ; reached.}
 $BAAC CALL $BAC3    ; Call #R$BAC3.
 $BAAF JR $BAA7      ; Jump to #R$BAA7.

; Print String And A Newline
;
; Used by the routines at #R$BB59, #R$BB94, #R$BFEE, #R$BFF5, #R$BFFC, #R$C003,
; #R$C058, #R$C1FF, #R$C26A, #R$C315, #R$C32A, #R$C556, #R$C579, #R$EDD7,
; #R$EDF2, #R$EE74, #R$EE9B, #R$EEA9, #R$EEBB, #R$EECD, #R$EEDF, #R$EEFC,
; #R$EF32, #R$EF54, #R$F03A, #R$F09C, #R$F12E, #R$F246, #R$F8D9 and #R$FB16.
; .
; Shortcut print routine which prints a newline after it's done.
@label=PrintStringAndNewline
c$BAB1 CALL $BAA4    ; Call #R$BAA4.
; Force a newline to be "printed".
 $BAB4 LD A,$0D      ; Load a "newline" character into #REGa (#N$0D).
 $BAB6 CALL $BAC3    ; Call #R$BAC3.
 $BAB9 RET           ; Return.

; Scroll Screen
;
; Used by the routine at #R$BAC3.
; .
; Scrolls the screen up and then resets the print position.
@label=ScrollScreen
c$BABA EXX           ; Switch to the shadow registers.
; Scroll the screen up.
 $BABB CALL $0DFE    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0DFE.html">CL_SC_ALL</a>.)
; Reset the print position.
 $BABE CALL $BA7F    ; Call #R$BA7F.
 $BAC1 EXX           ; Switch back to the normal registers.
 $BAC2 RET           ; Return.

; Print Character
;
; Used by the routines at #R$BAA4, #R$BAB1, #R$BBD4, #R$C00A, #R$C058, #R$C26A
; and #R$EE9B.
;
; A The character to print
@label=PrintCharacter
c$BAC3 PUSH AF       ; Stash the character to print on the stack.
 $BAC4 LD A,($5C89)  ; {#HTML(Jump to #R$BADE if *<a rel="noopener nofollow"
 $BAC7 CP $03        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html#5C89">S_POSN</a>
 $BAC9 JR NZ,$BADE   ; is not equal to #N$03.)}
 $BACB POP AF        ; {Load the character to print into #REGa but keep a copy on the
 $BACC PUSH AF       ; stack.}
 $BACD CP $0D        ; {Jump to #R$BAD6 if this isn't a newline character
 $BACF JR NZ,$BAD6   ; (#N$0D).}
; This is a newline, so scroll the screen up to action it.
 $BAD1 CALL $BABA    ; Call #R$BABA.
 $BAD4 POP AF        ; Clear the character off the stack (as there's nothing to print for
                     ; a newline, just the screen scroll).
 $BAD5 RET           ; Return.
; Check the column position.
@label=CheckColumnPosition
*$BAD6 LD A,($5C88)  ; {#HTML(Call #R$BABA if *<a rel="noopener nofollow"
 $BAD9 CP $01        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html">S_POSN</a>
 $BADB CALL Z,$BABA  ; is equal to #N$01.)}
; Actions printing #REGa to the screen.
@label=PrintCharacterDirect
*$BADE POP AF        ; Restore the character to print from the stack.
 $BADF RST $10       ; #HTML(Print to the screen using <a rel="noopener
                     ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">PRINT_A_1</a>.)
 $BAE0 RET           ; Return.

; Print Room Graphic
;
; Used by the routine at #R$BB3B.
@label=Print_RoomGraphic
c$BAE1 CALL $BA96    ; Call #R$BA96.
 $BAE4 LD BC,$1821   ; #REGbc=#N($1821,$04,$04).
 $BAE7 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
; Reset graphic display area.
 $BAEA LD HL,$5C8F   ; #HTML(Point #REGhl at <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8F.html">ATTR-T</a>
                     ; which holds the current attribute value.)
 $BAED LD A,(HL)     ; Fetch the attribute byte.
 $BAEE AND %00111000 ; Keep only the PAPER bits 3-5.
 $BAF0 RRA           ; {Move the PAPER bits into the INK bits.
 $BAF1 RRA           ;
 $BAF2 RRA           ; }
 $BAF3 LD B,A        ; Store the result in #REGb.
 $BAF4 LD A,(HL)     ; Fetch the attribute byte again.
 $BAF5 AND %11111000 ; Keep everything except the INK bits.
 $BAF7 OR B          ; Combine the two values.
 $BAF8 LD (HL),A     ; #HTML(Write the result back to *<a rel="noopener
                     ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8F.html">ATTR-T</a>.)
 $BAF9 LD BC,$0200   ; Set a byte counter in #REGbc of #N($0200,$04,$04).
@label=Print_RoomGraphic_Loop
*$BAFC PUSH BC       ; Stash the byte counter on the stack.
 $BAFD LD HL,$BD75   ; #REGhl=#R$BD75.
 $BB00 LD B,$08      ; #REGb=#N$08.
 $BB02 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $BB05 INC IX        ; Increment #REGix by one.
 $BB07 JR $BB0A      ; Jump to #R$BB0A.
*$BB09 INC HL        ; Increment #REGhl by one.
*$BB0A SRL C         ; Shift #REGc right.
 $BB0C JR NC,$BB15   ; Jump to #R$BB15 if #REGhl is greater than or equal to
                     ; #REGb.
 $BB0E LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $BB11 INC IX        ; Increment #REGix by one.
 $BB13 JR $BB16      ; Jump to #R$BB16.
*$BB15 XOR A         ; #REGa=#N$00.
*$BB16 LD (HL),A     ; Write #REGa to *#REGhl.
 $BB17 DJNZ $BB09    ; Decrease counter by one and loop back to #R$BB09 until
                     ; counter is zero.
 $BB19 LD DE,$BD75   ; #REGde=#R$BD75.
 $BB1C CALL $0B03    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0B03.html">PO_FETCH</a>.)
 $BB1F CALL $0B7F    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0B24.html#0B7F">PR_ALL</a>.)
 $BB22 CALL $0ADC    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0ADC.html">PO_STORE</a>.)
 $BB25 POP BC        ; Restore the byte counter from the stack.
 $BB26 DEC BC        ; Decrease the byte counter by one.
 $BB27 LD A,C        ; {Jump back to #R$BAFC until the byte counter is zero.
 $BB28 OR B          ;
 $BB29 JR NZ,$BAFC   ; }
 $BB2B CALL $0D4D    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0D4D.html">TEMPS</a>.)
 $BB2E RET           ; Return.

; Colour Room Image
;
; Used by the routine at #R$BB3B.
;
; IX Pointer to the room attribute data
@label=Colour_RoomImage
c$BB2F LD DE,$5800   ; #REGde=#N$5800 (attribute buffer location).
 $BB32 PUSH IX       ; {#REGhl=#REGix (using the stack).
 $BB34 POP HL        ; }
 $BB35 LD BC,$0200   ; {Copy #N($0200,$04,$04) of attribute data from #REGhl to #REGde
 $BB38 LDIR          ; (into the attribute buffer).}
 $BB3A RET           ; Return.

; Print Room Image
;
; Used by the routine at #R$FEFA.
@label=Print_RoomImage
c$BB3B CALL $BAE1    ; Call #R$BAE1.
 $BB3E CALL $BB2F    ; Call #R$BB2F.
 $BB41 RET           ; Return.

; Clear Room Image
;
; Copies a given attribute byte to the #N$0200 bytes where the location
; image attribute bytes are (so clears the area).
;
; A Attribute byte value
@label=ClearRoomImage
c$BB42 LD BC,$0200   ; Set a counter in #REGbc of #N$0200 bytes.
 $BB45 LD HL,$5800   ; Load #N$5800 (the beginning of the attribute buffer)
                     ; into #REGhl.
 $BB48 LD E,A        ; Copy the attribute byte into the #REGe register.
@label=ClearRoomImage_Loop
*$BB49 LD (HL),E     ; Write the byte to the attribute buffer.
 $BB4A INC HL        ; Increment the attribute buffer pointer by one.
 $BB4B DEC BC        ; Decrease the room image byte counter by one.
 $BB4C LD A,B        ; {Jump back to #R$BB49 until the whole room image has
 $BB4D OR C          ; been covered.
 $BB4E JR NZ,$BB49   ; }
 $BB50 RET           ; Return.

; Pause Loop
;
; Used by the routine at #R$C579.
; .
; Pauses a given number of HALT loops.
;
; B Number of HALT commands to use
@label=Pause_Loop
c$BB51 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $BB52 DJNZ $BB51    ; Decrease counter by one and loop back to #R$BB51 until
                     ; counter is zero.
 $BB54 RET           ; Return.

; Fetch Frames
;
; Used by the routines at #R$C17D and #R$C582.
;
; O:A #HTML(The first byte of the <a rel="noopener nofollow"
; .   href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>
; .   variable.)
@label=FetchFrames
c$BB55 LD A,($5C78)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>.)
 $BB58 RET           ; Return.

; Save Game
;
; Used by the routines at #R$F23E and #R$F246.
@label=SaveGame
c$BB59 LD A,($BD32)  ; #REGa=*#R$BD32.
 $BB5C OR A          ; {Jump to #R$BB78 if #REGa is zero.
 $BB5D JR Z,$BB78    ; }
 $BB5F LD B,A        ; #REGb=#REGa.
 $BB60 LD IX,($BD22) ; #REGix=*#R$BD22.
 $BB64 LD DE,$BC99   ; #REGde=#R$BC99.
 $BB67 JR $BB6E      ; Jump to #R$BB6E.
*$BB69 INC IX        ; {Increment #REGix by two.
 $BB6B INC IX        ; }
 $BB6D INC DE        ; Increment #REGde by one.
*$BB6E LD L,(IX+$00) ; #REGl=*#REGix+#N$00.
 $BB71 LD H,(IX+$01) ; #REGh=*#REGix+#N$01.
 $BB74 LD A,(HL)     ; {Write *#REGhl to *#REGde.
 $BB75 LD (DE),A     ; }
 $BB76 DJNZ $BB69    ; Decrease counter by one and loop back to #R$BB69 until
                     ; counter is zero.
; Print "#STR$BE78,$08($b==$FF)".
*$BB78 LD HL,$BE78   ; #REGhl=#R$BE78.
 $BB7B CALL $BAB1    ; Call #R$BAB1.
 $BB7E CALL $BA5D    ; Call #R$BA5D.
 $BB81 LD IX,$BBF0   ; #REGix=#R$BBF0.
 $BB85 LD DE,$0144   ; #REGde=#N($0144,$04,$04).
 $BB88 LD A,$FF      ; Set #REGa to #N$FF which indicates this is a data block.
 $BB8A CALL $04C2    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/04C2.html">SA_BYTES</a>.)
; Print "#STR$BE9A,$08($b==$FF)".
 $BB8D LD HL,$BE9A   ; #REGhl=#R$BE9A.
 $BB90 CALL $BAB1    ; Call #R$BAB1.
 $BB93 RET           ; Return.

; Load From Tape
;
; Used by the routine at #R$F236.
;
; .
;
; Print "#STR$BE57,$08($b==$FF)".
@label=LoadTape
c$BB94 LD HL,$BE57   ; #REGhl=#R$BE57.
 $BB97 CALL $BAB1    ; Call #R$BAB1.
 $BB9A LD IX,$BBF0   ; Load the starting address into #REGix at #R$BBF0.
 $BB9E LD DE,$0144   ; Set the block length in #REGde to #N$0144 bytes.
 $BBA1 LD A,$FF      ; Set #REGa to #N$FF which indicates this is a data block.
 $BBA3 SCF           ; Set the carry flag to indicate this is loading.
 $BBA4 CALL $0556    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0556.html">LD_BYTES</a>.)
 $BBA7 JR C,$BBB0    ; Jump to #R$BBB0 if the carry flag is not set.
; Print "#STR$BE6C,$08($b==$FF)".
 $BBA9 LD HL,$BE6C   ; #REGhl=#R$BE6C.
 $BBAC CALL $BAB1    ; Call #R$BAB1.
 $BBAF RET           ; Return.
@label=LoadTape_Success
*$BBB0 LD A,($BD32)  ; #REGa=*#R$BD32.
 $BBB3 OR A          ; {Return if #REGa is zero.
 $BBB4 RET Z         ; }
 $BBB5 LD B,A        ; #REGb=#REGa.
 $BBB6 LD IX,($BD22) ; #REGix=*#R$BD22.
 $BBBA LD DE,$BC99   ; #REGde=#R$BC99.
 $BBBD JR $BBC4      ; Jump to #R$BBC4.
@label=LoadTape_WriteLoop
*$BBBF INC IX        ; {Increment #REGix by two.
 $BBC1 INC IX        ; }
 $BBC3 INC DE        ; Increment #REGde by one.
@label=LoadTape_Write
*$BBC4 LD L,(IX+$00) ; #REGl=*#REGix+#N$00.
 $BBC7 LD H,(IX+$01) ; #REGh=*#REGix+#N$01.
 $BBCA LD A,(DE)     ; #REGa=*#REGde.
 $BBCB LD (HL),A     ; Write #REGa to *#REGhl.
 $BBCC DJNZ $BBBF    ; Decrease counter by one and loop back to #R$BBBF until
                     ; counter is zero.
 $BBCE LD E,$00      ; #REGe=#N$00.
 $BBD0 CALL $C21E    ; Call #R$C21E.
 $BBD3 RET           ; Return.

; Print Input Prompt
;
; Used by the routine at #R$C00A.
@label=PrintInputPrompt
c$BBD4 LD HL,$5080   ; #REGhl=#N$5080 (screen buffer location).
 $BBD7 LD DE,$0100   ; Set the increment in #REGde for the next screen line.
 $BBDA LD B,$08      ; #REGb=#N$08.
 $BBDC XOR A         ; #REGa=#N$00.
*$BBDD OR (HL)       ; Set the bits from *#REGhl.
 $BBDE ADD HL,DE     ; Move down one line.
 $BBDF DJNZ $BBDD    ; Decrease counter by one and loop back to #R$BBDD until
                     ; counter is zero.
 $BBE1 OR A          ; {Jump to #R$BBE9 if #REGa is zero.
 $BBE2 JR Z,$BBE9    ; }
; Force a newline to be "printed".
 $BBE4 LD A,$0D      ; #REGa=#N$0D.
 $BBE6 CALL $BAC3    ; Call #R$BAC3.
; Print "#STR$BD85,$08($b==$FF)".
@label=PrintPrompt
*$BBE9 LD HL,$BD85   ; #REGhl=#R$BD85.
 $BBEC CALL $BAA4    ; Call #R$BAA4.
 $BBEF RET           ; Return.

; Table: Item Locations
;
; A table where the index is the item ID, and the value is the room it
; resides in (#N$00 for "currently inactive").
; .
; When the item is in the players inventory, the room ID changes to
; #N$01.
@label=Table_ItemLocations
g$BBF0 DEFB $03                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBF1 DEFB $04                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBF2 DEFB $22                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBF3 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBF4 DEFB $07                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBF5 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBF6 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBF7 DEFB $0E                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBF8 DEFB $62                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBF9 DEFB $6A                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBFA DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBFB DEFB $0B                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBFC DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBFD DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBFE DEFB $27                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BBFF DEFB $51                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC00 DEFB $50                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC01 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC02 DEFB $42                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC03 DEFB $47                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC04 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC05 DEFB $43                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC06 DEFB $3D                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC07 DEFB $31                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC08 DEFB $1F                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC09 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC0A DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC0B DEFB $2F                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC0C DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC0D DEFB $62                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC0E DEFB $67                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC0F DEFB $69                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC10 DEFB $1C                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC11 DEFB $6B                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC12 DEFB $51                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC13 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC14 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC15 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC16 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC17 DEFB $51                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC18 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC19 DEFB $30                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC1A DEFB $32                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC1B DEFB $3F                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC1C DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC1D DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC1E DEFB $61                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC1F DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC20 DEFB $62                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC21 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC22 DEFB $6A                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC23 DEFB $15                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC24 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC25 DEFB $31                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC26 DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC27 DEFB $4E                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC28 DEFB $4F                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC29 DEFB $2E                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC2A DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC2B DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC2C DEFB $3E                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC2D DEFB $3F                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC2E DEFB $52                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC2F DEFB $66                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC30 DEFB $68                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC31 DEFB $67                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC32 DEFB $5F                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC33 DEFB $02                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC34 DEFB $30                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC35 DEFB $14                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC36 DEFB $11                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC37 DEFB $12                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC38 DEFB $64                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC39 DEFB $51                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC3A DEFB $00                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC3B DEFB $06                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC3C DEFB $06                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC3D DEFB $6B                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC3E DEFB $6C                             ; Item #N(#PC-$BBF0)
                                            ; #ITEM(#PC-$BBF0) in room
                                            ; #N(#PEEK(#PC)):
                                            ; #ROOM(#PEEK(#PC)).
 $BC3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC4F DEFB $00,$00,$00,$00,$00

; Game Flags
;
; Holds a single byte, where each bit relates to help states as follows:
; #TABLE(default,centre,centre)
; { =h Bit | =h Relating To }
; { #N$01 | Cannibals }
; { #N$02 | Swearing }
; TABLE#
@label=GameFlags_Help
g$BC54 DEFB $00

; Unused
u$BC55 DEFB $00,$00,$00,$00,$00,$00,$00

; Table: Already Seen Room Images
;
; Corresponds to whether the player has already seen the image for the following rooms:
; .
; #TABLE(default,centre,centre)
; { =h Bit | =h Room ID | =h Room Name }
; #FOR$E95D,$E964,,1(n,{ #N(n-$E95D) | #N(#PEEKn) | #ROOM(#PEEKn) })
; TABLE#
; #TABLE(default,centre,centre)
; { =h Bit | =h Room ID | =h Room Name }
; #FOR$E965,$E969,,1(n,{ #N(n-$E965) | #N(#PEEKn) | #ROOM(#PEEKn) })
; #FOR$05,$07,,1(n,{ #Nn | N/A | N/A })
; TABLE#
; .
; Used by the routine at #R$C21E but uses the bit index from #R$E95D.
@label=Table_RoomImagesAlreadySeen
g$BC5C DEFB %00000000
 $BC5D DEFB %00000000

; Data block at BC5E
b$BC5E DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Flags: Turn-Based Event States
;
; Holds a single byte, where each bit relates to a turn-based event as
; follows:
; #TABLE(default,centre,centre)
; { =h Bit | =h Relating To }
; { #N$00 | Crab }
; { #N$01 | Tentacle }
; { #N$02 | Drunk }
; { #N$03 | Lion }
; { #N$04 | Crocodile }
; { #N$05 | Cannibals }
; { #N$06 | Match }
; { #N$07 | Wave }
; TABLE#
; When the bit is set, this starts a turn counter (see #R$BC67).
@label=Flag_TurnBasedEventState
g$BC66 DEFB $00

; Turn-Based Event Counters
;
; .
;
; .
;
; Initialised to #N$06.
@label=Counter_Crab
g$BC67 DEFB $00
; Initialised to #N$05 by #R$EFA7.
@label=Counter_Tentacle
 $BC68 DEFB $00
; Initialised to #N$06.
@label=Counter_Drunk
 $BC69 DEFB $00
; Initialised to #N$07.
@label=Counter_Lion
 $BC6A DEFB $00
; Initialised to #N$0B.
@label=Counter_Crocodile
 $BC6B DEFB $00
; Initialised to #N$09.
@label=Counter_Cannibals
 $BC6C DEFB $00
; Initialised to #N$06.
@label=Counter_Match
 $BC6D DEFB $00
; Initialised to #N$05 by #R$EFFF.
@label=Counter_Wave
 $BC6E DEFB $00

; Flags: Event States
;
; Holds a single byte, where each bit relates to an event as follows:
; #TABLE(default,centre,centre)
; { =h Bit | =h Relating To }
; { #N$00 | Crab }
; { #N$01 | Tentacle }
; { #N$02 | Drunk }
; { #N$03 | Lion }
; { #N$04 | Crocodile }
; { #N$05 | Cannibals }
; { #N$06 | Match }
; { #N$07 | Wave }
; TABLE#
; When the bit is set, this indicates that a turn-based event has started.
@label=Flag_EventState
g$BC6F DEFB $00

; Game status buffer entry at BC70
g$BC70 DEFB $29
 $BC71 DEFB $00
 $BC72 DEFB $00
 $BC73 DEFB $00
 $BC74 DEFB $00
 $BC75 DEFB $00
 $BC76 DEFB $00
 $BC77 DEFB $00

; Table: Scenic Event Locations
;
; A table where the index is the event ID, and the value is the room it
; resides in (#N$00 for "currently inactive"). See #R$BD30 for the count.
@label=Table_ScenicEventLocations
g$BC78 DEFB $02      ; Event #N(#PC-$BC78) in room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $BC79 DEFB $02      ; Event #N(#PC-$BC78) in room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $BC7A DEFB $02      ; Event #N(#PC-$BC78) in room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $BC7B DEFB $02      ; Event #N(#PC-$BC78) in room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $BC7C DEFB $02      ; Event #N(#PC-$BC78) in room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $BC7D DEFB $02      ; Event #N(#PC-$BC78) in room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $BC7E DEFB $02      ; Event #N(#PC-$BC78) in room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $BC7F DEFB $02      ; Event #N(#PC-$BC78) in room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $BC80 DEFB $00      ; Event #N(#PC-$BC78) in room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).

; Game status buffer entry at BC81
g$BC81 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC91 DEFB $00,$00,$00,$00,$00,$00,$00

; Number Of Items In The Players Inventory
;
; The number of items the player is currently holding.
@label=Count_InventoryItems
g$BC98 DEFB $00

; Data block at BC99
b$BC99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCC9 DEFB $00,$00

; Current Room ID
;
; The room the player starts the game in is room #N(#PEEK(#PC)):
; #ROOM(#PEEK(#PC)).
@label=CurrentRoom
g$BCCB DEFB $03      ; Current room ID.

; Table: Scenic Event Rooms
;
; Pointer to the table containing groups of room IDs that an event could
; occur in.
@label=Table_ScenicEventRooms
g$BCCC DEFW $E933    ; Event #N((#PC-$BCCC)/$02).
 $BCCE DEFW $E937    ; Event #N((#PC-$BCCC)/$02).
 $BCD0 DEFW $E93B    ; Event #N((#PC-$BCCC)/$02).
 $BCD2 DEFW $E93F    ; Event #N((#PC-$BCCC)/$02).
 $BCD4 DEFW $E943    ; Event #N((#PC-$BCCC)/$02).
 $BCD6 DEFW $E947    ; Event #N((#PC-$BCCC)/$02).
 $BCD8 DEFW $E94D    ; Event #N((#PC-$BCCC)/$02).
 $BCDA DEFW $E953    ; Event #N((#PC-$BCCC)/$02).
 $BCDC DEFW $E95B    ; Event #N((#PC-$BCCC)/$02).

; Game status buffer entry at BCDE
g$BCDE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCE6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCEE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCF6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCFE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD06 DEFB $00,$00,$00,$00,$00,$00

; Pointer: Vocabulary Table
;
; Pointer to the table containing the game vocabulary.
@label=Pointer_Vocabulary
g$BD0C DEFW $E61D

; Pointer: Turn-Based Events Jump Table
;
; Pointer to the jump table containing turn-based events.
@label=Pointer_TurnBasedEvents_Jump
g$BD0E DEFW $FF86

; Pointer: Room Map Table
;
; Pointer to the table containing the relationships between rooms.
@label=Pointer_RoomMap
g$BD10 DEFW $EB10

; Pointer: Item Description Table
;
; Pointer to the table containing item descriptions.
@label=Pointer_ItemDescriptions
g$BD12 DEFW $D34E

; Pointer: Rooms With Images Table
;
; Pointer to the table containing all the rooms which have an image to
; display.
@label=Pointer_RoomsWithImages
g$BD14 DEFW $E95D

; Pointer: Room Image Jump Table
;
; Pointer to the jump table for displaying an image relating to a room.
@label=Pointer_RoomImage
g$BD16 DEFW $FFA8

; Pointer: Room Description Table
;
; Pointer to the table containing room descriptions.
@label=Pointer_RoomDescriptions
g$BD18 DEFW $D3EC

; Pointer: Item Grouping Table
@label=Pointer_ItemGroupingTable
g$BD1A DEFW $E96A

; Pointer: Object Noun Phrases
@label=Pointer_ObjectNounPhrases
g$BD1C DEFW $D4C6

; Pointer: Object List Table
@label=Pointer_ObjectList
g$BD1E DEFW $E83E

; Pointer: Jump Table
@label=Pointer_JumpTable
g$BD20 DEFW $FF3A

; Pointer: Configurable Exits Table
@label=Pointer_ConfigurableExits
g$BD22 DEFW $ED9E

; Pointer: Scenic Events Jump Table
@label=Pointer_JumpTable_ScenicEvents
g$BD24 DEFW $FF96

; Pointer: Verb Word Tokens Table
@label=Pointer_VerbWordTokens
g$BD26 DEFW $E90D

; Number Of Items
;
; The total number of items in the game.
@label=Count_Items
g$BD28 DEFW $004F

; Number Of Objects
;
; The total number of objects in the game.
@label=Count_Objects
g$BD2A DEFW $0030

; Number Of Verb Tokens
;
; The total number of verb word tokens the game has. See #R$E90D.
@label=Count_VerbTokens
g$BD2C DEFW $0026

; Number Of Rooms With Images
;
; The total number of rooms which have related images in the game.
@label=Count_RoomsWithImages
g$BD2E DEFW $000D

; Number Of Scenic Events
@label=Count_ScenicEvents
g$BD30 DEFW $0009
; The total number of scenic events in the game, see #R$BC78.

; Number Of "Configurable Exits"
@label=Count_ConfigurableExits
g$BD32 DEFW $0013

; Command Buffer
@label=CommandBuffer
g$BD34 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD3C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD44 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD4C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD54 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD5C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD64 DEFB $00,$00

; User Input: Word Tokens
@label=UserInput_Token_1
g$BD66 DEFB $FF
@label=UserInput_Token_2
 $BD67 DEFB $FF
 $BD68 DEFB $FF
 $BD69 DEFB $FF
 $BD6A DEFB $FF
 $BD6B DEFB $FF
 $BD6C DEFB $FF
 $BD6D DEFB $FF
 $BD6E DEFB $FF
 $BD6F DEFB $FF

; Line Number
@label=LineNumber
g$BD70 DEFB $00

; Game status buffer entry at BD71
g$BD71 DEFB $00,$00,$00,$00
 $BD75 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Temporary Storage Table Pointer
@label=TempStore_TablePointer
g$BD7D DEFW $0000

; Temporary Storage Table Index
@label=TempStore_TableIndex
g$BD7F DEFW $0000

; Game status buffer entry at BD81
g$BD81 DEFB $00,$00,$00,$00

; Messaging: "> "
@label=Messaging_Prompt
t$BD85 DEFM "> "     ; "#STR$BD85,$08($b==$FF)".
 $BD87 DEFB $FF      ; Terminator.

; Messaging: "<BS> <BS>"
;
; Used by the routine at #R$C041.
@label=Messaging_BackspaceSpaceBackspace
t$BD88 DEFM $08," ",$08 ; "#STR$BD88,$08($b==$FF)".
 $BD8B DEFB $FF         ; Terminator.

; Messaging: "The "
@label=Messaging_The
t$BD8C DEFM "THE "   ; "#STR$BD8C,$08($b==$FF)".
 $BD90 DEFB $FF      ; Terminator.

; Messaging: "I Don't Understand"
@label=Messaging_IDontUnderstand
t$BD91 DEFM "I don't understand." ; "#STR$BD91,$08($b==$FF)".
 $BDA4 DEFB $FF                   ; Terminator.

; Messaging: "I Don't Know The Word"
@label=Messaging_IDontKnowTheWord
t$BDA5 DEFM "I don't know the word:-" ; "#STR$BDA5,$08($b==$FF)".
 $BDBC DEFB $FF                       ; Terminator.

; Messaging: "Nothing"
@label=Messaging_Nothing
t$BDBD DEFM "nothing." ; "#STR$BDBD,$08($b==$FF)".
 $BDC5 DEFB $FF        ; Terminator.

; Messaging: "You Can See"
@label=Messaging_YouCanSee
t$BDC6 DEFM $0D,"You can see:-" ; "#STR$BDC6,$08($b==$FF)".
 $BDD4 DEFB $FF                 ; Terminator.

; Messaging: "Ampersand "
@label=Messaging_Ampersand
t$BDD5 DEFM " & "    ; "#STR$BDD5,$08($b==$FF)".
 $BDD8 DEFB $FF      ; Terminator.

; Messaging: "There Are Exits"
@label=Messaging_ThereAreExits
t$BDD9 DEFM $0D,"There are exits:-" ; "#STR$BDD9,$08($b==$FF)".
 $BDEB DEFB $FF                     ; Terminator.

; Messaging: "There Is An Exit "
@label=Messaging_ThereIsAnExit
t$BDEC DEFM $0D,"There is an exit " ; "#STR$BDEC,$08($b==$FF)".
 $BDFE DEFB $FF                     ; Terminator.

; Messaging: "North"
@label=Messaging_North
t$BDFF DEFM "North"  ; "#STR$BDFF,$08($b==$FF)".
 $BE04 DEFB $FF      ; Terminator.

; Messaging: "South"
@label=Messaging_South
t$BE05 DEFM "South"  ; "#STR$BE05,$08($b==$FF)".
 $BE0A DEFB $FF      ; Terminator.

; Messaging: "East"
@label=Messaging_East
t$BE0B DEFM "East"   ; "#STR$BE0B,$08($b==$FF)".
 $BE0F DEFB $FF      ; Terminator.

; Messaging: "West"
@label=Messaging_West
t$BE10 DEFM "West"   ; "#STR$BE10,$08($b==$FF)".
 $BE14 DEFB $FF      ; Terminator.

; Messaging: "Up"
@label=Messaging_Up
t$BE15 DEFM "Up"     ; "#STR$BE15,$08($b==$FF)".
 $BE17 DEFB $FF      ; Terminator.

; Messaging: "Down"
@label=Messaging_Down
t$BE18 DEFM "Down"   ; "#STR$BE18,$08($b==$FF)".
 $BE1C DEFB $FF      ; Terminator.

; Messaging: "I Can't See "
@label=Messaging_ICantSee
t$BE1D DEFM "I can't see " ; "#STR$BE1D,$08($b==$FF)".
 $BE29 DEFB $FF            ; Terminator.

; Messaging: " Here"
@label=Messaging_Here
t$BE2A DEFM " here." ; "#STR$BE2A,$08($b==$FF)".
 $BE30 DEFB $FF      ; Terminator.

; Messaging: "You Are Dead"
@label=Messaging_YouAreDead
t$BE31 DEFM "You are dead." ; "#STR$BE31,$08($b==$FF)".
 $BE3E DEFB $FF             ; Terminator.

; Messaging: "Want Another Game? Y/N"
@label=Messaging_WantAnotherGame
t$BE3F DEFM "Want another game? Y/N." ; "#STR$BE3F,$08($b==$FF)".
 $BE56 DEFB $FF                       ; Terminator.

; Messaging: "Loading. Start Tape"
@label=Messaging_LoadingStartTape
t$BE57 DEFM "LOADING. Start tape." ; "#STR$BE57,$08($b==$FF)".
 $BE6B DEFB $FF                    ; Terminator.

; Messaging: "Tape Error"
@label=Messaging_TapeError
t$BE6C DEFM "Tape error." ; "#STR$BE6C,$08($b==$FF)".
 $BE77 DEFB $FF           ; Terminator.

; Messaging: "Saving. Start Tape,Press Any Key"
@label=Messaging_SavingStartTape
t$BE78 DEFM "SAVING.",$0D,"Start tape,press any key." ; "#STR$BE78,$08($b==$FF)".
 $BE99 DEFB $FF                                       ; Terminator.

; Messaging: "Stop Tape.Saving Complete"
@label=Messaging_StopTape
t$BE9A DEFM "Stop tape.Saving complete." ; "#STR$BE9A,$08($b==$FF)".
 $BEB4 DEFB $FF                          ; Terminator.

; Messaging: "Want To Save The Game? Y/N"
@label=Messaging_WantToSaveTheGame
t$BEB5 DEFM "Want to save the game? Y/N." ; "#STR$BEB5,$08($b==$FF)".
 $BED0 DEFB $FF                           ; Terminator.

; Messaging: "Please Be More Specific"
@label=Messaging_PleaseBeMoreSpecific
t$BED1 DEFM "Please be more specific." ; "#STR$BED1,$08($b==$FF)".
 $BEE9 DEFB $FF                        ; Terminator.

; Messaging: "Please Rephrase That"
@label=Messaging_PleaseRephraseThat
t$BEEA DEFM "Please rephrase that." ; "#STR$BEEA,$08($b==$FF)".
 $BEFF DEFB $FF                     ; Terminator.

; Messaging: "You Can't"
@label=Messaging_YouCant
t$BF00 DEFM "You can't." ; "#STR$BF00,$08($b==$FF)".
 $BF0A DEFB $FF          ; Terminator.

; Messaging: "O.K"
@label=Messaging_OK
t$BF0B DEFM "O.K."   ; "#STR$BF0B,$08($b==$FF)".
 $BF0F DEFB $FF      ; Terminator.

; Messaging: "You're Already Carrying "
@label=Messaging_YoureAlreadyCarrying
t$BF10 DEFM "You're already carrying " ; "#STR$BF10,$08($b==$FF)".
 $BF28 DEFB $FF                        ; Terminator.

; Messaging: "Full Stop"
@label=Messaging_FullStop
t$BF29 DEFM "."      ; "#STR$BF29,$08($b==$FF)".
 $BF2A DEFB $FF      ; Terminator.

; Messaging: "It"
@label=Messaging_It
t$BF2B DEFM "it."    ; "#STR$BF2B,$08($b==$FF)".
 $BF2E DEFB $FF      ; Terminator.

; Messaging: "Them"
@label=Messaging_Them
t$BF2F DEFM "them."  ; "#STR$BF2F,$08($b==$FF)".
 $BF34 DEFB $FF      ; Terminator.

; Messaging: "You Can't Carry Any More"
@label=Messaging_YouCantCarryAnyMore
t$BF35 DEFM "You can't carry any more." ; "#STR$BF35,$08($b==$FF)".
 $BF4E DEFB $FF                         ; Terminator.

; Messaging: "You Are Carrying"
@label=Messaging_YouAreCarrying
t$BF4F DEFM "You are carrying:-" ; "#STR$BF4F,$08($b==$FF)".
 $BF61 DEFB $FF                  ; Terminator.

; Messaging: "You Can't Go In That Direction"
@label=Messaging_YouCantGoInThatDirection
t$BF62 DEFM "You can't go in that direction." ; "#STR$BF62,$08($b==$FF)".
 $BF81 DEFB $FF                               ; Terminator.

; Messaging: "One At A Time, Please!"
@label=Messaging_OneAtATimePlease
t$BF82 DEFM "One at a time,please!" ; "#STR$BF82,$08($b==$FF)".
 $BF97 DEFB $FF                     ; Terminator.

; Messaging: "I Don't See The Point"
@label=Messaging_IDontSeeThePoint
t$BF98 DEFM "I don't see the point." ; "#STR$BF98,$08($b==$FF)".
 $BFAE DEFB $FF                      ; Terminator.

; Messaging: "You're Not Carrying "
@label=Messaging_YoureNotCarrying
t$BFAF DEFM "You're not carrying " ; "#STR$BFAF,$08($b==$FF)".
 $BFC3 DEFB $FF                    ; Terminator.

; Messaging: "You're Not Carrying Anything"
@label=Messaging_YoureNotCarryingAnything
t$BFC4 DEFM "You're not carrying anything." ; "#STR$BFC4,$08($b==$FF)".
 $BFE1 DEFB $FF                             ; Terminator.

; Table: Directions
;
; Pointer to the table containing direction messaging.
@label=Table_Directions
g$BFE2 DEFW $BDFF    ; "#STR$BDFF,$08($b==$FF)".
 $BFE4 DEFW $BE05    ; "#STR$BE05,$08($b==$FF)".
 $BFE6 DEFW $BE0B    ; "#STR$BE0B,$08($b==$FF)".
 $BFE8 DEFW $BE10    ; "#STR$BE10,$08($b==$FF)".
 $BFEA DEFW $BE15    ; "#STR$BE15,$08($b==$FF)".
 $BFEC DEFW $BE18    ; "#STR$BE18,$08($b==$FF)".

; Response: "Please Rephrase That"
;
; Used by the routines at #R$C470, #R$C47B, #R$C490 and #R$C49F.
;
; .
;
; Print "#STR$BEEA,$08($b==$FF)".
@label=Response_PleaseRephraseThat
c$BFEE LD HL,$BEEA   ; #REGhl=#R$BEEA.
 $BFF1 CALL $BAB1    ; Call #R$BAB1.
 $BFF4 RET           ; Return.

; Response: "Please Be More Specific"
;
; Used by the routines at #R$C47B, #R$C49F and #R$C4B7.
;
; .
;
; Print "#STR$BED1,$08($b==$FF)".
@label=Response_PleaseBeMoreSpecific
c$BFF5 LD HL,$BED1   ; #REGhl=#R$BED1.
 $BFF8 CALL $BAB1    ; Call #R$BAB1.
 $BFFB RET           ; Return.

; Response: "You Can't"
;
; .
;
; .
;
; Print "#STR$BF00,$08($b==$FF)".
@label=Response_YouCant
c$BFFC LD HL,$BF00   ; #REGhl=#R$BF00.
 $BFFF CALL $BAB1    ; Call #R$BAB1.
 $C002 RET           ; Return.

; Response: "O.K."
;
; .
;
; .
;
; Print "#STR$BF0B,$08($b==$FF)".
@label=Response_OK
c$C003 LD HL,$BF0B   ; #REGhl=#R$BF0B.
 $C006 CALL $BAB1    ; Call #R$BAB1.
 $C009 RET           ; Return.

; Handler: User Input
;
; Used by the routines at #R$C058 and #R$EDC4.
;
; .
;
; Reset the screen position to defaults.
@label=Handler_UserInput
c$C00A CALL $BA7F    ; Call #R$BA7F.
; Clear down the command buffer which will hold the users input.
 $C00D LD HL,$BD34   ; #REGhl=#R$BD34.
 $C010 LD A,$20      ; Store the ASCII code for "SPACE" ("#CHR$20") into #REGa.
 $C012 LD B,$32      ; Set a counter in #REGb for the size of the command buffer (#N$32
                     ; bytes).
; Write "SPACE" #N$32 times wiping the entire command buffer.
@label=EmptyCommandBuffer_Loop
*$C014 LD (HL),A     ; Write #REGa to *#REGhl.
 $C015 INC HL        ; Increment #REGhl by one.
 $C016 DJNZ $C014    ; Decrease the command buffer counter by one and loop back to #R$C014
                     ; until the whole buffer is cleared.
; Now print the prompt icon ">".
 $C018 CALL $BBD4    ; Call #R$BBD4.
; Initialise the command buffer.
 $C01B LD HL,$BD34   ; #REGhl=#R$BD34.
; This entry point is used by the routine at #R$C041.
; .
; Collect the users keypress.
@label=UserInput_Loop
*$C01E CALL $BA5D    ; Call #R$BA5D.
; Check the two valid control keys "DELETE" and "ENTER".
 $C021 CP $0C        ; {Jump to #R$C041 if "DELETE" was pressed.
 $C023 JR Z,$C041    ; }
 $C025 CP $0D        ; {Jump to #R$C058 if "ENTER" was pressed.
 $C027 JR Z,$C058    ; }
 $C029 CP $20        ; {If the keypress was any other control key (the value being under
 $C02B JR C,$C01E    ; #N$20 ASCII "SPACE"), it's not valid input so jump back to #R$C01E.
                     ; }
; Test if the current position in the command buffer is at the end
; (#R$BD34(#N$BD65)) of the buffer.
; For example: #PUSHS #TABLE(default,centre,centre) { =h Position | =h Output }
; #FOR($BD34,$BD65,$07,$04)(x,#SIM(start=$C02D,stop=$C035,hl=x)
; { #Nx | #N({sim[DE]}) })
; TABLE# #POPS
 $C02D EX DE,HL      ; {Jump back to #R$C01E if the input has reached the end of the
 $C02E LD HL,$BD65   ; command buffer (so don't process it).
 $C031 AND A         ;
 $C032 SBC HL,DE     ;
 $C034 EX DE,HL      ;
 $C035 JR Z,$C01E    ; }
; The keypress is valid, so process it and print it to the screen.
 $C037 LD (HL),A     ; Write the keypress into the command buffer at the
                     ; current position.
 $C038 CALL $BA96    ; Call #R$BA96.
 $C03B CALL $BAC3    ; Call #R$BAC3.
 $C03E INC HL        ; Increment the pointer to the command buffer by one.
 $C03F JR $C01E      ; Jump back to #R$C01E.

; Handler: User Pressed "DELETE"
;
; Used by the routine at #R$C00A.
; .
; Handles the user pressing delete.
;
; HL Current position in the command buffer
;
; Test if the current position in the command buffer is at the start
; (#R$BD34(#N$BD34)) of the buffer.
@label=UserInput_Delete
c$C041 EX DE,HL      ; {Jump back to #R$C01E if the user is already at the beginning of the
 $C042 LD HL,$BD34   ; command buffer.
 $C045 AND A         ;
 $C046 SBC HL,DE     ;
 $C048 EX DE,HL      ;
 $C049 JR Z,$C01E    ; }
; Else delete the current character.
 $C04B PUSH HL       ; Stash the pointer to the command buffer on the stack.
; Print "BACKSPACE SPACE BACKSPACE" to move the current print position on
; the screen to the previous character, and to delete the charactr present
; using a space.
 $C04C LD HL,$BD88   ; #REGhl=#R$BD88.
 $C04F CALL $BAA4    ; Call #R$BAA4.
 $C052 POP HL        ; Restore the pointer to the command buffer from the
                     ; stack.
; Now adjust the command buffer pointer to match the new position.
 $C053 DEC HL        ; Decrease the pointer to the command buffer by one.
 $C054 LD (HL),$20   ; Write an ASCII space (#N$20) into the command buffer at the current
                     ; position.
 $C056 JR $C01E      ; Jump to #R$C01E.

; Handler: User Pressed "ENTER"
;
; Used by the routine at #R$C00A.
; .
; Handles the user pressing "ENTER".
;
; HL Current position in the command buffer
; A Which contains #N$0D ("ENTER") at this point.
@label=UserInput_Enter
c$C058 LD (HL),A     ; Write #N$0D to the command buffer pointer for use as a termination
                     ; character.
; Force a newline to be "printed" to the screen.
 $C059 CALL $BA96    ; Call #R$BA96.
 $C05C CALL $BAC3    ; Call #R$BAC3.
; Clear down the word token buffer which will eventually hold the
; tokenised input.
 $C05F LD HL,$BD66   ; #REGhl=#R$BD66.
 $C062 LD A,$FF      ; #REGa=#N$FF.
 $C064 LD B,$0A      ; Set a counter in #REGb for the size of the word token
                     ; buffer (#N$0A bytes).
; Write #N$FF #N$0A times wiping the word token buffer.
@label=EmptyWordTokenBuffer_Loop
*$C066 LD (HL),A     ; Write #REGa to *#REGhl.
 $C067 INC HL        ; Increment #REGhl by one.
 $C068 DJNZ $C066    ; Decrease the word token buffer counter by one and loop back to
                     ; #R$C066 until the whole buffer is cleared.
 $C06A LD HL,$BD34   ; #REGhl=#R$BD34.
 $C06D LD C,$0A      ; #REGc=#N$0A.
; Now begin tokenising the user input.
@label=UserInputParser_Loop
*$C06F LD DE,$BD71   ; #REGde=#R$BD71.
 $C072 LD B,$04      ; #REGb=#N$04.
 $C074 LD A,$20      ; {Write ASCII "SPACE" (#N$20) to *#REGde.
*$C076 LD (DE),A     ; }
 $C077 INC DE        ; Increment #REGde by one.
 $C078 DJNZ $C076    ; Decrease counter by one and loop back to #R$C076 until
                     ; counter is zero.
 $C07A XOR A         ; #REGa=#N$00.
 $C07B OR C          ; Set the bits from #REGc.
 $C07C JP Z,$C16E    ; Jump to #R$C16E if #REGde is equal to #REGc.
 $C07F LD A,(HL)     ; {Jump to #R$C16E if *#REGhl is equal to #N$0D.
 $C080 CP $0D        ;
 $C082 JP Z,$C16E    ; }
 $C085 LD B,$04      ; #REGb=#N$04.
 $C087 LD DE,$BD71   ; #REGde=#R$BD71.
*$C08A LD A,(HL)     ; #REGa=*#REGhl.
 $C08B CP $0D        ; {Jump to #R$C0B6 if #REGa is equal to #N$0D.
 $C08D JR Z,$C0B6    ; }
 $C08F CP $20        ; {Jump to #R$C0AC if #REGa is equal to #N$20.
 $C091 JR Z,$C0AC    ; }
 $C093 CP $2C        ; {Jump to #R$C0AC if #REGa is equal to #N$2C.
 $C095 JR Z,$C0AC    ; }
 $C097 LD (DE),A     ; Write #REGa to *#REGde.
 $C098 INC HL        ; Increment #REGhl by one.
 $C099 INC DE        ; Increment #REGde by one.
 $C09A DJNZ $C08A    ; Decrease counter by one and loop back to #R$C08A until
                     ; counter is zero.
*$C09C LD A,(HL)     ; #REGa=*#REGhl.
 $C09D CP $0D        ; {Jump to #R$C0B6 if #REGa is equal to #N$0D.
 $C09F JR Z,$C0B6    ; }
 $C0A1 CP $20        ; {Jump to #R$C0AC if #REGa is equal to #N$20.
 $C0A3 JR Z,$C0AC    ; }
 $C0A5 CP $2C        ; {Jump to #R$C0AC if #REGa is equal to #N$2C.
 $C0A7 JR Z,$C0AC    ; }
 $C0A9 INC HL        ; Increment #REGhl by one.
 $C0AA JR $C09C      ; Jump to #R$C09C.
*$C0AC INC HL        ; Increment #REGhl by one.
 $C0AD LD A,(HL)     ; #REGa=*#REGhl.
 $C0AE CP $20        ; {Jump to #R$C0AC if #REGa is equal to #N$20.
 $C0B0 JR Z,$C0AC    ; }
 $C0B2 CP $2C        ; {Jump to #R$C0AC if #REGa is equal to #N$2C.
 $C0B4 JR Z,$C0AC    ; }
*$C0B6 PUSH HL       ; {Stash #REGhl, #REGde and #REGbc on the stack.
 $C0B7 PUSH DE       ;
 $C0B8 PUSH BC       ; }
 $C0B9 LD HL,$BD8C   ; #REGhl=#R$BD8C.
 $C0BC LD DE,$BD71   ; #REGde=#R$BD71.
 $C0BF LD B,$04      ; #REGb=#N$04.
*$C0C1 LD A,(DE)     ; {Jump to #R$C0C9 if *#REGde is not equal to *#REGhl.
 $C0C2 CP (HL)       ;
 $C0C3 JR NZ,$C0C9   ; }
 $C0C5 INC DE        ; Increment #REGde by one.
 $C0C6 INC HL        ; Increment #REGhl by one.
 $C0C7 DJNZ $C0C1    ; Decrease counter by one and loop back to #R$C0C1 until
                     ; counter is zero.
*$C0C9 POP BC        ; {Restore #REGbc, #REGde and #REGhl from the stack.
 $C0CA POP DE        ;
 $C0CB POP HL        ; }
 $C0CC JR Z,$C06F    ; Jump to #R$C06F if #REGhl is equal to *#REGhl.
 $C0CE DEC C         ; Decrease #REGc by one.
 $C0CF LD ($BD7D),HL ; Write #REGhl to *#R$BD7D.
 $C0D2 LD ($BD7F),DE ; Write #REGde to *#R$BD7F.
 $C0D6 LD ($BD81),BC ; Write #REGbc to *#R$BD81.
 $C0DA LD HL,($BD0C) ; #REGhl=*#R$BD0C.
 $C0DD LD C,$00      ; #REGc=#N$00.
*$C0DF LD A,(HL)     ; {Jump to #R$C11C if *#REGhl is equal to #N$FF.
 $C0E0 CP $FF        ;
 $C0E2 JR Z,$C11C    ; }
*$C0E4 LD DE,$BD71   ; #REGde=#R$BD71.
 $C0E7 LD B,$04      ; #REGb=#N$04.
*$C0E9 LD A,(DE)     ; {Jump to #R$C10D if *#REGde is not equal to *#REGhl.
 $C0EA CP (HL)       ;
 $C0EB JR NZ,$C10D   ; }
 $C0ED INC DE        ; Increment #REGde by one.
 $C0EE INC HL        ; Increment #REGhl by one.
 $C0EF DJNZ $C0E9    ; Decrease counter by one and loop back to #R$C0E9 until
                     ; counter is zero.
 $C0F1 LD HL,$BD81   ; #REGhl=#R$BD81.
 $C0F4 LD A,$09      ; #REGa=#N$09.
 $C0F6 SUB (HL)      ; #REGa-=*#REGhl.
 $C0F7 LD D,$00      ; #REGd=#N$00.
 $C0F9 LD E,A        ; #REGe=#REGa.
 $C0FA LD HL,$BD66   ; {#REGhl=#R$BD66+#REGde.
 $C0FD ADD HL,DE     ; }
 $C0FE LD (HL),C     ; Write #REGc to *#REGhl.
 $C0FF LD HL,($BD7D) ; #REGhl=*#R$BD7D.
 $C102 LD DE,($BD7F) ; #REGde=*#R$BD7F.
 $C106 LD BC,($BD81) ; #REGbc=*#R$BD81.
 $C10A JP $C06F      ; Jump to #R$C06F.
*$C10D LD E,B        ; #REGe=#REGb.
 $C10E LD D,$00      ; #REGd=#N$00.
 $C110 ADD HL,DE     ; #REGhl+=#REGde.
 $C111 LD A,(HL)     ; #REGa=*#REGhl.
 $C112 CP $2C        ; {Jump to #R$C119 if #REGa is not equal to #N$2C.
 $C114 JR NZ,$C119   ; }
 $C116 INC HL        ; Increment #REGhl by one.
 $C117 JR $C0E4      ; Jump to #R$C0E4.
*$C119 INC C         ; Increment #REGc by one.
 $C11A JR $C0DF      ; Jump to #R$C0DF.
*$C11C LD HL,($BD7D) ; #REGhl=*#R$BD7D.
 $C11F LD DE,($BD7F) ; #REGde=*#R$BD7F.
 $C123 LD BC,($BD81) ; #REGbc=*#R$BD81.
 $C127 LD A,$0A      ; {#REGc=#N$0A-#REGc.
 $C129 SUB C         ;
 $C12A LD C,A        ; }
 $C12B LD HL,$BD34   ; #REGhl=#R$BD34.
*$C12E DEC C         ; Decrease #REGc by one.
 $C12F JR Z,$C149    ; Jump to #R$C149 if #REGc is equal to #N$0A.
*$C131 LD A,(HL)     ; #REGa=*#REGhl.
 $C132 CP $20        ; {Jump to #R$C13D if #REGa is equal to #N$20.
 $C134 JR Z,$C13D    ; }
 $C136 CP $2C        ; {Jump to #R$C13D if #REGa is equal to #N$2C.
 $C138 JR Z,$C13D    ; }
 $C13A INC HL        ; Increment #REGhl by one.
 $C13B JR $C131      ; Jump to #R$C131.
*$C13D INC HL        ; Increment #REGhl by one.
 $C13E LD A,(HL)     ; #REGa=*#REGhl.
 $C13F CP $20        ; {Jump to #R$C13D if #REGa is equal to #N$20.
 $C141 JR Z,$C13D    ; }
 $C143 CP $2C        ; {Jump to #R$C13D if #REGa is equal to #N$2C.
 $C145 JR Z,$C13D    ; }
 $C147 JR $C12E      ; Jump to #R$C12E.
*$C149 PUSH HL       ; Stash #REGhl on the stack.
; Print "#STR$BDA5,$08($b==$FF)".
 $C14A LD HL,$BDA5   ; #REGhl=#R$BDA5.
 $C14D CALL $BAB1    ; Call #R$BAB1.
 $C150 POP HL        ; Restore #REGhl from the stack.
 $C151 LD A,$22      ; {#HTML(Print a double quote character:
 $C153 CALL $BAC3    ; "<code>#CHR$22</code>".)}
*$C156 LD A,(HL)     ; #REGa=*#REGhl.
 $C157 CP $21        ; {Jump to #R$C161 if #REGa is less than #N$21.
 $C159 JR C,$C161    ; }
 $C15B INC HL        ; Increment #REGhl by one.
 $C15C CALL $BAC3    ; Call #R$BAC3.
 $C15F JR $C156      ; Jump to #R$C156.
*$C161 LD A,$22      ; {#HTML(Print a double quote character:
 $C163 CALL $BAC3    ; "<code>#CHR$22</code>".)}
; Print "#STR$BF29,$08($b==$FF)".
 $C166 LD HL,$BF29   ; #REGhl=#R$BF29.
 $C169 CALL $BAB1    ; Call #R$BAB1.
 $C16C JR $C17A      ; Jump to #R$C17A.
*$C16E LD A,($BD66)  ; {Return if *#R$BD66 is not equal to #N$FF.
 $C171 CP $FF        ;
 $C173 RET NZ        ; }
; Print "#STR$BD91,$08($b==$FF)".
 $C174 LD HL,$BD91   ; #REGhl=#R$BD91.
 $C177 CALL $BAB1    ; Call #R$BAB1.
*$C17A JP $C00A      ; Jump to #R$C00A.

; Process Game Events
;
; Used by the routine at #R$EDC4.
; .
; This routine manages two types of in-game events:
; #HTML(<dl><dt>1. Turn-Based Events</dt>
; <dd>These are timer-based hazards that count down with each game turn. When a
; turn counter reaches zero, the associated event handler is called via a jump
; table.</dd>
; <dt>2. Scenic Events</dt>
; <dd>Mostly atmospheric events that randomly appear in different locations to
; add flavor to the game world (like seagulls appearing at the beach).</dd>
; <dd>The routine maintains a table of current locations for each scenic event.
; On each turn, it checks if any scenic event is NOT in the current room, then
; randomly relocates it to one of its valid rooms.</dd>
; <dd>Each scenic event has a predefined group of rooms where the event can
; appear.</dd></dl>)
; The routine ensures that:
; #LIST
; { Multiple turn-based dangers can threaten the player simultaneously }
; { Scenic events don't repeatedly trigger in the same room }
; { The game world feels dynamic with events occurring in different locations }
; LIST#
;
; .
;
; First process the turn-based events (if any are active).
@label=GameEventsProcessor
c$C17D LD A,($BC66)  ; Load *#R$BC66 into #REGa.
 $C180 OR A          ; {Jump to #R$C1AF if no turn-based events are currently
 $C181 JR Z,$C1AF    ; active.}
; One of the events has triggered, find which one.
 $C183 LD C,A        ; Copy the turn-based event flags into #REGc.
 $C184 LD B,$08      ; Set a counter in #REGb for the number of possible turn-based events
                     ; (#N$08).
; Keep shifting the event flags one-by-one to find which bits are set.
@label=GameEventChecker_Loop
*$C186 SRL C         ; Shift #REGc one position left to check the next event
                     ; flag bit.
 $C188 JR NC,$C1AD   ; Jump to #R$C1AD if this event bit isn't set.
; The currently processed turn-based event is active, so process it.
; .
; This is: #R$BC67+(#N$08-the current event counter).
 $C18A LD DE,$0000   ; {Calculate the turn-based event index and store it in
 $C18D LD HL,$BC67   ; #REGhl.
 $C190 LD A,$08      ;
 $C192 SUB B         ;
 $C193 LD E,A        ;
 $C194 ADD HL,DE     ; }
 $C195 DEC (HL)      ; Decrease the turn-based event counter at *#REGhl by one.
 $C196 JR NZ,$C1AD   ; Jump to #R$C1AD if the event turn counter at *#REGhl was still more
                     ; than zero.
; The event turn counter is zero, so activate the event itself.
 $C198 LD IX,($BD0E) ; Load *#R$BD0E into #REGix.
 $C19C SLA E         ; Double the index as this table contains addresses.
 $C19E ADD IX,DE     ; Add this offset to #REGix to point to the current
                     ; handler.
 $C1A0 LD L,(IX+$00) ; {Get the handler address and store it in #REGhl.
 $C1A3 LD H,(IX+$01) ; }
 $C1A6 PUSH BC       ; Stash the bit index and event flag byte on the stack.
 $C1A7 LD DE,$C1AC   ; {Push #R$C1AC onto the stack so that the next return will go on to
 $C1AA PUSH DE       ; continue processing events.}
 $C1AB JP (HL)       ; Jump to the routine pointed to by *#REGhl to action the current
                     ; event.
; Once the event handler has run, this is where the routine will resume.
@label=GameEventChecker_Return
 $C1AC POP BC        ; Restore the event bit index counter and event flag byte from the
                     ; stack.
@label=GameEventChecker_Next
*$C1AD DJNZ $C186    ; Decrease the event bit counter by one and loop back to #R$C186
                     ; until all the event status bits have been processed.
; Process scenic events.
@label=GameScenicEventsProcessor
*$C1AF NOP           ; No operation.
 $C1B0 LD HL,$BC78   ; Load #REGhl with #R$BC78.
 $C1B3 LD A,($BD30)  ; Load *#R$BD30 into #REGa.
 $C1B6 OR A          ; {Jump to #R$C1EF if there are no more scenic events to run (the
 $C1B7 JR Z,$C1EF    ; count is zero).}
 $C1B9 LD B,A        ; Copy *#R$BD30 into #REGb as an event counter for the
                     ; loop.
 $C1BA JR $C1BD      ; Jump to #R$C1BD.
; This is the main scenic event loop.
@label=GameScenicEventChecker_Loop
*$C1BC INC HL        ; Increment the scenic event pointer location by one.
@label=GameScenicEventChecker
*$C1BD LD A,(HL)     ; {Jump to #R$C1ED if the event room is #N$00
 $C1BE OR A          ; (deactivated).
 $C1BF JR Z,$C1ED    ; }
 $C1C1 LD A,($BCCB)  ; {Jump to #R$C1ED if *#R$BCCB is equal to the event room.
 $C1C4 CP (HL)       ;
 $C1C5 JR Z,$C1ED    ; }
 $C1C7 PUSH HL       ; {Stash the scenic event location pointer and event
 $C1C8 PUSH BC       ; counter on the stack.}
; This is: #REGe=*#R$BD30-#REGb.
 $C1C9 LD A,($BD30)  ; {Calculate the index of the currently processed event.
 $C1CC SUB B         ;
 $C1CD LD E,A        ; }
 $C1CE LD IX,$BCCC   ; Load #R$BCCC into #REGix.
; The routine at #R$C1F0 is usually used to fetch an address from the
; given table, but here it's used to move #REGix to point to the index of the
; currently processed event (and this routine will fetch the address itself).
 $C1D2 CALL $C1F0    ; Call #R$C1F0.
 $C1D5 CALL $BB55    ; {Load a random number from #R$BB55 into #REGb.
 $C1D8 LD B,A        ; }
 $C1D9 LD A,$FF      ; Set #REGa to #N$FF (the room group terminator) for the
                     ; comparison.
; The table at #R$BCCC is indexed by event (there are #N$08 entries), but
; each address points to a "group" of room IDs where this event could occur.
; Each set of room IDs for the event is terminated using #N$FF.
@label=GameScenicEvent_FetchRoomGroup
*$C1DB LD L,(IX+$00) ; {Get the room group address pointer and store it in
 $C1DE LD H,(IX+$01) ; #REGhl.}
 $C1E1 JR $C1E4      ; Jump to #R$C1E4.
; Use the random number to select a room from the group - this loops
; through the rooms using #REGb as a counter.
@label=GameScenicEvent_CountRooms_Loop
*$C1E3 INC HL        ; Move to the next room ID in the group.
@label=GameScenicEvent_CountRoomsInGroup
*$C1E4 CP (HL)       ; {Jump to #R$C1DB if the terminator is read from *#REGhl.
 $C1E5 JR Z,$C1DB    ; }
 $C1E7 DJNZ $C1E3    ; Decrease the random counter by one and loop back to #R$C1E3 until
                     ; the counter is zero.
 $C1E9 LD A,(HL)     ; Load the current room ID into #REGa.
 $C1EA POP BC        ; {Restore the event counter and scenic event location
 $C1EB POP HL        ; pointer from the stack.}
 $C1EC LD (HL),A     ; Update the scenic event location with the newly selected
                     ; room.
@label=GameScenicEventChecker_Next
*$C1ED DJNZ $C1BC    ; Decrease the scenic event counter by one and loop back to #R$C1BC
                     ; until all scenic events have been processed.
; All done, now return.
@label=GameEventsProcessor_Return
*$C1EF RET           ; Return.

; Get Table Entry
;
; Used by the routines at #R$C17D, #R$C21E, #R$C315, #R$C32A, #R$C456, #R$C4EB
; and #R$C556.
; .
; Retrieves an address from a table using a given index.
;
;   E Index of item
;   IX Base table address
; O:HL Address from the relevant table entry
; O:IX Address of the table entry
@label=GetTableEntry
c$C1F0 LD D,$00      ; {Multiply the given index by #N$02 and store the result
 $C1F2 SLA E         ; in #REGde.
 $C1F4 RL D          ; }
 $C1F6 ADD IX,DE     ; Add #REGde to the base table address.
 $C1F8 LD L,(IX+$00) ; {Fetch the relevant table address and store it in
 $C1FB LD H,(IX+$01) ; #REGhl.}
 $C1FE RET           ; Return.

; Print Objects
;
; Used by the routines at #R$C26A and #R$F12E.
;
; A #N$01 for inventory items, or room number for room objects
@label=PrintObjects
c$C1FF LD HL,$BBF0   ; #REGhl=#R$BBF0.
 $C202 LD BC,($BD28) ; #REGbc=*#R$BD28.
@label=FindObject_Loop
*$C206 CPIR          ; Search for matching objects.
 $C208 RET NZ        ; Return if no objects were found.
 $C209 PUSH HL       ; Stash the current place in #R$BBF0 on the stack.
 $C20A CALL $C456    ; Call #R$C456.
 $C20D JR Z,$C216    ; Jump to #R$C216 if the object is invalid.
 $C20F PUSH AF       ; {Temporarily stash the object type and object counter on
 $C210 PUSH BC       ; the stack.}
 $C211 CALL $BAB1    ; Call #R$BAB1.
 $C214 POP BC        ; {Restore the object counter and object type from the
 $C215 POP AF        ; stack.}
@label=FindObject_Next
*$C216 LD E,A        ; Temporarily hold the object type in #REGe.
 $C217 POP HL        ; Restore the current place in #R$BBF0 from the stack.
 $C218 LD A,B        ; {Test if all objects have been checked...
 $C219 OR C          ; }
 $C21A LD A,E        ; Restore the object type to #REGa.
 $C21B JR NZ,$C206   ; Jump to #R$C206 until all objects in the table have been
                     ; checked.
 $C21D RET           ; Return.

; Handler: Display Room Image
;
; Used by the routines at #R$BB94, #R$EF54 and #R$F14B.
; .
; Determines if the current room has an image relating to it, and if it
; does - it jumps to the routine to display it.
;
; E #N$01 If the image should be displayed, #N$00 if it should be skipped
;
; The game can also load without any graphics at all, so bail if there's
; nothing needed to do here.
@label=Handler_DisplayRoomImage
c$C21E LD A,($BD2E)  ; {Jump to #R$C26A if *#R$BD2E is set to zero.
 $C221 OR A          ;
 $C222 JR Z,$C26A    ; }
; The version of the game being played DOES have graphics, so continue.
 $C224 LD A,($BCCB)  ; Fetch *#R$BCCB and load it into #REGa.
 $C227 LD HL,($BD14) ; Fetch the address of the table from *#R$BD14.
 $C22A LD BC,($BD2E) ; Fetch the count of the number of rooms in the table from
                     ; *#R$BD2E.
 $C22E CPIR          ; Search to see if the current room ID is in the table.
 $C230 JR NZ,$C26A   ; Jump to #R$C26A if the current room ID does not appear in the
                     ; table.
; The current room does have an image associated with it.
 $C232 LD A,($BD2E)  ; {Calculate the index of the current room in the table.
 $C235 INC C         ;
 $C236 SUB C         ;
 $C237 LD C,A        ; }
; The #REGe register is used as a flag to indicate that the room image
; should not be displayed, e.g. after the player has requested to view their
; inventory and have seen the room image already when they entered the
; location.
 $C238 XOR A         ; {Jump to #R$C258 if #REGe was set to #N$01 (Display the
 $C239 OR E          ; image).
 $C23A JR NZ,$C258   ; }
; The game also maintains a table of "already seen room images" so the
; player doesn't have to view an image for a room they've already been in.
; .
; The player can view it manually by typing "LOOK" (or just "L").
 $C23C LD HL,$BC5C   ; #REGhl=#R$BC5C.
 $C23F LD A,C        ; Copy the room image index into #REGa.
; Only two bytes hold the data for all #N$0C rooms with images so first -
; find the correct byte which references this room.
@label=FindAlreadySeenByte_Loop
*$C240 CP $08        ; {Jump to #R$C249 if the room index is less than #N$08.
 $C242 JR C,$C249    ; }
 $C244 SUB $08       ; Subtract #N$08 (number of bits in a byte) from the room
                     ; index.
 $C246 INC HL        ; Increment the "image already seen" table pointer by one.
 $C247 JR $C240      ; Jump back to #R$C240.
; Now the correct byte has been found, check the appropriate bit.
; .
; Create a mask with a single bit set corresponding to this rooms
; position (0-7) in the byte.
@label=FoundAlreadySeenByte
*$C249 LD B,A        ; Copy the "image already seen" byte into #REGb.
 $C24A INC B         ; Increment #REGb by one to get the correct number of
                     ; shifts.
 $C24B LD D,$00      ; Start with all bits clear in #REGd.
@label=AlreadySeenBitShift_Loop
*$C24D RL D          ; Rotate 1 bit left into position.
 $C24F DJNZ $C24D    ; Decrease the shift counter by one and loop back to #R$C24D until
                     ; the bit is in the correct position.
; Test the bit held in #REGd against the room flag.
 $C251 LD A,(HL)     ; Fetch the current room flag.
 $C252 AND D         ; {If the room image has already been seen ... jump to
 $C253 JR NZ,$C26A   ; #R$C26A.}
; The room image hasn't already been seen, so update the bit to indicate
; that the player will have viewed it for the next time this routine runs.
 $C255 LD A,(HL)     ; {Merge the set room bit with the room flags and write the result
 $C256 OR D          ; back to the room flag byte.
 $C257 LD (HL),A     ; }
; Finally! Display the room image.
@label=DisplayRoomImage
*$C258 PUSH BC       ; Temporarily stash #REGbc on the stack.
 $C259 CALL $BA6D    ; Call #R$BA6D.
 $C25C POP BC        ; Restore #REGbc from the stack.
 $C25D LD IX,($BD16) ; Fetch the address of the table from *#R$BD16.
 $C261 LD E,C        ; Load the location image index into #REGe.
 $C262 CALL $C1F0    ; Call #R$C1F0.
 $C265 LD DE,$C26A   ; {Push #R$C26A onto the stack so that the next return will go on to
 $C268 PUSH DE       ; show the room exits.}
 $C269 JP (HL)       ; Jump to the routine pointed to by *#REGhl to display the room
                     ; image.

; Handler: Display Room Exits
;
; Used by the routine at #R$C21E.
; .
; Handles displaying the exits available for the current room.
@label=Handler_RoomExits
c$C26A CALL $BA6D    ; Call #R$BA6D.
 $C26D LD A,$18      ; {Set up the printing position.
 $C26F CALL $C315    ; }
 $C272 CALL $C302    ; Call #R$C302 which loads #REGhl with the room data
                     ; pointer.
 $C275 LD D,H        ; {Store this in #REGde for later.
 $C276 LD E,L        ; }
; Count the number of exits in the room data.
 $C277 LD B,$06      ; Set an "exits" counter in #REGb of #N$06.
 $C279 LD C,$00      ; Initialise #REGc to #N$00 to count the number of valid
                     ; exits.
 $C27B XOR A         ; Set #REGa to #N$00 which is used just for the
                     ; comparison.
@label=RoomExitsCount_Loop
*$C27C CP (HL)       ; Does this room have an exit?
 $C27D JR Z,$C280    ; Jump to #R$C280 if this room doesn't have an exit for this
                     ; position.
 $C27F INC C         ; Increment the valid exits count by one.
@label=RoomExitsCount_Skip
*$C280 INC HL        ; Move to the next byte of room data.
 $C281 DJNZ $C27C    ; Decrease the exits counter by one and loop back to #R$C27C until
                     ; all the exits have been checked.
; Process the exits count result.
 $C283 OR C          ; {Jump to #R$C2EE if no exits were found.
 $C284 JR Z,$C2EE    ; }
 $C286 LD A,C        ; {Jump to #R$C2AD if more than #N$01 exit was found.
 $C287 CP $01        ;
 $C289 JR NZ,$C2AD   ; }
; Only one exit was found:
; .
; Print "#STR$BDEC,$08($b==$FF)".
 $C28B LD HL,$BDEC   ; #REGhl=#R$BDEC.
 $C28E CALL $BAA4    ; Call #R$BAA4.
 $C291 LD H,D        ; {Retrieve the room data pointer and load it into #REGhl.
 $C292 LD L,E        ; }
 $C293 LD IX,$BFE2   ; Set a pointer in #REGix to #R$BFE2.
 $C297 XOR A         ; Set #REGa to #N$00 which is used just for the
                     ; comparison.
 $C298 JR $C29F      ; Jump to #R$C29F.
; Move both the pointers to the next item of data (increment by two for
; the direction name table pointer as it contains addresses).
@label=RoomCheckForExit_Loop
*$C29A INC HL        ; Move to the next byte of room data.
 $C29B INC IX        ; {Increment the direction name table pointer by two.
 $C29D INC IX        ; }
@label=RoomCheckForExit
*$C29F CP (HL)       ; {Jump to #R$C29A if the current exit isn't a valid exit.
 $C2A0 JR Z,$C29A    ; }
 $C2A2 LD L,(IX+$00) ; {Get the direction name from the direction name table.
 $C2A5 LD H,(IX+$01) ; }
 $C2A8 CALL $BAA4    ; Call #R$BAA4 to print the direction name.
 $C2AB JR $C2E8      ; Jump to #R$C2E8.
; More than one exit was found:
; .
; Print "#STR$BDD9,$08($b==$FF)".
@label=RoomMultipleExits
*$C2AD LD HL,$BDD9   ; #REGhl=#R$BDD9.
 $C2B0 CALL $BAB1    ; Call #R$BAB1.
 $C2B3 LD H,D        ; {Retrieve the room data pointer and load it into #REGhl.
 $C2B4 LD L,E        ; }
 $C2B5 LD IX,$BFE2   ; Set a pointer in #REGix to #R$BFE2.
 $C2B9 XOR A         ; Set #REGa to #N$00 which is used just for the
                     ; comparison.
 $C2BA JR $C2C2      ; Jump to #R$C2C2.
; So as not to corrupt the pointer to the room data (as #REGhl is also
; used when printing), it's temporarily held in #REGde.
@label=RoomExits_Initialise
*$C2BC EX DE,HL      ; Switch back the #REGde and #REGhl registers.
; Move both the pointers to the next item of data (increment by two for
; the direction name table pointer as it contains addresses).
@label=RoomCheckForExits_Loop
*$C2BD INC HL        ; Move to the next byte of room data.
 $C2BE INC IX        ; {Increment the direction name table pointer by two.
 $C2C0 INC IX        ; }
@label=RoomCheckForExits
*$C2C2 CP (HL)       ; {Jump to #R$C2BD if the current exit isn't a valid exit.
 $C2C3 JR Z,$C2BD    ; }
 $C2C5 EX DE,HL      ; Temporarily store the room data pointer in #REGde.
 $C2C6 LD L,(IX+$00) ; {Get the direction name from the direction name table.
 $C2C9 LD H,(IX+$01) ; }
 $C2CC CALL $BAA4    ; Call #R$BAA4 to print the direction name.
 $C2CF DEC C         ; Decrease the valid exits count by one.
 $C2D0 LD A,C        ; {Jump to #R$C2E8 if there are no more exits to process.
 $C2D1 CP $01        ;
 $C2D3 JR C,$C2E8    ; }
 $C2D5 JR Z,$C2DF    ; Jump to #R$C2DF if there is only one exit left to
                     ; process.
; #HTML(Print a comma character: "<code>#CHR$2C</code>".)
 $C2D7 LD A,$2C      ; #REGa=#N$2C.
 $C2D9 CALL $BAC3    ; Call #R$BAC3.
 $C2DC XOR A         ; Reset #REGa back to #N$00 for the comparison.
 $C2DD JR $C2BC      ; Jump back to #R$C2BC to continue processing.
; Print "#STR$BDD5,$08($b==$FF)".
@label=RoomExits_PrintAmpersand
*$C2DF LD HL,$BDD5   ; #REGhl=#R$BDD5.
 $C2E2 CALL $BAA4    ; Call #R$BAA4.
 $C2E5 XOR A         ; Reset #REGa back to #N$00 for the comparison.
 $C2E6 JR $C2BC      ; Jump to #R$C2BC to continue processing.
; Print "#STR$BF29,$08($b==$FF)".
@label=RoomExits_PrintFullStop
*$C2E8 LD HL,$BF29   ; #REGhl=#R$BF29.
 $C2EB CALL $BAB1    ; Call #R$BAB1.
; Are there any objects here?
@label=RoomExits_YouCanSee
*$C2EE LD A,($BCCB)  ; #REGa=*#R$BCCB.
 $C2F1 CALL $C439    ; Call #R$C439.
 $C2F4 RET NZ        ; Return if no objects were found at this location.
; Print "#STR$BDC6,$08($b==$FF)".
 $C2F5 LD HL,$BDC6   ; #REGhl=#R$BDC6.
 $C2F8 CALL $BAB1    ; Call #R$BAB1.
; Print the objects at this location.
 $C2FB LD A,($BCCB)  ; #REGa=*#R$BCCB.
 $C2FE CALL $C1FF    ; Call #R$C1FF.
 $C301 RET           ; Return.

; Get Room Pointer
;
; Used by the routines at #R$C26A and #R$F16B.
;
; O:HL Pointer to the room data
@label=GetRoomPointer
c$C302 LD A,($BCCB)  ; {Load the *#R$BCCB into #REGde.
 $C305 LD E,A        ;
 $C306 LD D,$00      ; }
 $C308 LD H,D        ; {Copy it into #REGhl.
 $C309 LD L,E        ; }
 $C30A ADD HL,DE     ; {Mulitply by #N$06.
 $C30B ADD HL,DE     ;
 $C30C ADD HL,DE     ;
 $C30D ADD HL,DE     ;
 $C30E ADD HL,DE     ; }
 $C30F LD DE,($BD10) ; {Add the result to the base address *#R$BD10, stored in
 $C313 ADD HL,DE     ; #REGhl.}
 $C314 RET           ; Return.

; Print Room Description
;
; Used by the routines at #R$C26A and #R$FEFA.
;
; A Line number to begin printing
@label=Print_RoomDescription
c$C315 LD ($BD70),A  ; Write #REGa to *#R$BD70.
 $C318 CALL $BA89    ; Call #R$BA89.
 $C31B LD A,($BCCB)  ; #REGa=*#R$BCCB.
 $C31E LD IX,($BD18) ; #REGix=*#R$BD18.
 $C322 LD E,A        ; Copy the room number into #REGe.
 $C323 CALL $C1F0    ; Call #R$C1F0.
 $C326 CALL $BAB1    ; Call #R$BAB1.
 $C329 RET           ; Return.

; Action: Examine Item
;
; Used by the routine at #R$C4C7.
;
;   C Item ID
; O:F Carry flag set when the item isn't present
@label=Action_ExamineItem
c$C32A INC BC        ; Increment #REGbc by one.
 $C32B LD A,($BD2A)  ; {#REGe=*#R$BD2A-#REGc.
 $C32E SUB C         ;
 $C32F LD E,A        ; }
 $C330 PUSH DE       ; Stash #REGde on the stack.
 $C331 LD IX,($BD1A) ; #REGix=*#R$BD1A.
 $C335 CALL $C1F0    ; Call #R$C1F0.
 $C338 POP DE        ; Restore #REGde from the stack.
 $C339 JR $C33C      ; Jump to #R$C33C.
@label=ExamineItem_Loop
*$C33B INC HL        ; Increment #REGhl by one.
@label=ExamineItem
*$C33C LD A,(HL)     ; {Jump to #R$C347 if *#REGhl is equal to #N$FF.
 $C33D CP $FF        ;
 $C33F JR Z,$C347    ; }
 $C341 CALL $C35F    ; Call #R$C35F.
 $C344 JR NZ,$C33B   ; Jump to #R$C33B if the item wasn't found.
 $C346 RET           ; Return.
; The item being examined isn't in the room or in the players inventory.
; .
; Print "#STR$BE1D,$08($b==$FF)".
@label=Response_ItemNotHere
*$C347 LD HL,$BE1D   ; #REGhl=#R$BE1D.
 $C34A CALL $BAA4    ; Call #R$BAA4.
; Print the object name.
 $C34D LD IX,($BD1C) ; #REGix=*#R$BD1C.
 $C351 CALL $C1F0    ; Call #R$C1F0.
 $C354 CALL $BAA4    ; Call #R$BAA4.
; Print "#STR$BE2A,$08($b==$FF)".
 $C357 LD HL,$BE2A   ; #REGhl=#R$BE2A.
 $C35A CALL $BAB1    ; Call #R$BAB1.
 $C35D SCF           ; Set the carry flag.
 $C35E RET           ; Return.

; Routine at C35F
;
; Used by the routines at #R$C32A, #R$C401, #R$EE00, #R$EE11, #R$EE40, #R$EE63,
; #R$EF54, #R$F09C, #R$F19D, #R$F263, #R$F4D4, #R$F7D6, #R$FA3C, #R$FAA8,
; #R$FB16, #R$FBA8, #R$FBD5, #R$FC24, #R$FC98 and #R$FCCD.
;
; A Object ID
; F Z flag set if the object is available
@label=Handler_Objects
c$C35F PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $C360 PUSH DE       ; }
 $C361 LD E,A        ; {Store the object ID in #REGde.
 $C362 LD D,$00      ; }
 $C364 BIT 7,E       ; {Jump to #R$C36D if this is a scenic object.
 $C366 JR NZ,$C36D   ; }
; Else check the regular objects.
 $C368 LD HL,$BBF0   ; #REGhl=#R$BBF0.
 $C36B JR $C372      ; Jump to #R$C372.
; Prepare object ID for use.
@label=Objects_UseScenicTable
*$C36D RES 7,E       ; Clear the scenic flag.
 $C36F LD HL,$BC78   ; #REGhl=#R$BC78.
; Both object types continue from here.
@label=Objects_CheckLocation
*$C372 ADD HL,DE     ; Add the object ID to the object/ event locations table.
 $C373 LD A,($BCCB)  ; {Jump to #R$C37C if the object/ event table states that it's located
 $C376 CP (HL)       ; in *#R$BCCB(the current room). Note also sets/ unsets the Z flag accordingly.
 $C377 JR Z,$C37C    ; }
; Check the players inventory, as an object can still be used if it's
; being held.
 $C379 LD A,$01      ; {Lastly, set the Z flag if the item is in the players
 $C37B CP (HL)       ; inventory.}
; Housekeeping; restore #REGde and #REGhl to their previous values.
@label=Handler_Objects_Return
*$C37C POP DE        ; {Restore #REGde and #REGhl from the stack.
 $C37D POP HL        ; }
 $C37E RET           ; Return.

; Match Phrase Tokens
;
; Used by the routines at #R$F19D, #R$F263, #R$F481, #R$F4D4, #R$F7AB, #R$F7D6,
; #R$F851, #R$F8D9, #R$F91B, #R$F946, #R$F999, #R$F9E4, #R$FA3C, #R$FAA8,
; #R$FB16, #R$FB71, #R$FBA8, #R$FBD5, #R$FC24, #R$FC61, #R$FC98, #R$FCCD and
; #R$FD02.
;
; HL A pointer to phrase token data
@label=MatchPhraseTokens
c$C37F EX DE,HL      ; Switch the phrase token pointer to #REGde.
 $C380 JR $C383      ; Jump to #R$C383.
@label=MatchPhraseTokens_Loop
*$C382 INC DE        ; Increment the phrase token pointer by one.
*$C383 LD HL,$BD67   ; #REGhl=#R$BD67.
 $C386 JR $C38A      ; Jump to #R$C38A.
*$C388 INC HL        ; Increment #REGhl by one.
 $C389 INC DE        ; Increment #REGde by one.
*$C38A LD A,(DE)     ; #REGa=*#REGde.
 $C38B CP (HL)       ; {Jump to #R$C388 if #REGa is equal to *#REGhl.
 $C38C JR Z,$C388    ; }
 $C38E CP $FE        ; {Jump to #R$C396 if #REGa is not equal to #N$FE.
 $C390 JR NZ,$C396   ; }
 $C392 LD A,(HL)     ; {Compare *#REGhl with #N$FF.
 $C393 CP $FF        ; }
 $C395 RET           ; Return.
*$C396 CP $FD        ; {Jump to #R$C3A0 if #REGa is not equal to #N$FD.
 $C398 JR NZ,$C3A0   ; }
 $C39A LD A,(HL)     ; {Jump to #R$C382 if *#REGhl is not equal to #N$FF.
 $C39B CP $FF        ;
 $C39D JR NZ,$C382   ; }
 $C39F RET           ; Return.
*$C3A0 INC DE        ; Increment #REGde by one.
 $C3A1 LD A,(DE)     ; #REGa=*#REGde.
 $C3A2 CP $FE        ; {Jump to #R$C3AC if the terminator has been reached
 $C3A4 JR Z,$C3AC    ; (#N$FE).}
 $C3A6 CP $FD        ; {Jump to #R$C3A0 if #REGa is not equal to #N$FD.
 $C3A8 JR NZ,$C3A0   ; }
 $C3AA JR $C382      ; Jump to #R$C382.
@label=MatchPhraseTokens_Return
*$C3AC OR A          ; Set the bits from #REGa.
 $C3AD RET           ; Return.

; Parser: Count Item References
;
; Used by the routines at #R$C47B, #R$C490, #R$C4B7 and #R$FB16.
; .
; Count how many tokens in the user input refer to game items.
;
; A The number of references to items in the user input tokens
; F
@label=Parser_CountItems
c$C3AE LD HL,$BD66   ; Set a pointer to #R$BD66 in #REGhl.
 $C3B1 LD B,$0A      ; Set a token count in #REGb of #N$0A which is the total length of
                     ; the user input tokens.
 $C3B3 LD E,$00      ; Initialise the item counter held in #REGe to #N$00.
@label=Parser_CountItems_Loop
*$C3B5 LD A,(HL)     ; Fetch a user input token.
 $C3B6 CP $FF        ; {Jump to #R$C3CD if the terminator character (#N$FF) has been
 $C3B8 JR Z,$C3CD    ; reached.}
 $C3BA PUSH HL       ; {Stash the token pointer and token counter on the stack.
 $C3BB PUSH BC       ; }
 $C3BC LD HL,($BD1E) ; #REGhl=*#R$BD1E.
 $C3BF LD BC,($BD2A) ; #REGbc=*#R$BD2A.
 $C3C3 CPIR          ; CPIR.
 $C3C5 POP BC        ; {Restore the token counter and token pointer from the
 $C3C6 POP HL        ; stack.}
 $C3C7 JR NZ,$C3CA   ; Jump to #R$C3CA if this token doesn't refer to a game
                     ; item.
; This token does point to a game item, so increase the item counter.
 $C3C9 INC E         ; Increment item counter by one.
@label=Parser_CountItems_Skip
*$C3CA INC HL        ; Move to the next token.
 $C3CB DJNZ $C3B5    ; Decrease the token counter by one and loop back to #R$C3B5 until
                     ; all the tokens have been evaluated.
@label=Parser_CountItems_Process
*$C3CD XOR A         ; {Transfer the item count into #REGa and set flags
 $C3CE OR E          ; accordingly.}
 $C3CF RET           ; Return.

; Object/ Event Locator
;
; Used by the routines at #R$C3E4 and #R$C426.
;
;   A Object/ event ID
; O:A Room ID where the object is located
@label=ObjectEventLocator
c$C3D0 LD E,A        ; {Load the event ID into #REGde.
 $C3D1 LD D,$00      ; }
 $C3D3 BIT 7,A       ; {Jump to #R$C3DC if this is a scenic object/ event.
 $C3D5 JR NZ,$C3DC   ; }
 $C3D7 LD HL,$BBF0   ; #REGhl=#R$BBF0.
 $C3DA JR $C3E1      ; Jump to #R$C3E1.
@label=ObjectEventLocator_ScenicEvents
*$C3DC LD HL,$BC78   ; #REGhl=#R$BC78.
; Prepare object/ event ID for use.
 $C3DF RES 7,E       ; Clear the scenic flag.
@label=ObjectEventLocator_Return
*$C3E1 ADD HL,DE     ; Add the event ID to the event locations table.
 $C3E2 LD A,(HL)     ; #REGa=*#REGhl.
 $C3E3 RET           ; Return.

; Is Object In Inventory?
;
; Used by the routines at #R$EE74, #R$F263, #R$F4D4, #R$F851, #R$F91B, #R$F999,
; #R$F9E4, #R$FBD5, #R$FC24 and #R$FCCD.
;
;   A Object ID
; O:F Z flag set if object is in the players inventory
;
; The #R$C3D0 routine returns with #REGa containing the room ID of the
; requested object.
@label=CheckObjectInInventory
c$C3E4 CALL $C3D0    ; Call #R$C3D0.
 $C3E7 CP $01        ; Compare #REGa with #N$01 (inventory).
 $C3E9 RET           ; Return.

; Handler: Destroy Item/ Event
;
; Used by the routines at #R$EE74, #R$EEA9, #R$EEBB, #R$EECD, #R$EEFC, #R$EF32,
; #R$F263, #R$F4D4, #R$F7D6, #R$F851, #R$F999 and #R$FB16.
; .
; Updates a given item/ event ID so it's then "inactive" (has a location
; ID of #N$00).
;
; A Item/ event ID
@label=Handler_DestroyItemEvent
c$C3EA LD B,A        ; Load the item/ event ID into #REGb.
 $C3EB LD C,$00      ; Set the room ID to #N$00 which will deactivate the item/
                     ; event.
 $C3ED CALL $C412    ; Call #R$C412.
 $C3F0 RET           ; Return.

; Handler: Update Item/ Event For The Current Room
;
; Used by the routines at #R$C520 and #R$FC98.
; .
; Updates a given item/ event ID so it appears in the current room. Used
; for example, when an item is dropped (so it changes from being #N$01 - in the
; players inventory, to the current room ID).
;
; A Item/ event ID
@label=Handler_UpdateItemEventCurrentRoom
c$C3F1 LD B,A        ; Load the item/ event ID into #REGb.
 $C3F2 LD A,($BCCB)  ; {Load #REGc with *#R$BCCB.
 $C3F5 LD C,A        ; }
 $C3F6 CALL $C412    ; Call #R$C412.
 $C3F9 RET           ; Return.

; Set Scenic Event As Triggered
;
; Used by the routine at #R$F263.
;
; A Scenic event ID (+#N$80)
@label=ScenicEventTriggered
c$C3FA LD B,A        ; Copy the scenic event ID into #REGb.
 $C3FB LD C,$FF      ; Set #REGc to #N$FF which denotes that the event has fired already
                     ; and shouldn't be repeated.
 $C3FD CALL $C412    ; Call #R$C412.
 $C400 RET           ; Return.

; Check Active Scenic Events
;
; Used by the routines at #R$EE51, #R$EF54, #R$F09C, #R$F19D, #R$F263, #R$F4D4,
; #R$F851, #R$F999, #R$F9E4, #R$FA3C and #R$FAA8.
@label=CheckActiveScenicEvents
c$C401 JR $C404      ; Jump to #R$C404.
@label=ActiveScenicEvents_Loop
*$C403 INC HL        ; Move to the next event ID.
@label=ActiveScenicEvents_CheckNext
*$C404 LD A,(HL)     ; {Jump to #R$C410 if *#REGhl is equal to #N$FF.
 $C405 CP $FF        ;
 $C407 JR Z,$C410    ; }
 $C409 CALL $C35F    ; Call #R$C35F.
 $C40C JR NZ,$C403   ; Jump to #R$C403 if the zero flag is not set.
 $C40E LD A,(HL)     ; #REGa=*#REGhl.
 $C40F RET           ; Return.
@label=NoActiveScenicEvents
*$C410 AND A         ; Set Z flag.
 $C411 RET           ; Return.

; Handler: Update Object Location
;
; Used by the routines at #R$C3EA, #R$C3F1, #R$C3FA, #R$C426, #R$EF54, #R$F263,
; #R$F4D4 and #R$F7D6.
;
; B Object/ event ID
; C Room ID for the update (can also be #N$00)
@label=Handler_UpdateObjectLocation
c$C412 BIT 7,B       ; {Jump to #R$C41D if this is a normal object/ event.
 $C414 JR Z,$C41D    ; }
; Handle non-scenic events.
; .
; Prepare object/ event ID for use.
 $C416 RES 7,B       ; Clear the scenic flag.
 $C418 LD HL,$BC78   ; #REGhl=#R$BC78.
 $C41B JR $C420      ; Jump to #R$C420.
; Handle non-scenic events.
@label=UpdateObjectLocation_NonScenic
*$C41D LD HL,$BBF0   ; #REGhl=#R$BBF0.
; Both object/ event types continue from here.
@label=UpdateObjectLocation
*$C420 LD D,$00      ; {Load the event ID into #REGde.
 $C422 LD E,B        ; }
 $C423 ADD HL,DE     ; Add the event ID to the event locations table.
 $C424 LD (HL),C     ; Update the table with the new room ID in #REGc.
 $C425 RET           ; Return.

; Transform Item
;
; Used by the routines at #R$F19D, #R$F263, #R$F4D4, #R$F7D6, #R$F8D9, #R$F9E4,
; #R$FA3C, #R$FAA8, #R$FB16, #R$FBA8, #R$FBD5, #R$FC24 and #R$FCCD.
; .
; Rather than use item properties, the game just has separate objects
; that don't exist until an action is performed.
; .
; An example is:
; #TABLE(default,centre,centre)
; { =h Item ID | =h Item Name }
; { #N$02 | #ITEM$02 }
; { #N$03 | #ITEM$03 }
; TABLE#
; When the match is lit by the player; item #N$02 is destroyed and replaced
; with item #N$03.
;
; B From item ID
; C To item ID
@label=TransformItem
c$C426 LD A,B        ; #REGa=#REGb.
 $C427 CALL $C3D0    ; Call #R$C3D0.
 $C42A PUSH BC       ; {Stash #REGbc and #REGaf on the stack.
 $C42B PUSH AF       ; }
 $C42C LD C,$00      ; #REGc=#N$00.
 $C42E CALL $C412    ; Call #R$C412.
 $C431 POP AF        ; {Restore #REGaf and #REGbc from the stack.
 $C432 POP BC        ; }
 $C433 LD B,C        ; #REGb=#REGc.
 $C434 LD C,A        ; #REGc=#REGa.
 $C435 CALL $C412    ; Call #R$C412.
 $C438 RET           ; Return.

; Check Room Objects
;
; Used by the routine at #R$C26A.
;
;   A Room number
; O:A #N$00 or #N$01 if objects are found or not
@label=CheckRoomObjects
c$C439 LD HL,$BBF0   ; #REGhl=#R$BBF0.
 $C43C LD BC,($BD28) ; #REGbc=*#R$BD28.
@label=CheckRoomObjects_Loop
*$C440 CPIR          ; Search for the room number in the table.
 $C442 RET NZ        ; Return if no objects are found.
 $C443 PUSH HL       ; Stash the object location table pointer on the stack.
 $C444 CALL $C456    ; Call #R$C456.
 $C447 POP HL        ; Restore the object location table pointer from the
                     ; stack.
 $C448 JR NZ,$C454   ; Jump to #R$C454 if there are no objects found here.
 $C44A LD E,A        ; Temporarily store #REGa in #REGe.
 $C44B LD A,B        ; {Are there more objects to check?
 $C44C OR C          ; }
 $C44D LD A,E        ; Restore the #REGa register.
 $C44E JR NZ,$C440   ; Jump to #R$C440 if there are more objects to check.
; Set the "successful" output.
 $C450 LD A,$01      ; Set #REGa to #N$01 to indicate that objects were found.
 $C452 AND A         ; Set flags.
 $C453 RET           ; Return.
; Set the "failure" output.
@label=NoRoomObjectsFound
*$C454 XOR A         ; Set #REGa to #N$00 to indicate that no objects were
                     ; found.
 $C455 RET           ; Return.

; Validate Object
;
; Used by the routines at #R$C1FF and #R$C439.
;
;   BC Object counter
; O:F Z is unset if the object is valid, unset when invalid
@label=ValidateObject
c$C456 PUSH AF       ; {Stash #REGaf and #REGbc on the stack.
 $C457 PUSH BC       ; }
 $C458 INC BC        ; Adjust the object counter.
 $C459 LD A,($BD28)  ; #REGa=*#R$BD28.
 $C45C SUB C         ; {Calculate the index and store the result in #REGe.
 $C45D LD E,A        ; }
 $C45E LD IX,($BD12) ; #REGix=*#R$BD12.
 $C462 CALL $C1F0    ; Call #R$C1F0.
 $C465 POP BC        ; Restore the object counter from the stack.
 $C466 LD A,H        ; {Jump to #R$C46D if the object is invalid.
 $C467 OR L          ;
 $C468 JR Z,$C46D    ; }
 $C46A POP AF        ; Restore the object type from the stack.
 $C46B AND A         ; Clear the Z flag.
 $C46C RET           ; Return.
@label=InvalidObject
*$C46D POP AF        ; Restore #REGaf from the stack.
 $C46E CP A          ; Set the Z flag.
 $C46F RET           ; Return.

; Parser: Validate No Direct Object
;
; Used by the routines at #R$F09C, #R$F12E, #R$F14B, #R$F16B, #R$F236, #R$F23E
; and #R$F246.
; .
; The opposite of #R$C47B, checks that there's no direct object.
;
; O:F The zero flag is set when there's no direct object present
; O:F The carry flag is set when there's a second token set
@label=Parser_ValidateNoDirectObject
c$C470 LD A,($BD67)  ; {Return if the second token (*#R$BD67) is the terminator
 $C473 CP $FF        ; character (#N$FF).
 $C475 RET Z         ; }
; Print "#STR$BEEA,$08($b==$FF)".
 $C476 CALL $BFEE    ; Call #R$BFEE.
 $C479 SCF           ; Set the carry flag to indicate the command is malformed.
 $C47A RET           ; Return.

; Parser: Validate Direct Object
;
; Used by the routines at #R$C49F, #R$F19D, #R$F263, #R$F481, #R$F4D4, #R$F91B,
; #R$F946, #R$F999, #R$F9E4, #R$FA3C, #R$FAA8, #R$FB83, #R$FBA8, #R$FBD5,
; #R$FC24, #R$FC61, #R$FC98, #R$FCCD and #R$FD6D.
; .
; In most adventure games, the structure for a command is "verb + direct
; object". This is usually how the player interacts with the game world.
; The verb describes the action, and the direct object is what the action is
; performed on. For example; "TAKE SHOE" uses the verb "TAKE" on the direct
; object "SHOE".
;
; O:F The carry flag is set when the command is malformed
;
; The first token is the verb, so target the second token for the direct
; object.
@label=Parser_ValidateDirectObject
c$C47B LD A,($BD67)  ; Fetch the #R$BD67(second token from the user input) and store it in
                     ; #REGa.
 $C47E CP $FF        ; {Jump forward to #R$C487 if the token is anything other than the
 $C480 JR NZ,$C487   ; terminator character (#N$FF).}
; The token was the terminator character (#N$FF), so the sentence is
; malformed.
; .
; E.g. They tried "TAKE" but didn't write anything after it.
 $C482 CALL $BFF5    ; Call #R$BFF5.
 $C485 SCF           ; Set the carry flag to indicate this call was a failure.
 $C486 RET           ; Return.
; Process the direct object.
@label=DirectObject_Process
*$C487 CALL $C3AE    ; Call #R$C3AE.
 $C48A RET NZ        ; Return if #REGa is not equal to #N$FF.
 $C48B CALL $BFEE    ; Call #R$BFEE.
 $C48E SCF           ; Set the carry flag to indicate the command is malformed.
 $C48F RET           ; Return.

; Routine at C490
c$C490 LD A,($BD67)  ; #REGa=*#R$BD67.
 $C493 CP $FF        ; {Return if #REGa is equal to #N$FF.
 $C495 RET Z         ; }
 $C496 CALL $C3AE    ; Call #R$C3AE.
 $C499 RET NZ        ; Return if #REGa is not equal to #N$FF.
 $C49A CALL $BFEE    ; Call #R$BFEE.
 $C49D SCF           ; Set the carry flag.
 $C49E RET           ; Return.

; Routine at C49F
;
; Used by the routines at #R$F7AB, #R$F7D6, #R$F851 and #R$FB71.
c$C49F CALL $C47B    ; Call #R$C47B.
 $C4A2 RET C         ; Return if the direct object is malformed.
 $C4A3 CP $01        ; {Jump to #R$C4AC if #REGa is not equal to #N$01.
 $C4A5 JR NZ,$C4AC   ; }
 $C4A7 CALL $BFF5    ; Call #R$BFF5.
 $C4AA SCF           ; Set the carry flag.
 $C4AB RET           ; Return.
*$C4AC CP $03        ; {Jump to #R$C4B2 if #REGa is greater than or equal to
 $C4AE JR NC,$C4B2   ; #N$03.}
 $C4B0 AND A         ; Set flags.
 $C4B1 RET           ; Return.
*$C4B2 CALL $BFEE    ; Call #R$BFEE.
 $C4B5 SCF           ; Set the carry flag.
 $C4B6 RET           ; Return.

; Routine at C4B7
;
; Used by the routine at #R$FD02.
c$C4B7 LD A,($BD67)  ; #REGa=*#R$BD67.
 $C4BA CP $FF        ; {Jump to #R$C4C3 if #REGa is not equal to #N$FF.
 $C4BC JR NZ,$C4C3   ; }
 $C4BE CALL $BFF5    ; Call #R$BFF5.
 $C4C1 SCF           ; Set the carry flag.
 $C4C2 RET           ; Return.
*$C4C3 CALL $C3AE    ; Call #R$C3AE.
 $C4C6 RET           ; Return.

; Parser: Process Item
;
; Used by the routine at #R$EDC4.
@label=Parser_ProcessItem
c$C4C7 LD HL,$BD66   ; #REGhl=#R$BD66.
 $C4CA LD B,$0A      ; #REGb=#N$0A.
*$C4CC LD A,(HL)     ; {Return if *#REGhl is equal to #N$FF.
 $C4CD CP $FF        ;
 $C4CF RET Z         ; }
 $C4D0 PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $C4D1 PUSH BC       ; }
 $C4D2 LD HL,($BD1E) ; #REGhl=*#R$BD1E.
 $C4D5 LD BC,($BD2A) ; #REGbc=*#R$BD2A.
 $C4D9 CPIR          ; CPIR.
 $C4DB JR NZ,$C4E5   ; Jump to #R$C4E5 if #REGa is not equal to #N$FF.
 $C4DD CALL $C32A    ; Call #R$C32A.
 $C4E0 JR NC,$C4E5   ; Jump to #R$C4E5 if #REGa is greater than or equal to
                     ; #N$FF.
 $C4E2 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $C4E3 POP HL        ; }
 $C4E4 RET           ; Return.
*$C4E5 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $C4E6 POP HL        ; }
 $C4E7 INC HL        ; Increment #REGhl by one.
 $C4E8 DJNZ $C4CC    ; Decrease counter by one and loop back to #R$C4CC until
                     ; counter is zero.
 $C4EA RET           ; Return.

; Handler: Scenic Events
;
; Used by the routine at #R$EDC4.
; .
; Handles checking if a scenic event should occur ... and also, handles
; jumping to the correct related scenic event routine to action it.
@label=Handler_ScenicEvents
c$C4EB LD HL,$BC78   ; #REGhl=#R$BC78.
 $C4EE LD BC,($BD30) ; Set a counter in #REGbc for *#R$BD30.
@label=Handler_ScenicEvents_Loop
*$C4F2 LD A,($BCCB)  ; Load *#R$BCCB into #REGa.
 $C4F5 CPIR          ; Search for the matching room.
 $C4F7 JR NZ,$C51F   ; Jump to #R$C51F if no events at all were found in the
                     ; table.
; An event was found to be processed!
; .
; First though, stash away the current pointer and index in the search,
; so this can be resumed later.
 $C4F9 LD ($BD7D),HL ; Write the table position to *#R$BD7D.
 $C4FC LD ($BD7F),BC ; Write the counter to *#R$BD7F.
; Calculate the event index and get the event handler.
 $C500 INC BC        ; Adjust the counter for the sum.
 $C501 LD HL,($BD30) ; #REGhl=*#R$BD30.
 $C504 AND A         ; {Calculate the index.
 $C505 SBC HL,BC     ; }
 $C507 EX DE,HL      ; Move the index into #REGde (as #R$C1F0 uses #REGe).
 $C508 LD IX,($BD24) ; Load #REGix with *#R$BD24 which contains a pointer to the scenic
                     ; event rountines jump table.
 $C50C CALL $C1F0    ; Call #R$C1F0.
 $C50F LD DE,$C514   ; {Push #R$C514 onto the stack (as the return address).
 $C512 PUSH DE       ; }
 $C513 JP (HL)       ; Jump to the event handler held by #REGhl.
; This is the return point after the handler has finished executing.
@label=ScenicEvents_PostProcessing
 $C514 LD HL,($BD7D) ; Restore *#R$BD7D to #REGhl.
 $C517 LD BC,($BD7F) ; Restore *#R$BD7F to #REGbc.
 $C51B XOR A         ; {Jump to #R$C4F2 if there are any further events to
 $C51C OR C          ; process.
 $C51D JR NZ,$C4F2   ; }
@label=ScenicEvents_Return
*$C51F RET           ; Return.

; Routine at C520
;
; Used by the routine at #R$EF54.
c$C520 LD C,A        ; #REGc=#REGa.
 $C521 LD A,($BD30)  ; {#REGb=*#R$BD30.
 $C524 LD B,A        ; }
 $C525 LD A,($BCCB)  ; #REGa=*#R$BCCB.
 $C528 LD HL,$BC78   ; #REGhl=#R$BC78.
 $C52B JR $C52E      ; Jump to #R$C52E.
*$C52D INC HL        ; Increment #REGhl by one.
*$C52E CP (HL)       ; {Jump to #R$C532 if #REGa is not equal to *#REGhl.
 $C52F JR NZ,$C532   ; }
 $C531 LD (HL),C     ; Write #REGc to *#REGhl.
*$C532 DJNZ $C52D    ; Decrease counter by one and loop back to #R$C52D until
                     ; counter is zero.
 $C534 LD A,C        ; #REGa=#REGc.
 $C535 LD ($BCCB),A  ; Write #REGa to *#R$BCCB.
 $C538 LD A,($BC6F)  ; #REGa=*#R$BC6F.
 $C53B AND A         ; {Jump to #R$C555 if #REGa is zero.
 $C53C JR Z,$C555    ; }
 $C53E LD B,$08      ; #REGb=#N$08.
 $C540 LD HL,$BC70   ; #REGhl=#R$BC70.
 $C543 LD C,A        ; #REGc=#REGa.
 $C544 JR $C547      ; Jump to #R$C547.
*$C546 INC HL        ; Increment #REGhl by one.
*$C547 SRL C         ; Shift #REGc right.
 $C549 JR NC,$C553   ; Jump to #R$C553 if #REGhl is greater than or equal to
                     ; #REGa.
 $C54B LD A,(HL)     ; #REGa=*#REGhl.
 $C54C PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $C54D PUSH BC       ; }
 $C54E CALL $C3F1    ; Call #R$C3F1.
 $C551 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $C552 POP HL        ; }
*$C553 DJNZ $C546    ; Decrease counter by one and loop back to #R$C546 until
                     ; counter is zero.
*$C555 RET           ; Return.

; Routine at C556
;
; Used by the routine at #R$EDC4.
c$C556 LD HL,($BD26) ; #REGhl=*#R$BD26.
 $C559 LD BC,($BD2C) ; #REGbc=*#R$BD2C.
 $C55D LD A,($BD66)  ; #REGa=*#R$BD66.
 $C560 CPIR          ; CPIR.
 $C562 JR Z,$C56B    ; Jump to #R$C56B if ?? is equal to #N$00.
; Print "#STR$BD91,$08($b==$FF)".
 $C564 LD HL,$BD91   ; #REGhl=#R$BD91.
 $C567 CALL $BAB1    ; Call #R$BAB1.
 $C56A RET           ; Return.
*$C56B LD A,($BD2C)  ; {#REGa=*#R$BD2C-#REGc.
 $C56E SUB C         ; }
 $C56F DEC A         ; Decrease #REGa by one.
 $C570 LD E,A        ; Store the result in #REGe.
 $C571 LD IX,($BD20) ; #REGix=*#R$BD20.
 $C575 CALL $C1F0    ; Call #R$C1F0.
 $C578 JP (HL)       ; Jump to *#REGhl.

; Pause, Print String And Scroll
;
; Used by the routines at #R$EEA9, #R$EEBB, #R$EECD, #R$EEDF, #R$EEFC, #R$EF32,
; #R$EF54, #R$F03E and #R$F09C.
; .
; For dramatic effect! Used when an event occurs.
@label=PausePrintStringAndScroll
c$C579 LD B,$19      ; {Call #R$BB51 using #N$19 HALT loops (for a short
 $C57B CALL $BB51    ; pause).}
 $C57E CALL $BAB1    ; Call #R$BAB1.
 $C581 RET           ; Return.

; Generate Random Number
;
; Used by the routines at #R$EEDF, #R$EEFC, #R$EF32 and #R$F8D9.
;
; A Maximum value of generated number
@label=GenerateRandomNumber
c$C582 PUSH BC       ; Stash #REGbc on the stack.
 $C583 LD C,A        ; Store the maximum number in #REGc.
 $C584 CALL $BB55    ; Call #R$BB55.
 $C587 LD B,A        ; Use the frames number as a loop counter in #REGb.
 $C588 LD A,C        ; Restore the maximum number value back to #REGa.
@label=GenerateRandomNumber_Loop
*$C589 DEC A         ; Decrease the maximum number value by one.
 $C58A JR NZ,$C58D   ; Jump to #R$C58D if the maximum number value is not equal
                     ; to zero.
 $C58C LD A,C        ; Restore the maximum number value back to #REGa.
@label=GenerateRandomNumber_Next
*$C58D DJNZ $C589    ; Decrease the loop counter by one and loop back to #R$C589 until the
                     ; loop counter is zero.
 $C58F DEC A         ; Decrease the maximum number value by one.
 $C590 POP BC        ; Restore #REGbc from the stack.
 $C591 RET           ; Return.

; Game Start Alias
;
; Used by the routine at #R$BA50.
@label=GameStart_Alias
c$C592 JP $FD82      ; Jump to #R$FD82.

; Messaging: "A Ladder Leading Down To A<CR>Small Rowing Boat Alongside."
@label=Messaging_LadderLeadingDownToASmallRowingBoat
t$C595 DEFM "A ladder leading down to a",$0D,"small rowing boat alongside." ; "#STR$C595,$08($b==$FF)".
 $C5CC DEFB $FF                                                             ; Terminator.

; Messaging: "You Are Alongside Your Ship.<CR>A Ladder Leads Up To The Deck."
@label=Messaging_AlongsideYourShip
t$C5CD DEFM "You are alongside your ship.",$0D,"A ladder leads up to the deck." ; "#STR$C5CD,$08($b==$FF)".
 $C608 DEFB $FF                                                                 ; Terminator.

; Messaging: "A Match."
@label=Messaging_Match
t$C609 DEFM "A match." ; "#STR$C609,$08($b==$FF)".
 $C611 DEFB $FF        ; Terminator.

; Messaging: "A Lighted Match."
@label=Messaging_LitMatch
t$C612 DEFM "A lighted match." ; "#STR$C612,$08($b==$FF)".
 $C622 DEFB $FF                ; Terminator.

; Messaging: "A Plank."
@label=Messaging_Plank
t$C623 DEFM "A plank." ; "#STR$C623,$08($b==$FF)".
 $C62B DEFB $FF        ; Terminator.

; Messaging: "A Plank,Spanning The Pit."
@label=Messaging_PlankSpanningThePit
t$C62C DEFM "A plank,spanning the pit." ; "#STR$C62C,$08($b==$FF)".
 $C645 DEFB $FF                         ; Terminator.

; Messaging: "A Coconut."
@label=Messaging_Coconut
t$C646 DEFM "A coconut." ; "#STR$C646,$08($b==$FF)".
 $C650 DEFB $FF          ; Terminator.

; Messaging: "A Rod."
@label=Messaging_Rod
t$C651 DEFM "A rod." ; "#STR$C651,$08($b==$FF)".
 $C657 DEFB $FF      ; Terminator.

; Messaging: "A Small Round Hole To<CR>The Side Of The Door."
@label=Messaging_SmallRoundHoleSideOfTheDoor
t$C658 DEFM "A small round hole to",$0D,"the side of the door." ; "#STR$C658,$08($b==$FF)".
 $C683 DEFB $FF                                                 ; Terminator.

; Messaging: "A Hole With A Rod Inserted,<CR>To The Side Of The Door."
@label=Messaging_HoleWithARodInserted
t$C684 DEFM "A hole with a rod inserted,",$0D,"to the side of the door." ; "#STR$C684,$08($b==$FF)".
 $C6B8 DEFB $FF                                                          ; Terminator.

; Messaging: "A Bottle."
@label=Messaging_Bottle
t$C6B9 DEFM "A bottle." ; "#STR$C6B9,$08($b==$FF)".
 $C6C2 DEFB $FF         ; Terminator.

; Messaging: "A Bottle Of Rum."
@label=Messaging_BottleOfRum
t$C6C3 DEFM "A bottle of rum." ; "#STR$C6C3,$08($b==$FF)".
 $C6D3 DEFB $FF                ; Terminator.

; Messaging: "Some Fruit."
@label=Messaging_Fruit
t$C6D4 DEFM "Some fruit." ; "#STR$C6D4,$08($b==$FF)".
 $C6DF DEFB $FF           ; Terminator.

; Messaging: "A Gun."
@label=Messaging_Gun
t$C6E0 DEFM "A gun." ; "#STR$C6E0,$08($b==$FF)".
 $C6E6 DEFB $FF      ; Terminator.

; Messaging: "An Eyepatch."
@label=Messaging_Eyepatch
t$C6E7 DEFM "An eyepatch." ; "#STR$C6E7,$08($b==$FF)".
 $C6F3 DEFB $FF            ; Terminator.

; Messaging: "An Eyepatch,<CR>Which You Are Wearing."
@label=Messaging_EyepatchWorn
t$C6F4 DEFM "An eyepatch,",$0D,"which you are wearing." ; "#STR$C6F4,$08($b==$FF)".
 $C717 DEFB $FF                                         ; Terminator.

; Messaging: "A Keg Of Gunpowder."
@label=Messaging_KegOfGunpowder
t$C718 DEFM "A keg of gunpowder." ; "#STR$C718,$08($b==$FF)".
 $C72B DEFB $FF                   ; Terminator.

; Messaging: "A Crocodile."
@label=Messaging_Crocodile
t$C72C DEFM "A crocodile." ; "#STR$C72C,$08($b==$FF)".
 $C738 DEFB $FF            ; Terminator.

; Messaging: "A Crocodile,With A Keg Of<CR>Gunpowder In Its Mouth.<CR>The
; Powder Is Spilling Out."
@label=Messaging_CrocodileWithKegOfGunpowder
t$C739 DEFM "A crocodile,with a keg of",$0D,"gunpowder in its mouth.",$0D,"The powder is s" ; {"#STR$C739,$08($b==$FF)".
 $C77A DEFM "pilling out."                                                                  ; }
 $C786 DEFB $FF                                                                             ; Terminator.

; Messaging: "A Shoe."
@label=Messaging_Shoe
t$C787 DEFM "A shoe." ; "#STR$C787,$08($b==$FF)".
 $C78E DEFB $FF       ; Terminator.

; Messaging: "A Sextant."
@label=Messaging_Sextant
t$C78F DEFM "A sextant." ; "#STR$C78F,$08($b==$FF)".
 $C799 DEFB $FF          ; Terminator.

; Messaging: "A Watch."
@label=Messaging_Watch
t$C79A DEFM "A watch." ; "#STR$C79A,$08($b==$FF)".
 $C7A2 DEFB $FF        ; Terminator.

; Messaging: "You Are Surrounded By Natives.<CR>They Are Licking Their
; Lips<CR>In A Very Disturbing Manner.<CR>One Brandishes A Spear."
@label=Messaging_Cannibals
t$C7A3 DEFM "You are surrounded by natives.",$0D,"They are licking their lips",$0D,"in a v" ; {"#STR$C7A3,$08($b==$FF)".
 $C7E4 DEFM "ery disturbing manner.",$0D,"One brandishes a spear."                          ; }
 $C812 DEFB $FF                                                                             ; Terminator.

; Messaging: "A Group Of Natives,<CR>Examining A Watch."
@label=Messaging_CannibalsWithWatch
t$C813 DEFM "A group of natives,",$0D,"examining a watch." ; "#STR$C813,$08($b==$FF)".
 $C839 DEFB $FF                                            ; Terminator.

; Messaging: "A Spear."
@label=Messaging_Spear
t$C83A DEFM "A spear." ; "#STR$C83A,$08($b==$FF)".
 $C842 DEFB $FF        ; Terminator.

; Messaging: "A Strangely Coloured Fish."
@label=Messaging_Fish
t$C843 DEFM "A strangely coloured fish." ; "#STR$C843,$08($b==$FF)".
 $C85D DEFB $FF                          ; Terminator.

; Messaging: "A Red Herring."
@label=Messaging_RedHerring
t$C85E DEFM "A red herring." ; "#STR$C85E,$08($b==$FF)".
 $C86C DEFB $FF              ; Terminator.

; Messaging: "The Jewels Of Babylon."
@label=Messaging_Jewels
t$C86D DEFM "The Jewels of Babylon." ; "#STR$C86D,$08($b==$FF)".
 $C883 DEFB $FF                      ; Terminator.

; Messaging: "A Crowbar."
@label=Messaging_Crowbar
t$C884 DEFM "A crowbar." ; "#STR$C884,$08($b==$FF)".
 $C88E DEFB $FF          ; Terminator.

; Messaging: "A Key."
@label=Messaging_Key
t$C88F DEFM "A key." ; "#STR$C88F,$08($b==$FF)".
 $C895 DEFB $FF      ; Terminator.

; Messaging: "A Human Skull."
@label=Messaging_Skull
t$C896 DEFM "A human skull." ; "#STR$C896,$08($b==$FF)".
 $C8A4 DEFB $FF              ; Terminator.

; Messaging: "You Are At The Island."
@label=Messaging_YouAreAtTheIsland
t$C8A5 DEFM "You are at the island." ; "#STR$C8A5,$08($b==$FF)".
 $C8BB DEFB $FF                      ; Terminator.

; Messaging: "A Sleeping Pirate."
@label=Messaging_SleepingPirate
t$C8BC DEFM "A sleeping pirate." ; "#STR$C8BC,$08($b==$FF)".
 $C8CE DEFB $FF                  ; Terminator.

; Messaging: "A Dead Pirate."
@label=Messaging_DeadPirate
t$C8CF DEFM "A dead pirate." ; "#STR$C8CF,$08($b==$FF)".
 $C8DD DEFB $FF              ; Terminator.

; Messaging: "A Parrot,Eyeing You<CR>With Suspicion."
@label=Messaging_SuspiciousParrot
t$C8DE DEFM "A parrot,eyeing you",$0D,"with suspicion." ; "#STR$C8DE,$08($b==$FF)".
 $C901 DEFB $FF                                         ; Terminator.

; Messaging: "A Dead Parrot."
@label=Messaging_DeadParrot
t$C902 DEFM "A dead parrot." ; "#STR$C902,$08($b==$FF)".
 $C910 DEFB $FF              ; Terminator.

; Messaging: "A Giant Crab.<CR>It Advances Toward You."
@label=Messaging_GiantCrab
t$C911 DEFM "A giant crab.",$0D,"It advances toward you." ; "#STR$C911,$08($b==$FF)".
 $C936 DEFB $FF                                           ; Terminator.

; Messaging: "A Lion.<CR>It Is About To Pounce On You."
@label=Messaging_Lion
t$C937 DEFM "A lion.",$0D,"It is about to pounce on you." ; "#STR$C937,$08($b==$FF)".
 $C95C DEFB $FF                                           ; Terminator.

; Messaging: "A Giant Octopus."
@label=Messaging_Octopus
t$C95D DEFM "A giant octopus." ; "#STR$C95D,$08($b==$FF)".
 $C96D DEFB $FF                ; Terminator.

; Messaging: "A Closed Door."
@label=Messaging_ClosedDoor
t$C96E DEFM "A closed door." ; "#STR$C96E,$08($b==$FF)".
 $C97C DEFB $FF              ; Terminator.

; Messaging: "An Open Door."
@label=Messaging_OpenDoor
t$C97D DEFM "An open door." ; "#STR$C97D,$08($b==$FF)".
 $C98A DEFB $FF             ; Terminator.

; Messaging: "The Door Is Open."
@label=Messaging_DoorIsOpen
t$C98B DEFM "The door is open." ; "#STR$C98B,$08($b==$FF)".
 $C99C DEFB $FF                 ; Terminator.

; Messaging: "The Door Is Closed."
@label=Messaging_DoorIsClosed
t$C99D DEFM "The door is closed." ; "#STR$C99D,$08($b==$FF)".
 $C9B0 DEFB $FF                   ; Terminator.

; Messaging: "A Smooth,Vertical Slab Of Rock."
@label=Messaging_Rock
t$C9B1 DEFM "A smooth,vertical slab of rock." ; "#STR$C9B1,$08($b==$FF)".
 $C9D0 DEFB $FF                               ; Terminator.

; Messaging: "An Open Trapdoor."
@label=Messaging_OpenTrapdoor
t$C9D1 DEFM "An open trapdoor." ; "#STR$C9D1,$08($b==$FF)".
 $C9E2 DEFB $FF                 ; Terminator.

; Messaging: "The Body Of A Sailor."
@label=Messaging_Sailor
t$C9E3 DEFM "The body of a sailor." ; "#STR$C9E3,$08($b==$FF)".
 $C9F8 DEFB $FF                     ; Terminator.

; Messaging: "A Makeshift Bridge.<CR>It Spans The Ravine."
@label=Messaging_BridgeAcrossRavine
t$C9F9 DEFM "A makeshift bridge.",$0D,"It spans the ravine." ; "#STR$C9F9,$08($b==$FF)".
 $CA21 DEFB $FF                                              ; Terminator.

; Messaging: "A Makeshift Bridge."
@label=Messaging_Bridge
t$CA22 DEFM "A makeshift bridge." ; "#STR$CA22,$08($b==$FF)".
 $CA35 DEFB $FF                   ; Terminator.

; Messaging: "A Boulder,Teetering On The<CR>Brink Of A Ledge,Far Above."
@label=Messaging_BoulderOnLedge
t$CA36 DEFM "A boulder,teetering on the",$0D,"brink of a ledge,far above." ; "#STR$CA36,$08($b==$FF)".
 $CA6C DEFB $FF                                                            ; Terminator.

; Messaging: "A Boulder."
@label=Messaging_Boulder
t$CA6D DEFM "A boulder." ; "#STR$CA6D,$08($b==$FF)".
 $CA77 DEFB $FF          ; Terminator.

; Messaging: "A Ring,Set Into The Floor."
@label=Messaging_Ring
t$CA78 DEFM "A ring,set into the floor." ; "#STR$CA78,$08($b==$FF)".
 $CA92 DEFB $FF                          ; Terminator.

; Messaging: "A Trail Of Slime,Leading<CR>Into The Cave."
@label=Messaging_Slime
t$CA93 DEFM "A trail of slime,leading",$0D,"into the cave." ; "#STR$CA93,$08($b==$FF)".
 $CABA DEFB $FF                                             ; Terminator.

; Messaging: "A Very Large Stone."
@label=Messaging_LargeStone
t$CABB DEFM "A very large stone." ; "#STR$CABB,$08($b==$FF)".
 $CACE DEFB $FF                   ; Terminator.

; Messaging: "A Rowing Boat."
@label=Messaging_RowingBoat
t$CACF DEFM "A rowing boat." ; "#STR$CACF,$08($b==$FF)".
 $CADD DEFB $FF              ; Terminator.

; Messaging: "A Ship Anchored Offshore,<CR>To The South."
@label=Messaging_Ship
t$CADE DEFM "A ship anchored offshore,",$0D,"to the south." ; "#STR$CADE,$08($b==$FF)".
 $CB05 DEFB $FF                                             ; Terminator.

; Messaging: "The Open Sea.<CR>You Are Totally Lost."
@label=Messaging_OpenSea
t$CB06 DEFM "The Open Sea.",$0D,"You are totally lost." ; "#STR$CB06,$08($b==$FF)".
 $CB29 DEFB $FF                                         ; Terminator.

; Messaging: "On Board Your Ship,Anchored<CR>To The South Of A Large Island."
@label=Messaging_OnBoardYourShip
t$CB2A DEFM "On board your ship,anchored",$0D,"to the south of a large island." ; "#STR$CB2A,$08($b==$FF)".
 $CB65 DEFB $FF                                                                 ; Terminator.

; Messaging: "In A Rowing Boat."
@label=Messaging_InRowingBoat
t$CB66 DEFM "In a rowing boat." ; "#STR$CB66,$08($b==$FF)".
 $CB77 DEFB $FF                 ; Terminator.

; Messaging: "The Long Sandy Beach."
@label=Messaging_LongSandyBeach
t$CB78 DEFM "The long Sandy Beach." ; "#STR$CB78,$08($b==$FF)".
 $CB8D DEFB $FF                     ; Terminator.

; Messaging: "The Dunes.<CR>Among Towering Mounds Of<CR>Drifting Sand."
@label=Messaging_TheDunes
t$CB8E DEFM "The Dunes.",$0D,"Among towering mounds of",$0D,"drifting sand." ; "#STR$CB8E,$08($b==$FF)".
 $CBC0 DEFB $FF                                                              ; Terminator.

; Messaging: "The Stand Of Palm Trees.<CR>The Large Leaves Gently Sway<CR>In
; The Warm,Tropical Breeze."
@label=Messaging_StandOfPalmTrees
t$CBC1 DEFM "The stand of Palm Trees.",$0D,"The large leaves gently sway",$0D,"in the warm" ; {"#STR$CBC1,$08($b==$FF)".
 $CC02 DEFM ",tropical breeze."                                                             ; }
 $CC13 DEFB $FF                                                                             ; Terminator.

; Messaging: "The Hillside Path."
@label=Messaging_HillsidePath
t$CC14 DEFM "The Hillside Path." ; "#STR$CC14,$08($b==$FF)".
 $CC26 DEFB $FF                  ; Terminator.

; Messaging: "By A Pool Of Clear,Glistening<CR>Water."
t$CC27 DEFM "By a pool of clear,glistening",$0D,"water." ; "#STR$CC27,$08($b==$FF)".
 $CC4B DEFB $FF                                          ; Terminator.

; Messaging: "The Narrow Gulley.<CR>Cut Into The Rock By Water<CR>From The Pool
; Above."
t$CC4C DEFM "The Narrow Gulley.",$0D,"Cut into the rock by water",$0D,"from the pool above" ; {"#STR$CC4C,$08($b==$FF)".
 $CC8D DEFM "."                                                                             ; }
 $CC8E DEFB $FF                                                                             ; Terminator.

; Messaging: "The Hilltop.<CR>The Highest Point Of The Island."
t$CC8F DEFM "The Hilltop.",$0D,"The highest point of the island." ; "#STR$CC8F,$08($b==$FF)".
 $CCBC DEFB $FF                                                   ; Terminator.

; Messaging: "The Waterfall.<CR>A Mighty Torrent Of Cascading<CR>Water."
t$CCBD DEFM "The Waterfall.",$0D,"A mighty torrent of cascading",$0D,"water." ; "#STR$CCBD,$08($b==$FF)".
 $CCF0 DEFB $FF                                                               ; Terminator.

; Messaging: "The Narrow Path.<CR>Behind The Waterfall."
t$CCF1 DEFM "The Narrow Path.",$0D,"Behind the waterfall." ; "#STR$CCF1,$08($b==$FF)".
 $CD17 DEFB $FF                                            ; Terminator.

; Messaging: "The Thicket.<CR>A Maze Of Paths Lead<CR>Through The Undergrowth."
t$CD18 DEFM "The Thicket.",$0D,"A maze of paths lead",$0D,"through the undergrowth." ; "#STR$CD18,$08($b==$FF)".
 $CD52 DEFB $FF                                                                      ; Terminator.

; Messaging: "The Cannibals' Village."
t$CD53 DEFM "The Cannibals' Village." ; "#STR$CD53,$08($b==$FF)".
 $CD6A DEFB $FF                       ; Terminator.

; Messaging: "The Woodland Path."
t$CD6B DEFM "The Woodland Path." ; "#STR$CD6B,$08($b==$FF)".
 $CD7D DEFB $FF                  ; Terminator.

; Messaging: "The Woodland Clearing.<CR>Trees And Undergrowth Have<CR>Been Cut
; Down."
t$CD7E DEFM "The Woodland Clearing.",$0D,"Trees and undergrowth have",$0D,"been cut down." ; "#STR$CD7E,$08($b==$FF)".
 $CDBE DEFB $FF                                                                            ; Terminator.

; Messaging: "The High Ridge."
t$CDBF DEFM "The High Ridge." ; "#STR$CDBF,$08($b==$FF)".
 $CDCE DEFB $FF               ; Terminator.

; Messaging: "The Valley.<CR>A Thin Miasma Of Mist Covers<CR>The Rich Verdant
; Grass."
t$CDCF DEFM "The Valley.",$0D,"A thin miasma of mist covers",$0D,"the rich verdant grass." ; "#STR$CDCF,$08($b==$FF)".
 $CE0F DEFB $FF                                                                            ; Terminator.

; Messaging: "The Fruit Grove."
t$CE10 DEFM "The Fruit Grove." ; "#STR$CE10,$08($b==$FF)".
 $CE20 DEFB $FF                ; Terminator.

; Messaging: "The Cliff Path."
t$CE21 DEFM "The Cliff Path." ; "#STR$CE21,$08($b==$FF)".
 $CE30 DEFB $FF               ; Terminator.

; Messaging: "The Clifftop.<CR>Overlooking The Sea."
t$CE31 DEFM "The Clifftop.",$0D,"Overlooking the Sea." ; "#STR$CE31,$08($b==$FF)".
 $CE53 DEFB $FF                                        ; Terminator.

; Messaging: "The Rocky Path."
t$CE54 DEFM "The Rocky Path." ; "#STR$CE54,$08($b==$FF)".
 $CE63 DEFB $FF               ; Terminator.

; Messaging: "The Bottom Of A Rocky Slope."
t$CE64 DEFM "The bottom of a Rocky Slope." ; "#STR$CE64,$08($b==$FF)".
 $CE80 DEFB $FF                            ; Terminator.

; Messaging: "The Canyon.<CR>The Walls Rise Dauntingly<CR>On Both Sides."
t$CE81 DEFM "The Canyon.",$0D,"The walls rise dauntingly",$0D,"on both sides." ; "#STR$CE81,$08($b==$FF)".
 $CEB5 DEFB $FF                                                                ; Terminator.

; Messaging: "The Secluded Beach."
t$CEB6 DEFM "The Secluded Beach." ; "#STR$CEB6,$08($b==$FF)".
 $CEC9 DEFB $FF                   ; Terminator.

; Messaging: "The Rockpool.<CR>A Deep Trough Of Crystal Clear<CR>Water."
t$CECA DEFM "The Rockpool.",$0D,"A deep trough of crystal clear",$0D,"water." ; "#STR$CECA,$08($b==$FF)".
 $CEFD DEFB $FF                                                               ; Terminator.

; Messaging: "Wreckers' Cove."
t$CEFE DEFM "Wreckers' Cove." ; "#STR$CEFE,$08($b==$FF)".
 $CF0D DEFB $FF               ; Terminator.

; Messaging: "The Jungle.<CR>There Are Game Paths In All<CR>Directions."
t$CF0E DEFM "The Jungle.",$0D,"There are game paths in all",$0D,"directions." ; "#STR$CF0E,$08($b==$FF)".
 $CF41 DEFB $FF                                                               ; Terminator.

; Messaging: "The Grassy Slope.<CR>Near The Jungle."
t$CF42 DEFM "The Grassy Slope.",$0D,"Near the Jungle." ; "#STR$CF42,$08($b==$FF)".
 $CF64 DEFB $FF                                        ; Terminator.

; Messaging: "The Rocky Beach."
t$CF65 DEFM "The Rocky Beach." ; "#STR$CF65,$08($b==$FF)".
 $CF75 DEFB $FF                ; Terminator.

; Messaging: "The Mouth Of A Large Cave."
t$CF76 DEFM "The Mouth of a large Cave." ; "#STR$CF76,$08($b==$FF)".
 $CF90 DEFB $FF                          ; Terminator.

; Messaging: "The Cave.<CR>A Deep Pool Of Water Lays In<CR>Its Centre."
t$CF91 DEFM "The Cave.",$0D,"A deep pool of water lays in",$0D,"its centre." ; "#STR$CF91,$08($b==$FF)".
 $CFC3 DEFB $FF                                                              ; Terminator.

; Messaging: "A Dead End."
t$CFC4 DEFM "A Dead End." ; "#STR$CFC4,$08($b==$FF)".
 $CFCF DEFB $FF           ; Terminator.

; Messaging: "The Mossy Path.<CR>The Ground Is Waterlogged."
t$CFD0 DEFM "The Mossy Path.",$0D,"The ground is waterlogged." ; "#STR$CFD0,$08($b==$FF)".
 $CFFA DEFB $FF                                                ; Terminator.

; Messaging: "The Swamp.<CR>Muddy Paths Lead Off In All<CR>Directions."
t$CFFB DEFM "The Swamp.",$0D,"Muddy paths lead off in all",$0D,"directions." ; "#STR$CFFB,$08($b==$FF)".
 $D02D DEFB $FF                                                              ; Terminator.

; Messaging: "The Ravine.<CR>A River Runs Far Below."
t$D02E DEFM "The Ravine.",$0D,"A river runs far below." ; "#STR$D02E,$08($b==$FF)".
 $D051 DEFB $FF                                         ; Terminator.

; Messaging: "The Cliffs.<CR>Overlooking A Natural Harbour."
t$D052 DEFM "The Cliffs.",$0D,"Overlooking a natural harbour." ; "#STR$D052,$08($b==$FF)".
 $D07C DEFB $FF                                                ; Terminator.

; Messaging: "The Cliff Bottom."
t$D07D DEFM "The Cliff Bottom." ; "#STR$D07D,$08($b==$FF)".
 $D08E DEFB $FF                 ; Terminator.

; Messaging: "The Harbour Beach.<CR>At A Cave Entrance."
t$D08F DEFM "The Harbour Beach.",$0D,"At a cave entrance." ; "#STR$D08F,$08($b==$FF)".
 $D0B5 DEFB $FF                                            ; Terminator.

; Messaging: "The Vast Cavern."
t$D0B6 DEFM "The Vast Cavern." ; "#STR$D0B6,$08($b==$FF)".
 $D0C6 DEFB $FF                ; Terminator.

; Messaging: "The Warren Of Passages."
t$D0C7 DEFM "The Warren of Passages." ; "#STR$D0C7,$08($b==$FF)".
 $D0DE DEFB $FF                       ; Terminator.

; Messaging: "The Narrow Passage."
t$D0DF DEFM "The Narrow Passage." ; "#STR$D0DF,$08($b==$FF)".
 $D0F2 DEFB $FF                   ; Terminator.

; Messaging: "The Dusty Corridor."
t$D0F3 DEFM "The Dusty Corridor." ; "#STR$D0F3,$08($b==$FF)".
 $D106 DEFB $FF                   ; Terminator.

; Messaging: "The Pirate Treasure Chamber."
t$D107 DEFM "The Pirate Treasure Chamber." ; "#STR$D107,$08($b==$FF)".
 $D123 DEFB $FF                            ; Terminator.

; Messaging: "The Damp Passage.<CR>Water Trickles Down The Walls."
t$D124 DEFM "The Damp Passage.",$0D,"Water trickles down the walls." ; "#STR$D124,$08($b==$FF)".
 $D154 DEFB $FF                                                      ; Terminator.

; Messaging: "The Wide Pit."
t$D155 DEFM "The Wide Pit." ; "#STR$D155,$08($b==$FF)".
 $D162 DEFB $FF             ; Terminator.

; Messaging: "The Pit Bottom."
t$D163 DEFM "The Pit Bottom." ; "#STR$D163,$08($b==$FF)".
 $D172 DEFB $FF               ; Terminator.

; Messaging: "The Southern Side Of The Pit."
t$D173 DEFM "The Southern Side of the Pit." ; "#STR$D173,$08($b==$FF)".
 $D190 DEFB $FF                             ; Terminator.

; Messaging: "The Mighty Rock Door."
t$D191 DEFM "The Mighty Rock Door." ; "#STR$D191,$08($b==$FF)".
 $D1A6 DEFB $FF                     ; Terminator.

; Messaging: "The Bridge."
t$D1A7 DEFM "The Bridge." ; "#STR$D1A7,$08($b==$FF)".
 $D1B2 DEFB $FF           ; Terminator.

; Messaging: "A Match"
t$D1B3 DEFM "a match" ; "#STR$D1B3,$08($b==$FF)".
 $D1BA DEFB $FF       ; Terminator.

; Messaging: "A Plank"
t$D1BB DEFM "a plank" ; "#STR$D1BB,$08($b==$FF)".
 $D1C2 DEFB $FF       ; Terminator.

; Messaging: "A Coconut"
t$D1C3 DEFM "a coconut" ; "#STR$D1C3,$08($b==$FF)".
 $D1CC DEFB $FF         ; Terminator.

; Messaging: "A Rod"
t$D1CD DEFM "a rod"  ; "#STR$D1CD,$08($b==$FF)".
 $D1D2 DEFB $FF      ; Terminator.

; Messaging: "A Bottle"
t$D1D3 DEFM "a bottle" ; "#STR$D1D3,$08($b==$FF)".
 $D1DB DEFB $FF        ; Terminator.

; Messaging: "Any Rum"
t$D1DC DEFM "any rum" ; "#STR$D1DC,$08($b==$FF)".
 $D1E3 DEFB $FF       ; Terminator.

; Messaging: "Any Fruit"
t$D1E4 DEFM "any fruit" ; "#STR$D1E4,$08($b==$FF)".
 $D1ED DEFB $FF         ; Terminator.

; Messaging: "A Gun"
t$D1EE DEFM "a gun"  ; "#STR$D1EE,$08($b==$FF)".
 $D1F3 DEFB $FF      ; Terminator.

; Messaging: "An Eyepatch"
t$D1F4 DEFM "an eyepatch" ; "#STR$D1F4,$08($b==$FF)".
 $D1FF DEFB $FF           ; Terminator.

; Messaging: "Any Gunpowder"
t$D200 DEFM "any gunpowder" ; "#STR$D200,$08($b==$FF)".
 $D20D DEFB $FF             ; Terminator.

; Messaging: "A Keg"
t$D20E DEFM "a keg"  ; "#STR$D20E,$08($b==$FF)".
 $D213 DEFB $FF      ; Terminator.

; Messaging: "A Shoe"
t$D214 DEFM "a shoe" ; "#STR$D214,$08($b==$FF)".
 $D21A DEFB $FF      ; Terminator.

; Messaging: "A Sextant"
t$D21B DEFM "a sextant" ; "#STR$D21B,$08($b==$FF)".
 $D224 DEFB $FF         ; Terminator.

; Messaging: "A Watch"
t$D225 DEFM "a watch" ; "#STR$D225,$08($b==$FF)".
 $D22C DEFB $FF       ; Terminator.

; Messaging: "A Fish"
t$D22D DEFM "a fish" ; "#STR$D22D,$08($b==$FF)".
 $D233 DEFB $FF      ; Terminator.

; Messaging: "Any Jewels"
t$D234 DEFM "any jewels" ; "#STR$D234,$08($b==$FF)".
 $D23E DEFB $FF          ; Terminator.

; Messaging: "A Crowbar"
t$D23F DEFM "a crowbar" ; "#STR$D23F,$08($b==$FF)".
 $D248 DEFB $FF         ; Terminator.

; Messaging: "A Key"
t$D249 DEFM "a key"  ; "#STR$D249,$08($b==$FF)".
 $D24E DEFB $FF      ; Terminator.

; Messaging: "A Skull"
t$D24F DEFM "a skull" ; "#STR$D24F,$08($b==$FF)".
 $D256 DEFB $FF       ; Terminator.

; Messaging: "A Spear"
t$D257 DEFM "a spear" ; "#STR$D257,$08($b==$FF)".
 $D25E DEFB $FF       ; Terminator.

; Messaging: "A Ladder"
t$D25F DEFM "a ladder" ; "#STR$D25F,$08($b==$FF)".
 $D267 DEFB $FF        ; Terminator.

; Messaging: "A Boat"
t$D268 DEFM "a boat" ; "#STR$D268,$08($b==$FF)".
 $D26E DEFB $FF      ; Terminator.

; Messaging: "Any Oars"
t$D26F DEFM "any oars" ; "#STR$D26F,$08($b==$FF)".
 $D277 DEFB $FF        ; Terminator.

; Messaging: "Any Cannibals"
t$D278 DEFM "any cannibals" ; "#STR$D278,$08($b==$FF)".
 $D285 DEFB $FF             ; Terminator.

; Messaging: "A Pirate"
t$D286 DEFM "a pirate" ; "#STR$D286,$08($b==$FF)".
 $D28E DEFB $FF        ; Terminator.

; Messaging: "A Parrot"
t$D28F DEFM "a parrot" ; "#STR$D28F,$08($b==$FF)".
 $D297 DEFB $FF        ; Terminator.

; Messaging: "A Crab"
t$D298 DEFM "a crab" ; "#STR$D298,$08($b==$FF)".
 $D29E DEFB $FF      ; Terminator.

; Messaging: "A Crocodile"
t$D29F DEFM "a crocodile" ; "#STR$D29F,$08($b==$FF)".
 $D2AA DEFB $FF           ; Terminator.

; Messaging: "A Lion"
t$D2AB DEFM "a lion" ; "#STR$D2AB,$08($b==$FF)".
 $D2B1 DEFB $FF      ; Terminator.

; Messaging: "A Seagull"
t$D2B2 DEFM "a seagull" ; "#STR$D2B2,$08($b==$FF)".
 $D2BB DEFB $FF         ; Terminator.

; Messaging: "An Octopus"
t$D2BC DEFM "an octopus" ; "#STR$D2BC,$08($b==$FF)".
 $D2C6 DEFB $FF          ; Terminator.

; Messaging: "A Door"
t$D2C7 DEFM "a door" ; "#STR$D2C7,$08($b==$FF)".
 $D2CD DEFB $FF      ; Terminator.

; Messaging: "A Sailor"
t$D2CE DEFM "a sailor" ; "#STR$D2CE,$08($b==$FF)".
 $D2D6 DEFB $FF        ; Terminator.

; Messaging: "A Snake"
t$D2D7 DEFM "a snake" ; "#STR$D2D7,$08($b==$FF)".
 $D2DE DEFB $FF       ; Terminator.

; Messaging: "A Spider"
t$D2DF DEFM "a spider" ; "#STR$D2DF,$08($b==$FF)".
 $D2E7 DEFB $FF        ; Terminator.

; Messaging: "A Bridge"
t$D2E8 DEFM "a bridge" ; "#STR$D2E8,$08($b==$FF)".
 $D2F0 DEFB $FF        ; Terminator.

; Messaging: "A Boulder"
t$D2F1 DEFM "a boulder" ; "#STR$D2F1,$08($b==$FF)".
 $D2FA DEFB $FF         ; Terminator.

; Messaging: "A Ring"
t$D2FB DEFM "a ring" ; "#STR$D2FB,$08($b==$FF)".
 $D301 DEFB $FF      ; Terminator.

; Messaging: "A Trapdoor"
t$D302 DEFM "a trapdoor" ; "#STR$D302,$08($b==$FF)".
 $D30C DEFB $FF          ; Terminator.

; Messaging: "A Cave"
t$D30D DEFM "a cave" ; "#STR$D30D,$08($b==$FF)".
 $D313 DEFB $FF      ; Terminator.

; Messaging: "A Pit"
t$D314 DEFM "a pit"  ; "#STR$D314,$08($b==$FF)".
 $D319 DEFB $FF      ; Terminator.

; Messaging: "A Ship"
t$D31A DEFM "a ship" ; "#STR$D31A,$08($b==$FF)".
 $D320 DEFB $FF      ; Terminator.

; Messaging: "A Hole"
@label=Messaging_Hole
t$D321 DEFM "a hole" ; "#STR$D321,$08($b==$FF)".
 $D327 DEFB $FF      ; Terminator.

; Messaging: "A Deer"
@label=Messaging_Deer
t$D328 DEFM "a deer" ; "#STR$D328,$08($b==$FF)".
 $D32E DEFB $FF      ; Terminator.

; Messaging: "A Body"
@label=Messaging_Body
t$D32F DEFM "a body" ; "#STR$D32F,$08($b==$FF)".
 $D335 DEFB $FF      ; Terminator.

; Messaging: "A Rat"
@label=Messaging_Rat
t$D336 DEFM "a rat"  ; "#STR$D336,$08($b==$FF)".
 $D33B DEFB $FF      ; Terminator.

; Messaging: "A Stone"
@label=Messaging_Stone
t$D33C DEFM "a stone" ; "#STR$D33C,$08($b==$FF)".
 $D343 DEFB $FF       ; Terminator.

; Messaging: "Any Water"
@label=Messaging_AnyWater
t$D344 DEFM "any water" ; "#STR$D344,$08($b==$FF)".
 $D34D DEFB $FF         ; Terminator.

; Table: Item Descriptions
@label=Table_ItemDescriptions
g$D34E DEFW $C595    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D350 DEFW $C5CD    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D352 DEFW $C609    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D354 DEFW $C612    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D356 DEFW $C623    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D358 DEFW $C62C    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D35A DEFW $C62C    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D35C DEFW $C646    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D35E DEFW $C651    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D360 DEFW $C658    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D362 DEFW $C684    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D364 DEFW $C6B9    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D366 DEFW $C6C3    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D368 DEFW $C6B9    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D36A DEFW $C6D4    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D36C DEFW $C6E0    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D36E DEFW $C6E7    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D370 DEFW $C6F4    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D372 DEFW $C718    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D374 DEFW $C72C    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D376 DEFW $C739    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D378 DEFW $C787    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D37A DEFW $C78F    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D37C DEFW $C79A    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D37E DEFW $C7A3    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D380 DEFW $C813    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D382 DEFW $C83A    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D384 DEFW $C843    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D386 DEFW $C85E    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D388 DEFW $C86D    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D38A DEFW $C884    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D38C DEFW $C88F    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D38E DEFW $C896    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D390 DEFW $C8A5    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D392 DEFW $C8BC    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D394 DEFW $C8CF    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D396 DEFW $C8CF    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D398 DEFW $C8CF    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D39A DEFW $C8CF    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D39C DEFW $C8DE    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D39E DEFW $C902    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3A0 DEFW $C911    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3A2 DEFW $C937    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3A4 DEFW $C95D    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3A6 DEFW $C97D    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3A8 DEFW $C96E    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3AA DEFW $C96E    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3AC DEFW $C97D    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3AE DEFW $C96E    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3B0 DEFW $C98B    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3B2 DEFW $C99D    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3B4 DEFW $C9B1    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3B6 DEFW $C9D1    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3B8 DEFW $C9E3    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3BA DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3BC DEFW $C9F9    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3BE DEFW $CA22    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3C0 DEFW $CA36    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3C2 DEFW $CA6D    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3C4 DEFW $CA78    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3C6 DEFW $CA93    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3C8 DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3CA DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3CC DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3CE DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3D0 DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3D2 DEFW $CABB    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3D4 DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3D6 DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3D8 DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3DA DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3DC DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3DE DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3E0 DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3E2 DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3E4 DEFW $CACF    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3E6 DEFW $CADE    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3E8 DEFW $CADE    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).
 $D3EA DEFW $0000    ; Item #N((#PC-$D34E)/$02): #ITEM((#PC-$D34E)/$02).

; Table: Room Descriptions
@label=Table_RoomDescriptions
g$D3EC DEFW $0000    ; N/A.
 $D3EE DEFW $0000    ; N/A.
 $D3F0 DEFW $CB06    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D3F2 DEFW $CB2A    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D3F4 DEFW $CB66    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D3F6 DEFW $CB78    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D3F8 DEFW $CB78    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D3FA DEFW $CB78    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D3FC DEFW $CB8E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D3FE DEFW $CB8E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D400 DEFW $CB8E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D402 DEFW $CBC1    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D404 DEFW $CBC1    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D406 DEFW $CBC1    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D408 DEFW $CBC1    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D40A DEFW $CC14    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D40C DEFW $CC14    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D40E DEFW $CC27    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D410 DEFW $CC4C    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D412 DEFW $CC8F    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D414 DEFW $CCBD    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D416 DEFW $CCF1    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D418 DEFW $CD18    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D41A DEFW $CD18    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D41C DEFW $CD18    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D41E DEFW $CD18    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D420 DEFW $CD18    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D422 DEFW $CD18    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D424 DEFW $CD18    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D426 DEFW $CD18    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D428 DEFW $CD18    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D42A DEFW $CD53    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D42C DEFW $CD6B    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D42E DEFW $CD6B    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D430 DEFW $CD7E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D432 DEFW $CDBF    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D434 DEFW $CDBF    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D436 DEFW $CDCF    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D438 DEFW $CDCF    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D43A DEFW $CE10    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D43C DEFW $CE21    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D43E DEFW $CE21    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D440 DEFW $CE21    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D442 DEFW $CE31    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D444 DEFW $CE54    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D446 DEFW $CE64    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D448 DEFW $CE81    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D44A DEFW $CEB6    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D44C DEFW $CECA    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D44E DEFW $CEFE    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D450 DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D452 DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D454 DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D456 DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D458 DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D45A DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D45C DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D45E DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D460 DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D462 DEFW $CF0E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D464 DEFW $CF42    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D466 DEFW $CF65    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D468 DEFW $CF76    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D46A DEFW $CF91    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D46C DEFW $CFC4    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D46E DEFW $CFC4    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D470 DEFW $CFC4    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D472 DEFW $CFD0    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D474 DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D476 DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D478 DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D47A DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D47C DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D47E DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D480 DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D482 DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D484 DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D486 DEFW $CFFB    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D488 DEFW $D02E    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D48A DEFW $D052    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D48C DEFW $D07D    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D48E DEFW $D08F    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D490 DEFW $D0B6    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D492 DEFW $CFC4    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D494 DEFW $CFC4    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D496 DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D498 DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D49A DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D49C DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D49E DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4A0 DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4A2 DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4A4 DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4A6 DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4A8 DEFW $D0C7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4AA DEFW $CFC4    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4AC DEFW $D0DF    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4AE DEFW $D0F3    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4B0 DEFW $D107    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4B2 DEFW $CFC4    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4B4 DEFW $D124    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4B6 DEFW $CFC4    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4B8 DEFW $D155    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4BA DEFW $D163    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4BC DEFW $D173    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4BE DEFW $CFC4    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4C0 DEFW $D191    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4C2 DEFW $CB66    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).
 $D4C4 DEFW $D1A7    ; Room
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D3EC)/$02)).

; Table: Object Noun Phrases
@label=Table_ObjectNounPhrases
g$D4C6 DEFW $D1B3    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4C8 DEFW $D1BB    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4CA DEFW $D1C3    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4CC DEFW $D1CD    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4CE DEFW $D1D3    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4D0 DEFW $D1DC    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4D2 DEFW $D1E4    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4D4 DEFW $D1EE    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4D6 DEFW $D1F4    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4D8 DEFW $D200    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4DA DEFW $D20E    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4DC DEFW $D214    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4DE DEFW $D21B    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4E0 DEFW $D225    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4E2 DEFW $D22D    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4E4 DEFW $D234    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4E6 DEFW $D23F    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4E8 DEFW $D249    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4EA DEFW $D24F    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4EC DEFW $D257    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4EE DEFW $D25F    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4F0 DEFW $D268    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4F2 DEFW $D26F    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4F4 DEFW $D278    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4F6 DEFW $D286    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4F8 DEFW $D28F    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4FA DEFW $D298    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4FC DEFW $D29F    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D4FE DEFW $D2AB    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D500 DEFW $D2B2    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D502 DEFW $D2BC    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D504 DEFW $D2C7    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D506 DEFW $D2CE    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D508 DEFW $D2D7    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D50A DEFW $D2DF    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D50C DEFW $D2E8    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D50E DEFW $D2F1    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D510 DEFW $D2FB    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D512 DEFW $D302    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D514 DEFW $D30D    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D516 DEFW $D314    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D518 DEFW $D31A    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D51A DEFW $D321    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D51C DEFW $D328    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D51E DEFW $D32F    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D520 DEFW $D336    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D522 DEFW $D33C    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).
 $D524 DEFW $D344    ; Object
                     ; #R(#PEEK(#PC+$01)*$100+#PEEK(#PC))(#N((#PC-$D4C6)/$02)):
                     ; #OBJECT((#PC-$D4C6)/$02).

; Messaging: "Congratulations!!<CR>Your Quest Has Been Successful.<CR>You Weigh
; Anchor And Then Sail<CR>Off Into The Sunset With The<CR>Fabulous Jewels Of
; Babylon."
@label=Messaging_Congratulations
t$D526 DEFM "Congratulations!!",$0D,"Your quest has been successful.",$0D,"You weigh ancho" ; {"#STR$D526,$08($b==$FF)".
 $D567 DEFM "r and then sail",$0D,"off into the sunset with the",$0D,"fabulous Jewels of B" ;
 $D5A8 DEFM "abylon."                                                                       ; }
 $D5AF DEFB $FF                                                                             ; Terminator.

; Messaging: "The Crab Has Reached You.<CR>A Monstrous Claw Darts Out<CR>And
; Crushes You."
t$D5B0 DEFM "The crab has reached you.",$0D,"A monstrous claw darts out",$0D,"and crushes " ; {"#STR$D5B0,$08($b==$FF)".
 $D5F1 DEFM "you."                                                                          ; }
 $D5F5 DEFB $FF                                                                             ; Terminator.

; Messaging: "A Tentacle Suddenly Encircles<CR>You And Crushes You."
t$D5F6 DEFM "A tentacle suddenly encircles",$0D,"you and crushes you." ; "#STR$D5F6,$08($b==$FF)".
 $D628 DEFB $FF                                                        ; Terminator.

; Messaging: "You Drank Too Much Rum.<CR>You Stumble And Slip<CR>And Fall Over
; The Edge."
t$D629 DEFM "You drank too much rum.",$0D,"You stumble and slip",$0D,"and fall over the ed" ; {"#STR$D629,$08($b==$FF)".
 $D66A DEFM "ge."                                                                           ; }
 $D66D DEFB $FF                                                                             ; Terminator.

; Messaging: "The Lion Pounces Upon You.<CR>It Mauls You Savagely."
t$D66E DEFM "The lion pounces upon you.",$0D,"It mauls you savagely." ; "#STR$D66E,$08($b==$FF)".
 $D69F DEFB $FF                                                       ; Terminator.

; Messaging: "The Crocodile Lunges At You.<CR>You Are Caught In
; The<CR>Vicious,Snapping Jaws."
t$D6A0 DEFM "The crocodile lunges at you.",$0D,"You are caught in the",$0D,"vicious,snappi" ; {"#STR$D6A0,$08($b==$FF)".
 $D6E1 DEFM "ng jaws."                                                                      ; }
 $D6E9 DEFB $FF                                                                             ; Terminator.

; Messaging: "<CR>A Seagull Soars In The Breeze<CR>Above You..."
t$D6EA DEFM $0D,"A seagull soars in the breeze",$0D,"above you..." ; "#STR$D6EA,$08($b==$FF)".
 $D715 DEFB $FF                                                    ; Terminator.

; Messaging: "It Wheels Gently,<CR>And Then Flies Off."
t$D716 DEFM "It wheels gently,",$0D,"and then flies off." ; "#STR$D716,$08($b==$FF)".
 $D73B DEFB $FF                                           ; Terminator.

; Messaging: "<CR>A Rat Runs Out On To The<CR>Path,In Front Of You..."
t$D73C DEFM $0D,"A rat runs out on to the",$0D,"path,in front of you..." ; "#STR$D73C,$08($b==$FF)".
 $D76D DEFB $FF                                                          ; Terminator.

; Messaging: "It Sniffs The Air And Then<CR>Scurries Off."
t$D76E DEFM "It sniffs the air and then",$0D,"scurries off." ; "#STR$D76E,$08($b==$FF)".
 $D796 DEFB $FF                                              ; Terminator.

; Messaging: "<CR>A Deer Appears..."
t$D797 DEFM $0D,"A deer appears..." ; "#STR$D797,$08($b==$FF)".
 $D7A9 DEFB $FF                     ; Terminator.

; Messaging: "It Sees You And Runs Away."
t$D7AA DEFM "It sees you and runs away." ; "#STR$D7AA,$08($b==$FF)".
 $D7C4 DEFB $FF                          ; Terminator.

; Messaging: "<CR>A Pirate Attacks You..."
t$D7C5 DEFM $0D,"A pirate attacks you..." ; "#STR$D7C5,$08($b==$FF)".
 $D7DD DEFB $FF                           ; Terminator.

; Messaging: "But You Avoid His Blow."
t$D7DE DEFM "But you avoid his blow." ; "#STR$D7DE,$08($b==$FF)".
 $D7F5 DEFB $FF                       ; Terminator.

; Messaging: "After A Fierce Struggle<CR>He Overpowers You."
t$D7F6 DEFM "After a fierce struggle",$0D,"he overpowers you." ; "#STR$D7F6,$08($b==$FF)".
 $D820 DEFB $FF                                                ; Terminator.

; Messaging: "<CR>A Long Water Snake<CR>Slithers Toward You..."
t$D821 DEFM $0D,"A long water snake",$0D,"slithers toward you..." ; "#STR$D821,$08($b==$FF)".
 $D84B DEFB $FF                                                   ; Terminator.

; Messaging: "It Suddenly Strikes At You..."
t$D84C DEFM "It suddenly strikes at you..." ; "#STR$D84C,$08($b==$FF)".
 $D869 DEFB $FF                             ; Terminator.

; Messaging: "The Venomous Fangs Sink<CR>Into You."
t$D86A DEFM "The venomous fangs sink",$0D,"into you." ; "#STR$D86A,$08($b==$FF)".
 $D88B DEFB $FF                                       ; Terminator.

; Messaging: "But It Misses And Slips Away."
t$D88C DEFM "But it misses and slips away." ; "#STR$D88C,$08($b==$FF)".
 $D8A9 DEFB $FF                             ; Terminator.

; Messaging: "It Regards You For A Moment,<CR>Then Slips Away."
t$D8AA DEFM "It regards you for a moment,",$0D,"then slips away." ; "#STR$D8AA,$08($b==$FF)".
 $D8D7 DEFB $FF                                                   ; Terminator.

; Messaging: "<CR>A Poisonous Spider Drops On You."
@label=Messaging_PoisonousSpiderDropsOnYou
t$D8D8 DEFM $0D,"A poisonous spider drops on you." ; "#STR$D8D8,$08($b==$FF)".
 $D8F9 DEFB $FF                                    ; Terminator.

; Messaging: "It Lingers A Moment,<CR>Then Scuttles Off."
@label=Messaging_PoisonousSpiderScuttlesOff
t$D8FA DEFM "It lingers a moment,",$0D,"then scuttles off." ; "#STR$D8FA,$08($b==$FF)".
 $D921 DEFB $FF                                             ; Terminator.

; Messaging: "It Stings You."
@label=Messaging_PoisonousSpiderStingsYou
t$D922 DEFM "It stings you." ; "#STR$D922,$08($b==$FF)".
 $D930 DEFB $FF              ; Terminator.

; Messaging: "The Natives Close In.<CR>You Struggle Bravely But<CR>They
; Overwhelm You."
t$D931 DEFM "The natives close in.",$0D,"You struggle bravely but",$0D,"they overwhelm you" ; {"#STR$D931,$08($b==$FF)".
 $D972 DEFM "."                                                                             ; }
 $D973 DEFB $FF                                                                             ; Terminator.

; Messaging: "You're Really In The Soup Now."
t$D974 DEFM "You're really in the soup now." ; "#STR$D974,$08($b==$FF)".
 $D992 DEFB $FF                              ; Terminator.

; Messaging: "Sorry...<CR>That Was In Poor Taste."
t$D993 DEFM "Sorry...",$0D,"That was in poor taste." ; "#STR$D993,$08($b==$FF)".
 $D9B3 DEFB $FF                                      ; Terminator.

; Messaging: "Try Distracting Them."
t$D9B4 DEFM "Try distracting them." ; "#STR$D9B4,$08($b==$FF)".
 $D9C9 DEFB $FF                     ; Terminator.

; Messaging: "Keep The Noise Down."
t$D9CA DEFM "Keep the noise down." ; "#STR$D9CA,$08($b==$FF)".
 $D9DE DEFB $FF                    ; Terminator.

; Messaging: "Look At Those Jaws!"
t$D9DF DEFM "Look at those JAWS!" ; "#STR$D9DF,$08($b==$FF)".
 $D9F2 DEFB $FF                   ; Terminator.

; Messaging: "Work It Out For Yourself."
t$D9F3 DEFM "Work it out for yourself." ; "#STR$D9F3,$08($b==$FF)".
 $DA0C DEFB $FF                         ; Terminator.

; Messaging: "You Don't Really Need It."
t$DA0D DEFM "You don't really need it." ; "#STR$DA0D,$08($b==$FF)".
 $DA26 DEFB $FF                         ; Terminator.

; Messaging: "Nice Pussy!"
t$DA27 DEFM "Nice pussy!" ; "#STR$DA27,$08($b==$FF)".
 $DA32 DEFB $FF           ; Terminator.

; Messaging: "Pretty Polly!"
t$DA33 DEFM "Pretty polly!" ; "#STR$DA33,$08($b==$FF)".
 $DA40 DEFB $FF             ; Terminator.

; Messaging: "Now You're Really Lost."
t$DA41 DEFM "Now you're really lost." ; "#STR$DA41,$08($b==$FF)".
 $DA58 DEFB $FF                       ; Terminator.

; Messaging: "Try Climbing."
t$DA59 DEFM "Try climbing." ; "#STR$DA59,$08($b==$FF)".
 $DA66 DEFB $FF             ; Terminator.

; Messaging: "Try Rowing!"
t$DA67 DEFM "Try rowing!" ; "#STR$DA67,$08($b==$FF)".
 $DA72 DEFB $FF           ; Terminator.

; Messaging: "It's Full Of Rum!"
t$DA73 DEFM "It's full of rum!" ; "#STR$DA73,$08($b==$FF)".
 $DA84 DEFB $FF                 ; Terminator.

; Messaging: "It's A Red Herring!"
t$DA85 DEFM "It's a red herring!" ; "#STR$DA85,$08($b==$FF)".
 $DA98 DEFB $FF                   ; Terminator.

; Messaging: "It Appears To Work."
t$DA99 DEFM "It appears to work." ; "#STR$DA99,$08($b==$FF)".
 $DAAC DEFB $FF                   ; Terminator.

; Messaging: "It Is Quite Well Made<CR>And In Good Condition."
t$DAAD DEFM "It is quite well made",$0D,"and in good condition." ; "#STR$DAAD,$08($b==$FF)".
 $DAD9 DEFB $FF                                                  ; Terminator.

; Messaging: "It Has A Circular Cross-Section."
t$DADA DEFM "It has a circular cross-section." ; "#STR$DADA,$08($b==$FF)".
 $DAFA DEFB $FF                                ; Terminator.

; Messaging: "It Looks Delicious."
t$DAFB DEFM "It looks delicious." ; "#STR$DAFB,$08($b==$FF)".
 $DB0E DEFB $FF                   ; Terminator.

; Messaging: "Be Careful.<CR>It Won't Carry Much Weight."
t$DB0F DEFM "Be careful.",$0D,"It won't carry much weight." ; "#STR$DB0F,$08($b==$FF)".
 $DB36 DEFB $FF                                             ; Terminator.

; Messaging: "They Are Very Beautiful<CR>And Very Heavy."
t$DB37 DEFM "They are very beautiful",$0D,"and very heavy." ; "#STR$DB37,$08($b==$FF)".
 $DB5E DEFB $FF                                             ; Terminator.

; Messaging: "That's Not Such A Good Idea."
t$DB5F DEFM "That's not such a good idea." ; "#STR$DB5F,$08($b==$FF)".
 $DB7B DEFB $FF                            ; Terminator.

; Messaging: "The Door Rolls Shut."
t$DB7C DEFM "The door rolls shut." ; "#STR$DB7C,$08($b==$FF)".
 $DB90 DEFB $FF                    ; Terminator.

; Messaging: "<CR>Ouch!!<CR>The Match Has Burned Away,<CR>Scorching Your
; Fingers."
t$DB91 DEFM $0D,"Ouch!!",$0D,"The match has burned away,",$0D,"scorching your fingers." ; "#STR$DB91,$08($b==$FF)".
 $DBCB DEFB $FF                                                                         ; Terminator.

; Messaging: "As You Start To Move,<CR>The Parrot Squawks...<CR>The Pirate
; Wakes<CR>And Quickly Shoots You."
t$DBCC DEFM "As you start to move,",$0D,"the parrot squawks...",$0D,"The pirate wakes",$0D,"and " ; {"#STR$DBCC,$08($b==$FF)".
 $DC0D DEFM "quickly shoots you."                                                                 ; }
 $DC20 DEFB $FF                                                                                   ; Terminator.

; Messaging: "You're In It Already."
t$DC21 DEFM "You're in it already." ; "#STR$DC21,$08($b==$FF)".
 $DC36 DEFB $FF                     ; Terminator.

; Messaging: "You're Not In The Boat."
t$DC37 DEFM "You're not in the boat." ; "#STR$DC37,$08($b==$FF)".
 $DC4E DEFB $FF                       ; Terminator.

; Messaging: "You Fling The Spear,But The<CR>Lion Easily Avoids It."
t$DC4F DEFM "You fling the spear,but the",$0D,"lion easily avoids it." ; "#STR$DC4F,$08($b==$FF)".
 $DC81 DEFB $FF                                                        ; Terminator.

; Messaging: "The Coconut Bounces Off<CR>The Lion's Head.He Shakes His<CR>Long
; Mane In Anger.I Think<CR>You've Got His Attention."
t$DC82 DEFM "The coconut bounces off",$0D,"the lion's head.He shakes his",$0D,"long mane i" ; {"#STR$DC82,$08($b==$FF)".
 $DCC3 DEFM "n anger.I think",$0D,"you've got his attention."                               ; }
 $DCEC DEFB $FF                                                                             ; Terminator.

; Messaging: "He Sniffs The Fruit But<CR>Otherwise Ignores It."
t$DCED DEFM "He sniffs the fruit but",$0D,"otherwise ignores it." ; "#STR$DCED,$08($b==$FF)".
 $DD1A DEFB $FF                                                   ; Terminator.

; Messaging: "The Lion Takes The Fish In<CR>His Massive Jaws And
; Then<CR>Disappears Into The Jungle."
t$DD1B DEFM "The lion takes the fish in",$0D,"his massive jaws and then",$0D,"disappears i" ; {"#STR$DD1B,$08($b==$FF)".
 $DD5C DEFM "nto the jungle."                                                               ; }
 $DD6B DEFB $FF                                                                             ; Terminator.

; Messaging: "The Parrot Catches The Fruit<CR>In Its Beak And Swallows
; It.<CR>It Flutters Momentarily,Then<CR>Falls To The Ground,Dead."
t$DD6C DEFM "The parrot catches the fruit",$0D,"in its beak and swallows it.",$0D,"It flut" ; {"#STR$DD6C,$08($b==$FF)".
 $DDAD DEFM "ters momentarily,then",$0D,"falls to the ground,dead."                         ; }
 $DDDC DEFB $FF                                                                             ; Terminator.

; Messaging: "The Cannibal Drops The Spear<CR>And Takes The Watch.<CR>He
; Examines It Briefly And<CR>Places It To His Ear. The<CR>Other Natives Gather
; Round Him<CR>And Lose All Interest In You."
t$DDDD DEFM "The cannibal drops the spear",$0D,"and takes the watch.",$0D,"He examines it " ; {"#STR$DDDD,$08($b==$FF)".
 $DE1E DEFM "briefly and",$0D,"places it to his ear. The",$0D,"other natives gather round " ;
 $DE5F DEFM "him",$0D,"and lose all interest in you."                                       ; }
 $DE80 DEFB $FF                                                                             ; Terminator.

; Messaging: "The Spear Pierces The Oily<CR>Skin And The Octopus
; Sinks<CR>Beneath The Surface In A<CR>Fury Of Froth And Foam.<CR>The Spear Is
; Lost."
t$DE81 DEFM "The spear pierces the oily",$0D,"skin and the octopus sinks",$0D,"beneath the" ; {"#STR$DE81,$08($b==$FF)".
 $DEC2 DEFM " surface in a",$0D,"fury of froth and foam.",$0D,"The spear is lost."          ; }
 $DEFA DEFB $FF                                                                             ; Terminator.

; Messaging: "You've Done That Already."
t$DEFB DEFM "You've done that already." ; "#STR$DEFB,$08($b==$FF)".
 $DF14 DEFB $FF                         ; Terminator.

; Messaging: "The Crocodile Opens Its Huge<CR>Jaws And Catches The Keg.<CR>Its
; Jaws Close On It And<CR>Start To Crush It.<CR>Gunpowder Spills Out."
t$DF15 DEFM "The crocodile opens its huge",$0D,"jaws and catches the keg.",$0D,"Its jaws c" ; {"#STR$DF15,$08($b==$FF)".
 $DF56 DEFM "lose on it and",$0D,"start to crush it.",$0D,"Gunpowder spills out."           ; }
 $DF8D DEFB $FF                                                                             ; Terminator.

; Messaging: "The Match Ignites The<CR>Spilled Gunpowder.<CR>There Is A Mighty
; Flash<CR>And A Thunderous Explosion.<CR>The Crocodile Has Disintegrated."
t$DF8E DEFM "The match ignites the",$0D,"spilled gunpowder.",$0D,"There is a mighty flash",$0D ; {"#STR$DF8E,$08($b==$FF)".
 $DFCF DEFM "and a thunderous explosion.",$0D,"The crocodile has disintegrated."               ; }
 $E00B DEFB $FF                                                                                ; Terminator.

; Messaging: "The Plank Now Spans The Pit."
t$E00C DEFM "The plank now spans the pit." ; "#STR$E00C,$08($b==$FF)".
 $E028 DEFB $FF                            ; Terminator.

; Messaging: "There Is A Faint Click And<CR>The Rock Door Slowly
; Rumbles<CR>Open."
t$E029 DEFM "There is a faint click and",$0D,"the rock door slowly rumbles",$0D,"open." ; "#STR$E029,$08($b==$FF)".
 $E066 DEFB $FF                                                                         ; Terminator.

; Messaging: "You're Not Carrying It."
t$E067 DEFM "You're not carrying it." ; "#STR$E067,$08($b==$FF)".
 $E07E DEFB $FF                       ; Terminator.

; Messaging: "You Stab At The Lion<CR>But The Beast Easily Avoids It."
t$E07F DEFM "You stab at the lion",$0D,"but the beast easily avoids it." ; "#STR$E07F,$08($b==$FF)".
 $E0B3 DEFB $FF                                                          ; Terminator.

; Messaging: "The Cannibals Turn On You.<CR>They Quickly Overwhelm You."
t$E0B4 DEFM "The cannibals turn on you.",$0D,"They quickly overwhelm you." ; "#STR$E0B4,$08($b==$FF)".
 $E0EA DEFB $FF                                                            ; Terminator.

; Messaging: "You Take A Shot...."
t$E0EB DEFM "You take a shot...." ; "#STR$E0EB,$08($b==$FF)".
 $E0FE DEFB $FF                   ; Terminator.

; Messaging: "Good Shooting!<CR>The Pirate Is Dead."
t$E0FF DEFM "Good shooting!",$0D,"The pirate is dead." ; "#STR$E0FF,$08($b==$FF)".
 $E121 DEFB $FF                                        ; Terminator.

; Messaging: "Bad Luck.<CR>You Missed."
t$E122 DEFM "Bad luck.",$0D,"You missed." ; "#STR$E122,$08($b==$FF)".
 $E137 DEFB $FF                           ; Terminator.

; Messaging: "He's Dead Already."
t$E138 DEFM "He's dead already." ; "#STR$E138,$08($b==$FF)".
 $E14A DEFB $FF                  ; Terminator.

; Messaging: "It's Already Dead."
t$E14B DEFM "It's already dead." ; "#STR$E14B,$08($b==$FF)".
 $E15D DEFB $FF                  ; Terminator.

; Messaging: "You Haven't Got A Gun."
t$E15E DEFM "You haven't got a gun." ; "#STR$E15E,$08($b==$FF)".
 $E174 DEFB $FF                      ; Terminator.

; Messaging: "You Eat The Fish.<CR>It Was Quite Tasty."
t$E175 DEFM "You eat the fish.",$0D,"It was quite tasty." ; "#STR$E175,$08($b==$FF)".
 $E19A DEFB $FF                                           ; Terminator.

; Messaging: "You Start To Eat The Fruit.<CR>You Suddenly Feel Very
; Unwell.<CR>Too Late,You Realise That<CR>The Fruit Is Poisonous."
t$E19B DEFM "You start to eat the fruit.",$0D,"You suddenly feel very unwell.",$0D,"Too la" ; {"#STR$E19B,$08($b==$FF)".
 $E1DC DEFM "te,you realise that",$0D,"the fruit is poisonous."                             ; }
 $E207 DEFB $FF                                                                             ; Terminator.

; Messaging: "No. You Don't Like Coconut."
t$E208 DEFM "No. You don't like coconut." ; "#STR$E208,$08($b==$FF)".
 $E223 DEFB $FF                           ; Terminator.

; Messaging: "You Must Be Joking."
t$E224 DEFM "You must be joking." ; "#STR$E224,$08($b==$FF)".
 $E237 DEFB $FF                   ; Terminator.

; Messaging: "You Drink The Golden Liquid.<CR>It Was Delicious..Hic..<CR>You
; Feel Decidedly Light-Headed."
t$E238 DEFM "You drink the golden liquid.",$0D,"It was delicious..hic..",$0D,"You feel dec" ; {"#STR$E238,$08($b==$FF)".
 $E279 DEFM "idedly light-headed."                                                          ; }
 $E28D DEFB $FF                                                                             ; Terminator.

; Messaging: "You Can't.<CR>That's Salt Water."
@label=Messaging_YouCantThatsSaltWater
t$E28E DEFM "You can't.",$0D,"That's salt water." ; "#STR$E28E,$08($b==$FF)".
 $E2AB DEFB $FF                                   ; Terminator.

; Messaging: "You Take A Refreshing Drink."
@label=Messaging_YouTakeARefreshingDrink
t$E2AC DEFM "You take a refreshing drink." ; "#STR$E2AC,$08($b==$FF)".
 $E2C8 DEFB $FF                            ; Terminator.

; Messaging: "It's Already Open."
@label=Messaging_ItsAlreadyOpen
t$E2C9 DEFM "It's already open." ; "#STR$E2C9,$08($b==$FF)".
 $E2DB DEFB $FF                  ; Terminator.

; Messaging: "It's Already Closed."
@label=Messaging_ItsAlreadyClosed
t$E2DC DEFM "It's already closed." ; "#STR$E2DC,$08($b==$FF)".
 $E2F0 DEFB $FF                    ; Terminator.

; Messaging: "The Door Is Locked."
t$E2F1 DEFM "The door is locked." ; "#STR$E2F1,$08($b==$FF)".
 $E304 DEFB $FF                   ; Terminator.

; Messaging: "It's Much Too Heavy."
t$E305 DEFM "It's much too heavy." ; "#STR$E305,$08($b==$FF)".
 $E319 DEFB $FF                    ; Terminator.

; Messaging: "No. I Can't Be Bothered."
t$E31A DEFM "No. I can't be bothered." ; "#STR$E31A,$08($b==$FF)".
 $E332 DEFB $FF                        ; Terminator.

; Messaging: "The Whole Canyon Vibrates.<CR>The Boulder Is Dislodged..."
t$E333 DEFM "The whole canyon vibrates.",$0D,"The boulder is dislodged..." ; "#STR$E333,$08($b==$FF)".
 $E369 DEFB $FF                                                            ; Terminator.

; Messaging: "It Falls And Crushes You."
t$E36A DEFM "It falls and crushes you." ; "#STR$E36A,$08($b==$FF)".
 $E383 DEFB $FF                         ; Terminator.

; Messaging: "It Falls And Crushes The Crab."
t$E384 DEFM "It falls and crushes the crab." ; "#STR$E384,$08($b==$FF)".
 $E3A2 DEFB $FF                              ; Terminator.

; Messaging: "Don't Be Disgusting!"
t$E3A3 DEFM "Don't be disgusting!" ; "#STR$E3A3,$08($b==$FF)".
 $E3B7 DEFB $FF                    ; Terminator.

; Messaging: "I've Warned You Before!<CR>This Deviant Practice<CR>Has Got To
; Stop."
t$E3B8 DEFM "I've warned you before!",$0D,"This deviant practice",$0D,"has got to stop." ; "#STR$E3B8,$08($b==$FF)".
 $E3F6 DEFB $FF                                                                          ; Terminator.

; Messaging: "I Didn't Hear That!"
t$E3F7 DEFM "I didn't hear that!" ; "#STR$E3F7,$08($b==$FF)".
 $E40A DEFB $FF                   ; Terminator.

; Messaging: "A Small Section Of Floor<CR>Lifts Up,Revealing It To Be<CR>A
; Trapdoor."
t$E40B DEFM "A small section of floor",$0D,"lifts up,revealing it to be",$0D,"a trapdoor." ; "#STR$E40B,$08($b==$FF)".
 $E44B DEFB $FF                                                                            ; Terminator.

; Messaging: "You're Wearing It Already."
t$E44C DEFM "You're wearing it already." ; "#STR$E44C,$08($b==$FF)".
 $E466 DEFB $FF                          ; Terminator.

; Messaging: "I Think You Look Quite Stupid."
t$E467 DEFM "I think you look quite stupid." ; "#STR$E467,$08($b==$FF)".
 $E485 DEFB $FF                              ; Terminator.

; Messaging: "No!<CR>I'm Not Letting You Hop Around,<CR>With One Shoe On."
t$E486 DEFM "No!",$0D,"I'm not letting you hop around,",$0D,"with one shoe on." ; "#STR$E486,$08($b==$FF)".
 $E4BB DEFB $FF                                                                 ; Terminator.

; Messaging: "Don't Be Ridiculous."
t$E4BC DEFM "Don't be ridiculous." ; "#STR$E4BC,$08($b==$FF)".
 $E4D0 DEFB $FF                    ; Terminator.

; Messaging: "The Match Flares Into Life.<CR>Hurry It Will Go Out Soon."
@label=Messaging_TheMatchFlaresIntoLife
t$E4D1 DEFM "The match flares into life.",$0D,"Hurry it will go out soon." ; "#STR$E4D1,$08($b==$FF)".
 $E507 DEFB $FF                                                            ; Terminator.

; Messaging: "Using The Crowbar As A Lever,<CR>You Slowly Move The Stone<CR>And
; Uncover A Ring Set Into<CR>The Floor."
@label=Messaging_UsingTheCrowbarAsALever
t$E508 DEFM "Using the crowbar as a lever,",$0D,"You slowly move the stone",$0D,"and uncov" ; {"#STR$E508,$08($b==$FF)".
 $E549 DEFM "er a ring set into",$0D,"the floor."                                           ; }
 $E566 DEFB $FF                                                                             ; Terminator.

; Messaging: "A Massive Wave Hits The Boat.<CR>It Overturns. You're Drowning."
@label=Messaging_AMassiveWaveHitsTheBoat
t$E567 DEFM "A massive wave hits the boat.",$0D,"It overturns. You're drowning." ; "#STR$E567,$08($b==$FF)".
 $E5A3 DEFB $FF                                                                  ; Terminator.

; Messaging: "You Can't Swim."
@label=Messaging_YouCantSwim
t$E5A4 DEFM "You can't swim." ; "#STR$E5A4,$08($b==$FF)".
 $E5B3 DEFB $FF               ; Terminator.

; Messaging: "It Has No Apparent Effect."
@label=Messaging_ItHasNoApparentEffect
t$E5B4 DEFM "It has no apparent effect." ; "#STR$E5B4,$08($b==$FF)".
 $E5CE DEFB $FF                          ; Terminator.

; Messaging: "The Bridge Begins To Shake..."
@label=Messaging_TheBridgeBeginsToShake
t$E5CF DEFM "The bridge begins to shake..." ; "#STR$E5CF,$08($b==$FF)".
 $E5EC DEFB $FF                             ; Terminator.

; Messaging: "Suddenly,It Collapses."
@label=Messaging_SuddenlyItCollapses
t$E5ED DEFM "Suddenly,it collapses." ; "#STR$E5ED,$08($b==$FF)".
 $E603 DEFB $FF                      ; Terminator.

; Messaging: "You Haven't Got The Key."
@label=Messaging_YouHaventGotTheKey
t$E604 DEFM "You haven't got the key." ; "#STR$E604,$08($b==$FF)".
 $E61C DEFB $FF                        ; Terminator.

; Table: Vocabulary
@label=Table_Vocabulary
t$E61D DEFM "MATC"           ; Command #N((#PC-$E61D)/$04):
                             ; #OBJECT((#PC-$E61D)/$04).
 $E621 DEFM "PLAN"           ; Command #N((#PC-$E61D)/$04):
                             ; #OBJECT((#PC-$E61D)/$04).
 $E625 DEFM "COCO"           ; Command #N((#PC-$E61D)/$04):
                             ; #OBJECT((#PC-$E61D)/$04).
 $E629 DEFM "ROD "           ; Command #N((#PC-$E61D)/$04):
                             ; #OBJECT((#PC-$E61D)/$04).
 $E62D DEFM "BOTT"           ; Command #N((#PC-$E61D)/$04):
                             ; #OBJECT((#PC-$E61D)/$04).
 $E631 DEFM "RUM "           ; Command #N((#PC-$E61D)/$04):
                             ; #OBJECT((#PC-$E61D)/$04).
 $E635 DEFM "FRUI"           ; Command #N((#PC-$E61D)/$04):
                             ; #OBJECT((#PC-$E61D)/$04).
 $E639 DEFM "GUN "           ; Command #N((#PC-$E61D)/$04):
                             ; #OBJECT((#PC-$E61D)/$04).
 $E63D DEFM "EYEP,PATC"      ; Command #N((#PC-$E61D)/$04):
                             ; #OBJECT((#PC-$E61D)/$04).
 $E646 DEFM "GUNP,POWD"      ; Command #N((#PC-$E621)/$04):
                             ; #OBJECT((#PC-$E621)/$04).
 $E64F DEFM "KEG "           ; Command #N((#PC-$E625)/$04):
                             ; #OBJECT((#PC-$E625)/$04).
 $E653 DEFM "SHOE"           ; Command #N((#PC-$E625)/$04):
                             ; #OBJECT((#PC-$E625)/$04).
 $E657 DEFM "SEXT"           ; Command #N((#PC-$E625)/$04):
                             ; #OBJECT((#PC-$E625)/$04).
 $E65B DEFM "WATC"           ; Command #N((#PC-$E625)/$04):
                             ; #OBJECT((#PC-$E625)/$04).
 $E65F DEFM "FISH,HERR"      ; Command #N((#PC-$E625)/$04):
                             ; #OBJECT((#PC-$E625)/$04).
 $E668 DEFM "JEWE"           ; Command #N((#PC-$E629)/$04):
                             ; #OBJECT((#PC-$E629)/$04).
 $E66C DEFM "CROW"           ; Command #N((#PC-$E629)/$04):
                             ; #OBJECT((#PC-$E629)/$04).
 $E670 DEFM "KEY "           ; Command #N((#PC-$E629)/$04):
                             ; #OBJECT((#PC-$E629)/$04).
 $E674 DEFM "SKUL"           ; Command #N((#PC-$E629)/$04):
                             ; #OBJECT((#PC-$E629)/$04).
 $E678 DEFM "SPEA"           ; Command #N((#PC-$E629)/$04):
                             ; #OBJECT((#PC-$E629)/$04).
 $E67C DEFM "LADD"           ; Command #N((#PC-$E629)/$04):
                             ; #OBJECT((#PC-$E629)/$04).
 $E680 DEFM "BOAT"           ; Command #N((#PC-$E629)/$04):
                             ; #OBJECT((#PC-$E629)/$04).
 $E684 DEFM "OARS"           ; Command #N((#PC-$E629)/$04):
                             ; #OBJECT((#PC-$E629)/$04).
 $E688 DEFM "CANN,NATI"      ; Command #N((#PC-$E629)/$04):
                             ; #OBJECT((#PC-$E629)/$04).
 $E691 DEFM "PIRA"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E695 DEFM "PARR"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E699 DEFM "CRAB"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E69D DEFM "CROC"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6A1 DEFM "LION"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6A5 DEFM "SEAG"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6A9 DEFM "OCTO"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6AD DEFM "DOOR"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6B1 DEFM "SAIL"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6B5 DEFM "SNAK"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6B9 DEFM "SPID"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6BD DEFM "BRID"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6C1 DEFM "BOUL"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6C5 DEFM "RING"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6C9 DEFM "TRAP"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6CD DEFM "CAVE"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6D1 DEFM "PIT "           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6D5 DEFM "SHIP"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6D9 DEFM "xxxx"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6DD DEFM "DEER"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6E1 DEFM "BODY"           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6E5 DEFM "RAT "           ; Command #N((#PC-$E631)/$04):
                             ; #OBJECT((#PC-$E631)/$04).
 $E6E9 DEFM "H   ,HELP"      ; Command #N$2E.
 $E6F2 DEFM "I   ,INVE"      ; Command #N$2F.
 $E6FB DEFM "L   ,LOOK"      ; Command #N$30.
 $E704 DEFM "N   ,NORT"      ; Command #N$31.
 $E70D DEFM "S   ,SOUT"      ; Command #N$32.
 $E716 DEFM "E   ,EAST"      ; Command #N$33.
 $E71F DEFM "W   ,WEST"      ; Command #N$34.
 $E728 DEFM "U   ,UP  "      ; Command #N$35.
 $E731 DEFM "D   ,DOWN"      ; Command #N$36.
 $E73A DEFM "EXAM"           ; Command #N((#PC-$E65E)/$04).
 $E73E DEFM "LOAD"           ; Command #N((#PC-$E65E)/$04).
 $E742 DEFM "SAVE"           ; Command #N((#PC-$E65E)/$04).
 $E746 DEFM "QUIT"           ; Command #N((#PC-$E65E)/$04).
 $E74A DEFM "TAKE"           ; Command #N((#PC-$E65E)/$04).
 $E74E DEFM "GET "           ; Command #N((#PC-$E65E)/$04).
 $E752 DEFM "DROP"           ; Command #N((#PC-$E65E)/$04).
 $E756 DEFM "THRO"           ; Command #N((#PC-$E65E)/$04).
 $E75A DEFM "LAY ,PLAC,PUT " ; Command #N$3F.
 $E768 DEFM "KILL"           ; Command #N((#PC-$E668)/$04).
 $E76C DEFM "SHOO"           ; Command #N((#PC-$E668)/$04).
 $E770 DEFM "CLIM"           ; Command #N((#PC-$E668)/$04).
 $E774 DEFM "EAT "           ; Command #N((#PC-$E668)/$04).
 $E778 DEFM "DRIN"           ; Command #N((#PC-$E668)/$04).
 $E77C DEFM "OPEN"           ; Command #N((#PC-$E668)/$04).
 $E780 DEFM "CLOS,SHUT"      ; Command #N$46.
 $E789 DEFM "SHOU"           ; Command #N((#PC-$E66D)/$04).
 $E78D DEFM "GIVE"           ; Command #N((#PC-$E66D)/$04).
 $E791 DEFM "INSE"           ; Command #N((#PC-$E66D)/$04).
 $E795 DEFM "xxxx"           ; Command #N((#PC-$E66D)/$04).
 $E799 DEFM "PULL"           ; Command #N((#PC-$E66D)/$04).
 $E79D DEFM "WEAR"           ; Command #N((#PC-$E66D)/$04).
 $E7A1 DEFM "LIGH,STRI"      ; Command #N$4D.
 $E7AA DEFM "ENTE"           ; Command #N((#PC-$E672)/$04).
 $E7AE DEFM "MOVE"           ; Command #N((#PC-$E672)/$04).
 $E7B2 DEFM "UNLO"           ; Command #N((#PC-$E672)/$04).
 $E7B6 DEFM "ROW "           ; Command #N((#PC-$E672)/$04).
 $E7BA DEFM "SWIM"           ; Command #N((#PC-$E672)/$04).
 $E7BE DEFM "IN  "           ; Command #N((#PC-$E672)/$04).
 $E7C2 DEFM "INTO"           ; Command #N((#PC-$E672)/$04).
 $E7C6 DEFM "TO  ,AT  "      ; Command #N$55.
 $E7CF DEFM "OUT "           ; Command #N((#PC-$E677)/$04).
 $E7D3 DEFM "OF  "           ; Command #N((#PC-$E677)/$04).
 $E7D7 DEFM "WITH,USIN"      ; Command #N$58.
 $E7E0 DEFM "ROUN"           ; Command #N$59.
 $E7E4 DEFM "RED ,COLO"      ; Command #N$5A.
 $E7ED DEFM "BABY"           ; Command #N((#PC-$E681)/$04).
 $E7F1 DEFM "ROWI"           ; Command #N((#PC-$E681)/$04).
 $E7F5 DEFM "DEAD"           ; Command #N((#PC-$E681)/$04).
 $E7F9 DEFM "KICK,HIT ,ATTA" ; Command #N$5E.
 $E807 DEFM "STON"           ; Command #N((#PC-$E68B)/$04).
 $E80B DEFM "HOLE"           ; Command #N((#PC-$E68B)/$04).
 $E80F DEFM "HUMA"           ; Command #N((#PC-$E68B)/$04).
 $E813 DEFM "GIAN"           ; Command #N((#PC-$E68B)/$04).
 $E817 DEFM "xxxx"           ; Command #N((#PC-$E68B)/$04).
 $E81B DEFM "FUCK,SCRE"      ; Command #N$64.
 $E824 DEFM "LARG"           ; Command #N((#PC-$E690)/$04).
 $E828 DEFM "WATE"           ; Command #N((#PC-$E690)/$04).
 $E82C DEFM "ACRO,OVER"      ; Command #N$67.
 $E835 DEFM "ROCK"           ; Command #N((#PC-$E695)/$04).
 $E839 DEFM "LOUD"           ; Command #N((#PC-$E695)/$04).
 $E83D DEFB $FF              ; Terminator.

; Table: Object List?
@label=Table_ObjectList
g$E83E DEFB $00      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E83F DEFB $01      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E840 DEFB $02      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E841 DEFB $03      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E842 DEFB $04      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E843 DEFB $05      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E844 DEFB $06      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E845 DEFB $07      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E846 DEFB $08      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E847 DEFB $09      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E848 DEFB $0A      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E849 DEFB $0B      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E84A DEFB $0C      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E84B DEFB $0D      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E84C DEFB $0E      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E84D DEFB $0F      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E84E DEFB $10      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E84F DEFB $11      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E850 DEFB $12      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E851 DEFB $13      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E852 DEFB $14      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E853 DEFB $15      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E854 DEFB $16      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E855 DEFB $17      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E856 DEFB $18      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E857 DEFB $19      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E858 DEFB $1A      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E859 DEFB $1B      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E85A DEFB $1C      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E85B DEFB $1D      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E85C DEFB $1E      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E85D DEFB $1F      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E85E DEFB $20      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E85F DEFB $21      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E860 DEFB $22      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E861 DEFB $23      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E862 DEFB $24      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E863 DEFB $25      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E864 DEFB $26      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E865 DEFB $27      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E866 DEFB $28      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E867 DEFB $29      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E868 DEFB $60      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E869 DEFB $2B      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E86A DEFB $2C      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E86B DEFB $2D      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E86C DEFB $5F      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).
 $E86D DEFB $66      ; Object #N(#PEEK(#PC)): #OBJECT(#PEEK(#PC)).

; Data: Item Groups
;
; See #R$E96A for usage.
@label=Data_ItemGroup_Match
g$E86E DEFB $02      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E86F DEFB $03      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E870 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Plank
 $E871 DEFB $04      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E872 DEFB $05      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E873 DEFB $06      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E874 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Coconut
 $E875 DEFB $07      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E876 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Rod
 $E877 DEFB $08      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E878 DEFB $0A      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E879 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Bottle_1
 $E87A DEFB $0B      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E87B DEFB $0C      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E87C DEFB $0D      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E87D DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Bottle_2
 $E87E DEFB $0B      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E87F DEFB $0C      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E880 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Fruit
 $E881 DEFB $0E      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E882 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Gun
 $E883 DEFB $0F      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E884 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Eyepatch
 $E885 DEFB $10      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E886 DEFB $11      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E887 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_CrocodileWithKeg_1
 $E888 DEFB $12      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E889 DEFB $14      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E88A DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_CrocodileWithKeg_2
 $E88B DEFB $12      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E88C DEFB $14      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E88D DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Shoe
 $E88E DEFB $15      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E88F DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Sextant
 $E890 DEFB $16      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E891 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_CannibalsWithWatch
 $E892 DEFB $17      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E893 DEFB $19      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E894 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Fish
 $E895 DEFB $1B      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E896 DEFB $1C      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E897 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Jewels
 $E898 DEFB $1D      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E899 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Crowbar
 $E89A DEFB $1E      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E89B DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Key
 $E89C DEFB $1F      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E89D DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Skull
 $E89E DEFB $20      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E89F DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_CannibalsWithSpear
 $E8A0 DEFB $18      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8A1 DEFB $1A      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8A2 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Ladder_1
 $E8A3 DEFB $00      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8A4 DEFB $01      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8A5 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Boats
 $E8A6 DEFB $01      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8A7 DEFB $4B      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8A8 DEFB $00      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8A9 DEFB $21      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8AA DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Ladder_2
 $E8AB DEFB $00      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8AC DEFB $01      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8AD DEFB $21      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8AE DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Cannibals
 $E8AF DEFB $18      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8B0 DEFB $19      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8B1 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Pirate
 $E8B2 DEFB $83      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8B3 DEFB $84      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8B4 DEFB $85      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8B5 DEFB $88      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8B6 DEFB $23      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8B7 DEFB $24      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8B8 DEFB $25      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8B9 DEFB $26      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8BA DEFB $22      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8BB DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Parrot
 $E8BC DEFB $27      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8BD DEFB $28      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8BE DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Crab
 $E8BF DEFB $29      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8C0 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Crocodile
 $E8C1 DEFB $13      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8C2 DEFB $14      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8C3 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Lion
 $E8C4 DEFB $2A      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8C5 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Seagull
 $E8C6 DEFB $80      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8C7 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Octopus
 $E8C8 DEFB $2B      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8C9 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Door
 $E8CA DEFB $2C      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8CB DEFB $2D      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8CC DEFB $2E      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8CD DEFB $2F      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8CE DEFB $30      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8CF DEFB $31      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8D0 DEFB $32      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8D1 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Sailor
 $E8D2 DEFB $35      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8D3 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Snake
 $E8D4 DEFB $86      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8D5 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Spider
 $E8D6 DEFB $87      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8D7 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Bridge
 $E8D8 DEFB $37      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8D9 DEFB $38      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8DA DEFB $4E      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8DB DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Boulder
 $E8DC DEFB $39      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8DD DEFB $3A      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8DE DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_TrapdoorWithRing
 $E8DF DEFB $3B      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8E0 DEFB $34      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8E1 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Trapdoor
 $E8E2 DEFB $34      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8E3 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_CaveSlime
 $E8E4 DEFB $49      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8E5 DEFB $3C      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8E6 DEFB $3D      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8E7 DEFB $3E      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8E8 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Pit
 $E8E9 DEFB $3F      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8EA DEFB $40      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8EB DEFB $41      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8EC DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Ship
 $E8ED DEFB $00      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8EE DEFB $01      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8EF DEFB $4C      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8F0 DEFB $4D      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8F1 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_DoorWithHole
 $E8F2 DEFB $09      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8F3 DEFB $0A      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8F4 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Deer
 $E8F5 DEFB $82      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8F6 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_DeadPirate
 $E8F7 DEFB $23      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8F8 DEFB $24      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8F9 DEFB $25      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8FA DEFB $26      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8FB DEFB $28      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8FC DEFB $35      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8FD DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Rat
 $E8FE DEFB $81      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E8FF DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Stone
 $E900 DEFB $42      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E901 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
@label=Data_ItemGroup_Water
 $E902 DEFB $00      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E903 DEFB $01      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E904 DEFB $21      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E905 DEFB $43      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E906 DEFB $44      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E907 DEFB $3D      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E908 DEFB $45      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E909 DEFB $46      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E90A DEFB $47      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E90B DEFB $48      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).
 $E90C DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Item #N(#PEEK(#PC)):
                     ; #ITEM(#PEEK(#PC))).

; Table: Verb Word Tokens
;
; A list of all available verb tokens in the game. See #R$BD2C.
@label=Table_VerbWordTokens
g$E90D DEFB $2E      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E90E DEFB $2F      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E90F DEFB $30      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E910 DEFB $31      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E911 DEFB $32      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E912 DEFB $33      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E913 DEFB $34      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E914 DEFB $35      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E915 DEFB $36      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E916 DEFB $37      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E917 DEFB $38      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E918 DEFB $39      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E919 DEFB $3A      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E91A DEFB $3B      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E91B DEFB $3C      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E91C DEFB $3D      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E91D DEFB $3E      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E91E DEFB $48      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E91F DEFB $3F      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E920 DEFB $40      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E921 DEFB $41      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E922 DEFB $42      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E923 DEFB $43      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E924 DEFB $44      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E925 DEFB $45      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E926 DEFB $46      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E927 DEFB $47      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E928 DEFB $49      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E929 DEFB $64      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E92A DEFB $4B      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E92B DEFB $4C      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E92C DEFB $4D      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E92D DEFB $4E      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E92E DEFB $4F      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E92F DEFB $50      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E930 DEFB $51      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E931 DEFB $5E      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).
 $E932 DEFB $52      ; Verb word token #N(#PEEK(#PC)): #TOKEN(#PEEK(#PC)).

; Data: Scenic Event Rooms
@label=Data_ScenicEvents_01
g$E933 DEFB $05      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E934 DEFB $06      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E935 DEFB $07      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E936 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
@label=Data_ScenicEvents_02
 $E937 DEFB $20      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E938 DEFB $21      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E939 DEFB $22      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E93A DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
@label=Data_ScenicEvents_03
 $E93B DEFB $25      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E93C DEFB $26      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E93D DEFB $27      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E93E DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
@label=Data_ScenicEvents_04
 $E93F DEFB $55      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E940 DEFB $56      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E941 DEFB $57      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E942 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
@label=Data_ScenicEvents_05
 $E943 DEFB $5C      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E944 DEFB $5D      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E945 DEFB $5E      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E946 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
@label=Data_ScenicEvents_06
 $E947 DEFB $63      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E948 DEFB $64      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E949 DEFB $65      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E94A DEFB $66      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E94B DEFB $67      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E94C DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
@label=Data_ScenicEvents_07
 $E94D DEFB $44      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E94E DEFB $45      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E94F DEFB $48      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E950 DEFB $4A      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E951 DEFB $4B      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E952 DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
@label=Data_ScenicEvents_08
 $E953 DEFB $34      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E954 DEFB $36      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E955 DEFB $37      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E956 DEFB $38      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E957 DEFB $39      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E958 DEFB $3A      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E959 DEFB $3B      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E95A DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
@label=Data_ScenicEvents_09
 $E95B DEFB $51      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).
 $E95C DEFB $FF      ; #IF(#PEEK(#PC)==$FF)(Terminator,Room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC))).

; Table: Rooms With Images
;
; See #R$FFA8.
@label=Table_RoomsWithImages
g$E95D DEFB $03      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E95E DEFB $08      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E95F DEFB $09      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E960 DEFB $0A      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E961 DEFB $6C      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E962 DEFB $3E      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E963 DEFB $6A      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E964 DEFB $1F      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E965 DEFB $28      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E966 DEFB $29      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E967 DEFB $2A      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E968 DEFB $52      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).
 $E969 DEFB $62      ; Location Slot: #N(#PC-$E95D) - room #N(#PEEK(#PC)):
                     ; #ROOM(#PEEK(#PC)).

; Table: Item Grouping
;
; Items may have several item IDs which relate to a single item, this
; table groups the items together to assist the parser with knowing that tokens
; refer to the same thing.
; .
; Some examples are:
; #TABLE(default,centre,centre,centre)
; { =h Item ID | =h Item Name | =h Relates To: }
; { #R$E86E(#N$02) | #ITEM$02 | =r2 The Match }
; { #R$E86F(#N$03) | #ITEM$03 }
; { =h Item ID | =h Item Name | =h Relates To: }
; { #R$E885(#N$10) | #ITEM$10 | =r2 The Eyepatch }
; { #R$E886(#N$11) | #ITEM$11 }
; { =h Item ID | =h Item Name | =h Relates To: }
; { #R$E8BC(#N$27) | #ITEM$27 | =r2 The Parrot }
; { #R$E8BD(#N$28) | #ITEM$28 }
; TABLE#
@label=Table_ItemGrouping
g$E96A DEFW $E86E    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E96C DEFW $E871    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E96E DEFW $E875    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E970 DEFW $E877    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E972 DEFW $E87A    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E974 DEFW $E87E    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E976 DEFW $E881    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E978 DEFW $E883    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E97A DEFW $E885    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E97C DEFW $E888    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E97E DEFW $E88B    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E980 DEFW $E88E    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E982 DEFW $E890    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E984 DEFW $E892    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E986 DEFW $E895    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E988 DEFW $E898    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E98A DEFW $E89A    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E98C DEFW $E89C    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E98E DEFW $E89E    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E990 DEFW $E8A0    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E992 DEFW $E8A3    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E994 DEFW $E8A6    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E996 DEFW $E8AB    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E998 DEFW $E8AF    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E99A DEFW $E8B2    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E99C DEFW $E8BC    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E99E DEFW $E8BF    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9A0 DEFW $E8C1    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9A2 DEFW $E8C4    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9A4 DEFW $E8C6    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9A6 DEFW $E8C8    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9A8 DEFW $E8CA    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9AA DEFW $E8D2    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9AC DEFW $E8D4    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9AE DEFW $E8D6    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9B0 DEFW $E8D8    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9B2 DEFW $E8DC    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9B4 DEFW $E8DF    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9B6 DEFW $E8E2    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9B8 DEFW $E8E4    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9BA DEFW $E8E9    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9BC DEFW $E8ED    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9BE DEFW $E8F2    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9C0 DEFW $E8F5    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9C2 DEFW $E8F7    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9C4 DEFW $E8FE    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9C6 DEFW $E900    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).
 $E9C8 DEFW $E902    ; Item Group: #N((#PC-$E96A)/$02):
                     ; #OBJECT((#PC-$E96A)/$02).

; Data: Phrase Tokens
;
; The user input is broken down into tokens which represent the words
; they've entered. These tokens are then compared against these token patterns
; to determine the outcome the player was trying to communicate.
;
; .
;
; Matches e.g. "bottle".
@label=PhraseTokens_Bottle
g$E9CA DEFB $04      ; #TOKEN(#PEEK(#PC)).
 $E9CB DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "fish", "herring", "red fish", "red herring", "coloured fish",
; "coloured herring".
@label=PhraseTokens_Fish
 $E9CC DEFB $0E      ; #TOKEN(#PEEK(#PC)).
 $E9CD DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $E9CE DEFB $5A      ; #TOKEN(#PEEK(#PC)).
 $E9CF DEFB $0E      ; #TOKEN(#PEEK(#PC)).
 $E9D0 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "watch".
@label=PhraseTokens_Watch
 $E9D1 DEFB $0D      ; #TOKEN(#PEEK(#PC)).
 $E9D2 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "shoe".
@label=PhraseTokens_Shoe
 $E9D3 DEFB $0B      ; #TOKEN(#PEEK(#PC)).
 $E9D4 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "rod".
@label=PhraseTokens_Rod
 $E9D5 DEFB $03      ; #TOKEN(#PEEK(#PC)).
 $E9D6 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "fruit".
@label=PhraseTokens_Fruit
 $E9D7 DEFB $06      ; #TOKEN(#PEEK(#PC)).
 $E9D8 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "bridge".
@label=PhraseTokens_Bridge
 $E9D9 DEFB $23      ; #TOKEN(#PEEK(#PC)).
 $E9DA DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "jewels", "jewels of babylon".
@label=PhraseTokens_Jewels
 $E9DB DEFB $0F      ; #TOKEN(#PEEK(#PC)).
 $E9DC DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $E9DD DEFB $0F      ; #TOKEN(#PEEK(#PC)).
 $E9DE DEFB $57      ; #TOKEN(#PEEK(#PC)).
 $E9DF DEFB $5B      ; #TOKEN(#PEEK(#PC)).
 $E9E0 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "match".
@label=PhraseTokens_Match
 $E9E1 DEFB $00      ; #TOKEN(#PEEK(#PC)).
 $E9E2 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "plank".
@label=PhraseTokens_Plank
 $E9E3 DEFB $01      ; #TOKEN(#PEEK(#PC)).
 $E9E4 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "coconut".
@label=PhraseTokens_Coconut
 $E9E5 DEFB $02      ; #TOKEN(#PEEK(#PC)).
 $E9E6 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "bottle", "rum", "bottle of rum".
@label=PhraseTokens_BottleOfRum
 $E9E7 DEFB $04      ; #TOKEN(#PEEK(#PC)).
 $E9E8 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $E9E9 DEFB $05      ; #TOKEN(#PEEK(#PC)).
 $E9EA DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $E9EB DEFB $04      ; #TOKEN(#PEEK(#PC)).
 $E9EC DEFB $57      ; #TOKEN(#PEEK(#PC)).
 $E9ED DEFB $05      ; #TOKEN(#PEEK(#PC)).
 $E9EE DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "gun".
@label=PhraseTokens_Gun
 $E9EF DEFB $07      ; #TOKEN(#PEEK(#PC)).
 $E9F0 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "eyepatch", "patch".
@label=PhraseTokens_Eyepatch
 $E9F1 DEFB $08      ; #TOKEN(#PEEK(#PC)).
 $E9F2 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "gunpowder", "powder", "keg", "keg of gunpowder",
; "keg of powder".
@label=PhraseTokens_KegGunPowder
 $E9F3 DEFB $09      ; #TOKEN(#PEEK(#PC)).
 $E9F4 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $E9F5 DEFB $0A      ; #TOKEN(#PEEK(#PC)).
 $E9F6 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $E9F7 DEFB $0A      ; #TOKEN(#PEEK(#PC)).
 $E9F8 DEFB $57      ; #TOKEN(#PEEK(#PC)).
 $E9F9 DEFB $09      ; #TOKEN(#PEEK(#PC)).
 $E9FA DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "sextant".
@label=PhraseTokens_Sextant
 $E9FB DEFB $0C      ; #TOKEN(#PEEK(#PC)).
 $E9FC DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "crowbar".
@label=PhraseTokens_Crowbar
 $E9FD DEFB $10      ; #TOKEN(#PEEK(#PC)).
 $E9FE DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "key".
@label=PhraseTokens_Key
 $E9FF DEFB $11      ; #TOKEN(#PEEK(#PC)).
 $EA00 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "skull", "human skull".
@label=PhraseTokens_Skull
 $EA01 DEFB $12      ; #TOKEN(#PEEK(#PC)).
 $EA02 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA03 DEFB $61      ; #TOKEN(#PEEK(#PC)).
 $EA04 DEFB $12      ; #TOKEN(#PEEK(#PC)).
 $EA05 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "spear".
@label=PhraseTokens_Spear
 $EA06 DEFB $13      ; #TOKEN(#PEEK(#PC)).
 $EA07 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "parrot", "dead parrot".
@label=PhraseTokens_Parrot
 $EA08 DEFB $19      ; #TOKEN(#PEEK(#PC)).
 $EA09 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA0A DEFB $5D      ; #TOKEN(#PEEK(#PC)).
 $EA0B DEFB $19      ; #TOKEN(#PEEK(#PC)).
 $EA0C DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "into boat", "in to boat", "in at boat", "into rowing boat",
; "in to rowing boat", "in at rowing boat".
@label=PhraseTokens_IntoBoat
 $EA0D DEFB $54      ; #TOKEN(#PEEK(#PC)).
 $EA0E DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EA0F DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA10 DEFB $53      ; #TOKEN(#PEEK(#PC)).
 $EA11 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA12 DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EA13 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA14 DEFB $54      ; #TOKEN(#PEEK(#PC)).
 $EA15 DEFB $5C      ; #TOKEN(#PEEK(#PC)).
 $EA16 DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EA17 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA18 DEFB $53      ; #TOKEN(#PEEK(#PC)).
 $EA19 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA1A DEFB $5C      ; #TOKEN(#PEEK(#PC)).
 $EA1B DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EA1C DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "out of boat", "out of rowing boat".
@label=PhraseTokens_OutOfBoat
 $EA1D DEFB $56      ; #TOKEN(#PEEK(#PC)).
 $EA1E DEFB $57      ; #TOKEN(#PEEK(#PC)).
 $EA1F DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EA20 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA21 DEFB $56      ; #TOKEN(#PEEK(#PC)).
 $EA22 DEFB $57      ; #TOKEN(#PEEK(#PC)).
 $EA23 DEFB $5C      ; #TOKEN(#PEEK(#PC)).
 $EA24 DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EA25 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "plank across pit", "plank over pit".
@label=PhraseTokens_PlankAcrossPit
 $EA26 DEFB $01      ; #TOKEN(#PEEK(#PC)).
 $EA27 DEFB $67      ; #TOKEN(#PEEK(#PC)).
 $EA28 DEFB $28      ; #TOKEN(#PEEK(#PC)).
 $EA29 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "spear to lion", "spear at lion".
@label=PhraseTokens_SpearAtLion
 $EA2A DEFB $13      ; #TOKEN(#PEEK(#PC)).
 $EA2B DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA2C DEFB $1C      ; #TOKEN(#PEEK(#PC)).
 $EA2D DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "coconut to lion", "coconut at lion".
@label=PhraseTokens_CoconutAtLion
 $EA2E DEFB $02      ; #TOKEN(#PEEK(#PC)).
 $EA2F DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA30 DEFB $1C      ; #TOKEN(#PEEK(#PC)).
 $EA31 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "fruit to lion", "fruit at lion".
@label=PhraseTokens_FruitAtLion
 $EA32 DEFB $06      ; #TOKEN(#PEEK(#PC)).
 $EA33 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA34 DEFB $1C      ; #TOKEN(#PEEK(#PC)).
 $EA35 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "fish to lion", "fish at lion", "herring to lion",
; "herring at lion", "red fish to lion", "red fish at lion",
; "red herring to lion", "red herring at lion",
; "coloured fish to lion", "coloured fish at lion",
; "coloured herring to lion", "coloured herring at lion".
@label=PhraseTokens_FishAtLion
 $EA36 DEFB $0E      ; #TOKEN(#PEEK(#PC)).
 $EA37 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA38 DEFB $1C      ; #TOKEN(#PEEK(#PC)).
 $EA39 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA3A DEFB $5A      ; #TOKEN(#PEEK(#PC)).
 $EA3B DEFB $0E      ; #TOKEN(#PEEK(#PC)).
 $EA3C DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA3D DEFB $1C      ; #TOKEN(#PEEK(#PC)).
 $EA3E DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "fruit to parrot", "fruit at parrot".
@label=PhraseTokens_FruitAtParrot
 $EA3F DEFB $06      ; #TOKEN(#PEEK(#PC)).
 $EA40 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA41 DEFB $19      ; #TOKEN(#PEEK(#PC)).
 $EA42 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "watch to cannibals", "watch at cannibals",
; "watch to natives", "watch at natives".
@label=PhraseTokens_WatchAtCannibals
 $EA43 DEFB $0D      ; #TOKEN(#PEEK(#PC)).
 $EA44 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA45 DEFB $17      ; #TOKEN(#PEEK(#PC)).
 $EA46 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "spear to octopus", "spear at octopus",
; "spear to giant octopus", "spear at giant octopus".
@label=PhraseTokens_SpearAtOctopus
 $EA47 DEFB $13      ; #TOKEN(#PEEK(#PC)).
 $EA48 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA49 DEFB $1E      ; #TOKEN(#PEEK(#PC)).
 $EA4A DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA4B DEFB $13      ; #TOKEN(#PEEK(#PC)).
 $EA4C DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA4D DEFB $62      ; #TOKEN(#PEEK(#PC)).
 $EA4E DEFB $1E      ; #TOKEN(#PEEK(#PC)).
 $EA4F DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "gunpowder to crocodile", "gunpowder at crocodile",
; "powder to crocodile", "powder at crocodile", "keg to crocodile",
; "keg at crocodile", "keg of gunpowder to crocodile",
; "keg of gunpowder at crocodile", "keg of powder to crocodile",
; "keg of powder at crocodile".
@label=PhraseTokens_KegAtCrocodile
 $EA50 DEFB $09      ; #TOKEN(#PEEK(#PC)).
 $EA51 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA52 DEFB $1B      ; #TOKEN(#PEEK(#PC)).
 $EA53 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA54 DEFB $0A      ; #TOKEN(#PEEK(#PC)).
 $EA55 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA56 DEFB $1B      ; #TOKEN(#PEEK(#PC)).
 $EA57 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA58 DEFB $0A      ; #TOKEN(#PEEK(#PC)).
 $EA59 DEFB $57      ; #TOKEN(#PEEK(#PC)).
 $EA5A DEFB $09      ; #TOKEN(#PEEK(#PC)).
 $EA5B DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA5C DEFB $1B      ; #TOKEN(#PEEK(#PC)).
 $EA5D DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "match to keg", "match at keg", "match to gunpowder",
; "match at gunpowder", "match to powder", "match at powder",
; "match to keg of gunpowder", "match at keg of gunpowder",
; "match to keg of powder", "match at keg of powder".
@label=PhraseTokens_MatchAtKeg
 $EA5E DEFB $00      ; #TOKEN(#PEEK(#PC)).
 $EA5F DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA60 DEFB $0A      ; #TOKEN(#PEEK(#PC)).
 $EA61 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA62 DEFB $00      ; #TOKEN(#PEEK(#PC)).
 $EA63 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA64 DEFB $09      ; #TOKEN(#PEEK(#PC)).
 $EA65 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA66 DEFB $00      ; #TOKEN(#PEEK(#PC)).
 $EA67 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA68 DEFB $0A      ; #TOKEN(#PEEK(#PC)).
 $EA69 DEFB $57      ; #TOKEN(#PEEK(#PC)).
 $EA6A DEFB $09      ; #TOKEN(#PEEK(#PC)).
 $EA6B DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "match to crocodile", "match at crocodile".
@label=PhraseTokens_MatchAtCrocodile
 $EA6C DEFB $00      ; #TOKEN(#PEEK(#PC)).
 $EA6D DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA6E DEFB $1B      ; #TOKEN(#PEEK(#PC)).
 $EA6F DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "rod in hole", "rod in round hole", "rod into hole",
; "rod into round hole", "rod in to hole", "rod in at hole",
; "rod in to round hole", "rod in at round hole".
@label=PhraseTokens_RodInHole
 $EA70 DEFB $03      ; #TOKEN(#PEEK(#PC)).
 $EA71 DEFB $53      ; #TOKEN(#PEEK(#PC)).
 $EA72 DEFB $60      ; #TOKEN(#PEEK(#PC)).
 $EA73 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA74 DEFB $03      ; #TOKEN(#PEEK(#PC)).
 $EA75 DEFB $53      ; #TOKEN(#PEEK(#PC)).
 $EA76 DEFB $59      ; #TOKEN(#PEEK(#PC)).
 $EA77 DEFB $60      ; #TOKEN(#PEEK(#PC)).
 $EA78 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA79 DEFB $03      ; #TOKEN(#PEEK(#PC)).
 $EA7A DEFB $54      ; #TOKEN(#PEEK(#PC)).
 $EA7B DEFB $60      ; #TOKEN(#PEEK(#PC)).
 $EA7C DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA7D DEFB $03      ; #TOKEN(#PEEK(#PC)).
 $EA7E DEFB $54      ; #TOKEN(#PEEK(#PC)).
 $EA7F DEFB $59      ; #TOKEN(#PEEK(#PC)).
 $EA80 DEFB $60      ; #TOKEN(#PEEK(#PC)).
 $EA81 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA82 DEFB $03      ; #TOKEN(#PEEK(#PC)).
 $EA83 DEFB $53      ; #TOKEN(#PEEK(#PC)).
 $EA84 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA85 DEFB $60      ; #TOKEN(#PEEK(#PC)).
 $EA86 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA87 DEFB $03      ; #TOKEN(#PEEK(#PC)).
 $EA88 DEFB $53      ; #TOKEN(#PEEK(#PC)).
 $EA89 DEFB $55      ; #TOKEN(#PEEK(#PC)).
 $EA8A DEFB $59      ; #TOKEN(#PEEK(#PC)).
 $EA8B DEFB $60      ; #TOKEN(#PEEK(#PC)).
 $EA8C DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "octopus with spear", "octopus using spear",
; "giant octopus with spear", "giant octopus using spear".
@label=PhraseTokens_OctopusWithSpear
 $EA8D DEFB $1E      ; #TOKEN(#PEEK(#PC)).
 $EA8E DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EA8F DEFB $13      ; #TOKEN(#PEEK(#PC)).
 $EA90 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EA91 DEFB $62      ; #TOKEN(#PEEK(#PC)).
 $EA92 DEFB $1E      ; #TOKEN(#PEEK(#PC)).
 $EA93 DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EA94 DEFB $13      ; #TOKEN(#PEEK(#PC)).
 $EA95 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "lion with spear", "lion using spear".
@label=PhraseTokens_LionWithSpear
 $EA96 DEFB $1C      ; #TOKEN(#PEEK(#PC)).
 $EA97 DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EA98 DEFB $13      ; #TOKEN(#PEEK(#PC)).
 $EA99 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "cannibals with spear", "cannibals using spear",
; "natives with spear", "natives using spear".
@label=PhraseTokens_CannibalsWithSpear
 $EA9A DEFB $17      ; #TOKEN(#PEEK(#PC)).
 $EA9B DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EA9C DEFB $13      ; #TOKEN(#PEEK(#PC)).
 $EA9D DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "pirate with gun", "pirate using gun".
@label=PhraseTokens_PirateWithGun
 $EA9E DEFB $18      ; #TOKEN(#PEEK(#PC)).
 $EA9F DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EAA0 DEFB $07      ; #TOKEN(#PEEK(#PC)).
 $EAA1 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "parrot with gun", "parrot using gun".
@label=PhraseTokens_ParrotWithGun
 $EAA2 DEFB $19      ; #TOKEN(#PEEK(#PC)).
 $EAA3 DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EAA4 DEFB $07      ; #TOKEN(#PEEK(#PC)).
 $EAA5 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "pirate", "pirate with gun", "pirate using gun".
@label=PhraseTokens_PirateWithGun_2
 $EAA6 DEFB $18      ; #TOKEN(#PEEK(#PC)).
 $EAA7 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAA8 DEFB $18      ; #TOKEN(#PEEK(#PC)).
 $EAA9 DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EAAA DEFB $07      ; #TOKEN(#PEEK(#PC)).
 $EAAB DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "parrot", "parrot with gun", "parrot using gun".
@label=PhraseTokens_ParrotWithGun_2
 $EAAC DEFB $19      ; #TOKEN(#PEEK(#PC)).
 $EAAD DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAAE DEFB $19      ; #TOKEN(#PEEK(#PC)).
 $EAAF DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EAB0 DEFB $07      ; #TOKEN(#PEEK(#PC)).
 $EAB1 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "u ladder", "up ladder".
@label=PhraseTokens_UpLadder
 $EAB2 DEFB $35      ; #TOKEN(#PEEK(#PC)).
 $EAB3 DEFB $14      ; #TOKEN(#PEEK(#PC)).
 $EAB4 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "d ladder", "down ladder".
@label=PhraseTokens_DownLadder
 $EAB5 DEFB $36      ; #TOKEN(#PEEK(#PC)).
 $EAB6 DEFB $14      ; #TOKEN(#PEEK(#PC)).
 $EAB7 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "rum".
@label=PhraseTokens_Rum
 $EAB8 DEFB $05      ; #TOKEN(#PEEK(#PC)).
 $EAB9 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "water".
@label=PhraseTokens_Water
 $EABA DEFB $66      ; #TOKEN(#PEEK(#PC)).
 $EABB DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "ladder".
@label=PhraseTokens_Ladder
 $EABC DEFB $14      ; #TOKEN(#PEEK(#PC)).
 $EABD DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "door".
@label=PhraseTokens_Door
 $EABE DEFB $1F      ; #TOKEN(#PEEK(#PC)).
 $EABF DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "rock door", "door".
@label=PhraseTokens_RockDoor
 $EAC0 DEFB $68      ; #TOKEN(#PEEK(#PC)).
 $EAC1 DEFB $1F      ; #TOKEN(#PEEK(#PC)).
 $EAC2 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAC3 DEFB $1F      ; #TOKEN(#PEEK(#PC)).
 $EAC4 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "trapdoor".
@label=PhraseTokens_TrapDoor
 $EAC5 DEFB $26      ; #TOKEN(#PEEK(#PC)).
 $EAC6 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "????", "loud".
@label=PhraseTokens_XXXX
 $EAC7 DEFB $FF      ; #TOKEN(#PEEK(#PC)).
 $EAC8 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAC9 DEFB $69      ; #TOKEN(#PEEK(#PC)).
 $EACA DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "ring".
@label=PhraseTokens_Ring
 $EACB DEFB $25      ; #TOKEN(#PEEK(#PC)).
 $EACC DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "cave".
@label=PhraseTokens_Cave
 $EACD DEFB $27      ; #TOKEN(#PEEK(#PC)).
 $EACE DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "boat", "rowing boat", "ship", "pit".
@label=PhraseTokens_Boat
 $EACF DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EAD0 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAD1 DEFB $5C      ; #TOKEN(#PEEK(#PC)).
 $EAD2 DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EAD3 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAD4 DEFB $29      ; #TOKEN(#PEEK(#PC)).
 $EAD5 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAD6 DEFB $28      ; #TOKEN(#PEEK(#PC)).
 $EAD7 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "stone", "large stone".
@label=PhraseTokens_Stone
 $EAD8 DEFB $5F      ; #TOKEN(#PEEK(#PC)).
 $EAD9 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EADA DEFB $65      ; #TOKEN(#PEEK(#PC)).
 $EADB DEFB $5F      ; #TOKEN(#PEEK(#PC)).
 $EADC DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "stone with crowbar", "stone using crowbar",
; "large stone with crowbar", "large stone using crowbar".
@label=PhraseTokens_StoneWithCrowbar
 $EADD DEFB $5F      ; #TOKEN(#PEEK(#PC)).
 $EADE DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EADF DEFB $10      ; #TOKEN(#PEEK(#PC)).
 $EAE0 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAE1 DEFB $65      ; #TOKEN(#PEEK(#PC)).
 $EAE2 DEFB $5F      ; #TOKEN(#PEEK(#PC)).
 $EAE3 DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EAE4 DEFB $10      ; #TOKEN(#PEEK(#PC)).
 $EAE5 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "door", "door with key", "door using key".
@label=PhraseTokens_Door_2
 $EAE6 DEFB $1F      ; #TOKEN(#PEEK(#PC)).
 $EAE7 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAE8 DEFB $1F      ; #TOKEN(#PEEK(#PC)).
 $EAE9 DEFB $58      ; #TOKEN(#PEEK(#PC)).
 $EAEA DEFB $11      ; #TOKEN(#PEEK(#PC)).
 $EAEB DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "n", "north", "boat n", "boat north", "rowing boat n"
; "rowing boat north".
@label=PhraseTokens_North
 $EAEC DEFB $31      ; #TOKEN(#PEEK(#PC)).
 $EAED DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAEE DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EAEF DEFB $31      ; #TOKEN(#PEEK(#PC)).
 $EAF0 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAF1 DEFB $5C      ; #TOKEN(#PEEK(#PC)).
 $EAF2 DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EAF3 DEFB $31      ; #TOKEN(#PEEK(#PC)).
 $EAF4 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "s", "south", "boat s", "boat south", "rowing boat s",
; "rowing boat south".
@label=PhraseTokens_South
 $EAF5 DEFB $32      ; #TOKEN(#PEEK(#PC)).
 $EAF6 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAF7 DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EAF8 DEFB $32      ; #TOKEN(#PEEK(#PC)).
 $EAF9 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EAFA DEFB $5C      ; #TOKEN(#PEEK(#PC)).
 $EAFB DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EAFC DEFB $32      ; #TOKEN(#PEEK(#PC)).
 $EAFD DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "e", "east", "boat e", "boat east", "rowing boat e",
; "rowing boat east".
@label=PhraseTokens_East
 $EAFE DEFB $33      ; #TOKEN(#PEEK(#PC)).
 $EAFF DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EB00 DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EB01 DEFB $33      ; #TOKEN(#PEEK(#PC)).
 $EB02 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EB03 DEFB $5C      ; #TOKEN(#PEEK(#PC)).
 $EB04 DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EB05 DEFB $33      ; #TOKEN(#PEEK(#PC)).
 $EB06 DEFB $FE      ; #TOKEN(#PEEK(#PC)).
; Matches e.g. "w", "west", "boat w", "boat west", "rowing boat w",
; "rowing boat west".
@label=PhraseTokens_West
 $EB07 DEFB $34      ; #TOKEN(#PEEK(#PC)).
 $EB08 DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EB09 DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EB0A DEFB $34      ; #TOKEN(#PEEK(#PC)).
 $EB0B DEFB $FD      ; #TOKEN(#PEEK(#PC)).
 $EB0C DEFB $5C      ; #TOKEN(#PEEK(#PC)).
 $EB0D DEFB $15      ; #TOKEN(#PEEK(#PC)).
 $EB0E DEFB $34      ; #TOKEN(#PEEK(#PC)).
 $EB0F DEFB $FE      ; #TOKEN(#PEEK(#PC)).

; Table: Room Map
;
; .
;
; .
;
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
@label=Table_RoomMap
g$EB10 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB11 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB12 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB13 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB14 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB15 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB16 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB17 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB18 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB19 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB1A DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB1B DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB1C DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB1D DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB1E DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB1F DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB20 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB21 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB22 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB23 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB24 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB25 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB26 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB27 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB28 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB29 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB2A DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB2B DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB2C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB2D DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB2E DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB2F DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB30 DEFB $06      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB31 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB32 DEFB $08      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB33 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB34 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB35 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB36 DEFB $07      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB37 DEFB $05      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB38 DEFB $09      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB39 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB3A DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB3B DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB3C DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB3D DEFB $06      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB3E DEFB $0A      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB3F DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB40 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB41 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB42 DEFB $09      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB43 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB44 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB45 DEFB $05      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB46 DEFB $0D      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB47 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB48 DEFB $0A      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB49 DEFB $08      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB4A DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB4B DEFB $06      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB4C DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB4D DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB4E DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB4F DEFB $09      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB50 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB51 DEFB $07      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB52 DEFB $0F      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB53 DEFB $28      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB54 DEFB $0C      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB55 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB56 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB57 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB58 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB59 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB5A DEFB $0D      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB5B DEFB $0B      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB5C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB5D DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB5E DEFB $10      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB5F DEFB $09      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB60 DEFB $0E      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB61 DEFB $0C      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB62 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB63 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB64 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB65 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB66 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB67 DEFB $0D      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB68 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB69 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB6A DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB6B DEFB $0B      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB6C DEFB $10      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB6D DEFB $2B      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB6E DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB6F DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB70 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB71 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB72 DEFB $0D      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB73 DEFB $0F      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB74 DEFB $13      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB75 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB76 DEFB $14      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB77 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB78 DEFB $16      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB79 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB7A DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB7B DEFB $12      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB7C DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB7D DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB7E DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB7F DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB80 DEFB $11      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB81 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB82 DEFB $43      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB83 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB84 DEFB $14      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB85 DEFB $2C      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB86 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB87 DEFB $10      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB88 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB89 DEFB $11      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB8A DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB8B DEFB $13      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB8C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB8D DEFB $15      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB8E DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB8F DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB90 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB91 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB92 DEFB $14      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB93 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB94 DEFB $11      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB95 DEFB $19      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB96 DEFB $17      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB97 DEFB $19      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB98 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB99 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EB9A DEFB $18      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB9B DEFB $1A      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB9C DEFB $18      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB9D DEFB $16      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB9E DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EB9F DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBA0 DEFB $17      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBA1 DEFB $1B      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBA2 DEFB $1B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBA3 DEFB $17      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBA4 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBA5 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBA6 DEFB $16      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBA7 DEFB $1C      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBA8 DEFB $1A      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBA9 DEFB $16      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBAA DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBAB DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBAC DEFB $17      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBAD DEFB $1D      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBAE DEFB $1B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBAF DEFB $19      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBB0 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBB1 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBB2 DEFB $18      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBB3 DEFB $1E      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBB4 DEFB $18      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBB5 DEFB $1A      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBB6 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBB7 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBB8 DEFB $19      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBB9 DEFB $1C      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBBA DEFB $1D      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBBB DEFB $1C      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBBC DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBBD DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBBE DEFB $1A      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBBF DEFB $1F      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBC0 DEFB $1E      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBC1 DEFB $1C      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBC2 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBC3 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBC4 DEFB $1B      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBC5 DEFB $1E      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBC6 DEFB $1E      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBC7 DEFB $1D      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBC8 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBC9 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBCA DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBCB DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBCC DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBCD DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBCE DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBCF DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBD0 DEFB $1F      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBD1 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBD2 DEFB $21      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBD3 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBD4 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBD5 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBD6 DEFB $1F      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBD7 DEFB $22      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBD8 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBD9 DEFB $20      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBDA DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBDB DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBDC DEFB $21      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBDD DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBDE DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBDF DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBE0 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBE1 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBE2 DEFB $26      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBE3 DEFB $1F      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBE4 DEFB $24      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBE5 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBE6 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBE7 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBE8 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBE9 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBEA DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBEB DEFB $23      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBEC DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBED DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBEE DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBEF DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBF0 DEFB $26      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBF1 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBF2 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBF3 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBF4 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBF5 DEFB $23      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBF6 DEFB $27      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBF7 DEFB $25      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBF8 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBF9 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EBFA DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBFB DEFB $26      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBFC DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBFD DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBFE DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EBFF DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC00 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC01 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC02 DEFB $0B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC03 DEFB $29      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC04 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC05 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC06 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC07 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC08 DEFB $28      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC09 DEFB $2A      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC0A DEFB $2B      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC0B DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC0C DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC0D DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC0E DEFB $29      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC0F DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC10 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC11 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC12 DEFB $0F      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC13 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC14 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC15 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC16 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC17 DEFB $29      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC18 DEFB $3B      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC19 DEFB $2E      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC1A DEFB $13      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC1B DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC1C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC1D DEFB $2D      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC1E DEFB $39      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC1F DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC20 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC21 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC22 DEFB $2C      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC23 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC24 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC25 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC26 DEFB $2C      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC27 DEFB $2F      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC28 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC29 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC2A DEFB $30      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC2B DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC2C DEFB $2E      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC2D DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC2E DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC2F DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC30 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC31 DEFB $2F      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC32 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC33 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC34 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC35 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC36 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC37 DEFB $30      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC38 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC39 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC3A DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC3B DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC3C DEFB $33      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC3D DEFB $35      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC3E DEFB $33      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC3F DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC40 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC41 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC42 DEFB $32      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC43 DEFB $36      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC44 DEFB $34      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC45 DEFB $32      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC46 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC47 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC48 DEFB $34      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC49 DEFB $36      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC4A DEFB $34      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC4B DEFB $33      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC4C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC4D DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC4E DEFB $32      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC4F DEFB $37      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC50 DEFB $36      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC51 DEFB $39      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC52 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC53 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC54 DEFB $33      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC55 DEFB $38      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC56 DEFB $34      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC57 DEFB $35      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC58 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC59 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC5A DEFB $35      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC5B DEFB $3A      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC5C DEFB $38      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC5D DEFB $39      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC5E DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC5F DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC60 DEFB $36      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC61 DEFB $3A      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC62 DEFB $3B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC63 DEFB $37      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC64 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC65 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC66 DEFB $37      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC67 DEFB $2D      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC68 DEFB $3A      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC69 DEFB $35      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC6A DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC6B DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC6C DEFB $37      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC6D DEFB $3B      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC6E DEFB $38      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC6F DEFB $39      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC70 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC71 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC72 DEFB $38      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC73 DEFB $2C      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC74 DEFB $3B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC75 DEFB $3A      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC76 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC77 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC78 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC79 DEFB $32      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC7A DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC7B DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC7C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC7D DEFB $3D      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC7E DEFB $3E      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC7F DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC80 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC81 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC82 DEFB $3C      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC83 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC84 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC85 DEFB $3D      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC86 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC87 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC88 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC89 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC8A DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC8B DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC8C DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC8D DEFB $3E      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC8E DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC8F DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC90 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC91 DEFB $3F      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC92 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC93 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC94 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC95 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC96 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC97 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC98 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC99 DEFB $3F      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC9A DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC9B DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $EC9C DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC9D DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC9E DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $EC9F DEFB $3F      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECA0 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECA1 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECA2 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECA3 DEFB $13      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECA4 DEFB $4B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECA5 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECA6 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECA7 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECA8 DEFB $45      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECA9 DEFB $4A      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECAA DEFB $45      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECAB DEFB $4A      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECAC DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECAD DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECAE DEFB $44      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECAF DEFB $48      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECB0 DEFB $46      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECB1 DEFB $44      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECB2 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECB3 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECB4 DEFB $47      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECB5 DEFB $49      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECB6 DEFB $47      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECB7 DEFB $45      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECB8 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECB9 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECBA DEFB $46      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECBB DEFB $49      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECBC DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECBD DEFB $46      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECBE DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECBF DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECC0 DEFB $45      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECC1 DEFB $4B      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECC2 DEFB $49      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECC3 DEFB $4A      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECC4 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECC5 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECC6 DEFB $46      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECC7 DEFB $4C      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECC8 DEFB $47      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECC9 DEFB $48      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECCA DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECCB DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECCC DEFB $48      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECCD DEFB $44      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECCE DEFB $4B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECCF DEFB $44      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECD0 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECD1 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECD2 DEFB $48      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECD3 DEFB $43      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECD4 DEFB $4C      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECD5 DEFB $4A      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECD6 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECD7 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECD8 DEFB $49      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECD9 DEFB $4D      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECDA DEFB $4D      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECDB DEFB $4B      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECDC DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECDD DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECDE DEFB $4D      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECDF DEFB $4C      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECE0 DEFB $4D      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECE1 DEFB $4C      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECE2 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECE3 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECE4 DEFB $6C      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECE5 DEFB $47      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECE6 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECE7 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECE8 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECE9 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECEA DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECEB DEFB $6C      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECEC DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECED DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECEE DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECEF DEFB $50      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECF0 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECF1 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECF2 DEFB $51      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECF3 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECF4 DEFB $4F      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECF5 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECF6 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECF7 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECF8 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECF9 DEFB $50      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECFA DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECFB DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ECFC DEFB $51      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECFD DEFB $55      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECFE DEFB $54      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ECFF DEFB $53      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED00 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED01 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED02 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED03 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED04 DEFB $52      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED05 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED06 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED07 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED08 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED09 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED0A DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED0B DEFB $52      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED0C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED0D DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED0E DEFB $56      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED0F DEFB $58      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED10 DEFB $56      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED11 DEFB $52      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED12 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED13 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED14 DEFB $55      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED15 DEFB $59      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED16 DEFB $57      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED17 DEFB $55      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED18 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED19 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED1A DEFB $5B      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED1B DEFB $5A      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED1C DEFB $5B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED1D DEFB $56      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED1E DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED1F DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED20 DEFB $55      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED21 DEFB $5C      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED22 DEFB $59      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED23 DEFB $5F      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED24 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED25 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED26 DEFB $56      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED27 DEFB $5D      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED28 DEFB $5A      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED29 DEFB $58      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED2A DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED2B DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED2C DEFB $57      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED2D DEFB $5E      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED2E DEFB $5B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED2F DEFB $59      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED30 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED31 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED32 DEFB $57      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED33 DEFB $5E      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED34 DEFB $57      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED35 DEFB $5A      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED36 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED37 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED38 DEFB $58      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED39 DEFB $5D      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED3A DEFB $5D      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED3B DEFB $5C      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED3C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED3D DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED3E DEFB $59      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED3F DEFB $5C      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED40 DEFB $5E      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED41 DEFB $5C      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED42 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED43 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED44 DEFB $5A      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED45 DEFB $64      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED46 DEFB $5B      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED47 DEFB $5D      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED48 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED49 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED4A DEFB $58      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED4B DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED4C DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED4D DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED4E DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED4F DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED50 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED51 DEFB $61      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED52 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED53 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED54 DEFB $5F      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED55 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED56 DEFB $60      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED57 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED58 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED59 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED5A DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED5B DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED5C DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED5D DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED5E DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED5F DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED60 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED61 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED62 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED63 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED64 DEFB $64      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED65 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED66 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED67 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED68 DEFB $5E      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED69 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED6A DEFB $65      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED6B DEFB $63      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED6C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED6D DEFB $66      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED6E DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED6F DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED70 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED71 DEFB $64      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED72 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED73 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED74 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED75 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED76 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED77 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED78 DEFB $64      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED79 DEFB $67      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED7A DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED7B DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED7C DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED7D DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED7E DEFB $66      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED7F DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED80 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED81 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED82 DEFB $6A      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED83 DEFB $69      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED84 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED85 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED86 DEFB $68      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED87 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED88 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED89 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED8A DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED8B DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED8C DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED8D DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED8E DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED8F DEFB $68      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED90 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED91 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED92 DEFB $00      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED93 DEFB $00      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED94 DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED95 DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED96 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED97 DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
; Room #N((#PC-$EB10)/$06): #ROOM((#PC-$EB10)/$06).
 $ED98 DEFB $4F      ; #IF(#PEEK(#PC)>$00)(North to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED99 DEFB $4E      ; #IF(#PEEK(#PC)>$00)(South to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED9A DEFB $00      ; #IF(#PEEK(#PC)>$00)(East to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED9B DEFB $00      ; #IF(#PEEK(#PC)>$00)(West to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED9C DEFB $00      ; #IF(#PEEK(#PC)>$00)(Up to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).
 $ED9D DEFB $00      ; #IF(#PEEK(#PC)>$00)(Down to room:
                     ; #R($EB10+#PEEK(#PC)*$06)(#N(#PEEK(#PC))),N/A).

; Table: Configurable Exits
@label=Table_ConfigurableExits
g$ED9E DEFW $EB90
 $EDA0 DEFW $EBCA
 $EDA2 DEFW $EBCB
 $EDA4 DEFW $EBCC
 $EDA6 DEFW $EBCD
 $EDA8 DEFW $EC3F
 $EDAA DEFW $EC8A
 $EDAC DEFW $EC8B
 $EDAE DEFW $EC8C
 $EDB0 DEFW $ECBC
 $EDB2 DEFW $ED4F
 $EDB4 DEFW $ED57
 $EDB6 DEFW $ED5C
 $EDB8 DEFW $ED75
 $EDBA DEFW $ED80
 $EDBC DEFW $ED8D
 $EDBE DEFW $EC27
 $EDC0 DEFW $EC2A
 $EDC2 DEFW $EC30

; Game Loop
;
; Used by the routine at #R$FD82.
@label=GameLoop
c$EDC4 CALL $C17D    ;
 $EDC7 CALL $C4EB    ;
 $EDCA CALL $C00A    ;
 $EDCD CALL $C4C7    ;
 $EDD0 JR C,$EDC4    ;
 $EDD2 CALL $C556    ;
 $EDD5 JR $EDC4      ;

; Game Over
;
; Used by the routine at #R$EE9B.
;
; .
;
; Print "#STR$BE31,$08($b==$FF)".
@label=GameOver
c$EDD7 LD HL,$BE31   ; #REGhl=#R$BE31.
 $EDDA CALL $BAB1    ; Call #R$BAB1.
; This entry point is used by the routine at #R$EDF2.
; .
; Print "#STR$BE3F,$08($b==$FF)".
@label=WantAnotherGameInput
*$EDDD LD HL,$BE3F   ; #REGhl=#R$BE3F.
 $EDE0 CALL $BAB1    ; Call #R$BAB1.
@label=WantAnotherGameInput_Loop
*$EDE3 CALL $BA5D    ; Call #R$BA5D.
; The player is done with the game, so reset back to BASIC.
 $EDE6 CP $4E        ; {#HTML(Reset back to BASIC if the keypress is
 $EDE8 JP Z,$0000    ; "<code>#CHR$4E</code>".)}
; The player wants another go...
 $EDEB CP $59        ; {#HTML(Jump to #R$BA50 if the keypress is
 $EDED JP Z,$BA50    ; "<code>#CHR$59</code>".)}
; Just loop round for any other input.
 $EDF0 JR $EDE3      ; Jump to #R$EDE3.

; Game Complete
;
; Used by the routine at #R$EF54.
@label=GameComplete
c$EDF2 CALL $BA6D    ;
 $EDF5 CALL $BA89    ;
; Print "#STR$D526,$08($b==$FF)".
 $EDF8 LD HL,$D526   ;
 $EDFB CALL $BAB1    ;
 $EDFE JR $EDDD      ;

; Fatal Events: Crab
;
; .
;
; .
;
; Make the crab inactive.
@label=Event_Crab
c$EE00 LD HL,$BC66   ; {Reset bit 0 of *#R$BC66 which relates to the crab being
 $EE03 RES 0,(HL)    ; active.}
 $EE05 LD A,$29      ; {Call #R$C35F using item: #ITEM$29.
 $EE07 CALL $C35F    ; }
 $EE0A RET NZ        ; Return if the crab is not in the current room.
; Print "#STR$D5B0,$08($b==$FF)".
 $EE0B LD HL,$D5B0   ; #REGhl=#R$D5B0.
 $EE0E JP $EE9B      ; Jump to #R$EE9B.

; Fatal Events: Tentacle
;
; .
;
; .
;
; Make the tentacle inactive.
@label=Event_Tentacle
c$EE11 LD HL,$BC66   ; {Reset bit 1 of *#R$BC66 which relates to the tentacle
 $EE14 RES 1,(HL)    ; being active.}
 $EE16 LD A,$2B      ; {Call #R$C35F using item: #ITEM$2B.
 $EE18 CALL $C35F    ; }
 $EE1B RET NZ        ; Return if the tentacle is not in the current room.
; Print "#STR$D5F6,$08($b==$FF)".
 $EE1C LD HL,$D5F6   ; #REGhl=#R$D5F6.
 $EE1F JP $EE9B      ; Jump to #R$EE9B.

; Fatal Events: Drunk
;
; .
;
; .
;
; Make the drunkenness inactive.
@label=Event_Drunk
c$EE22 LD HL,$BC66   ; {Reset bit 2 of *#R$BC66 which relates to the player
 $EE25 RES 2,(HL)    ; being drunk.}
 $EE27 LD A,($BCCB)  ; Load *#R$BCCB into #REGa.
 $EE2A LD BC,$0007   ; Set the length of the high places table in #REGbc.
 $EE2D LD HL,$EE39   ; Set a pointer in #REGhl at #R$EE39.
 $EE30 CPIR          ; Search for the current room in the high places table.
 $EE32 RET NZ        ; Return if the player is not currently in any rooms in
                     ; the table.
; The player is both drunk, and in a listed "high place". Uh oh...
; .
; Print "#STR$D629,$08($b==$FF)".
 $EE33 LD HL,$D629   ; #REGhl=#R$D629.
 $EE36 JP $EE9B      ; Jump to #R$EE9B.
; All locations where a drunken player could potentially fall from a
; great height.
@label=Table_HighPlaces
 $EE39 DEFB $28      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $EE3A DEFB $29      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $EE3B DEFB $2A      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $EE3C DEFB $2B      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $EE3D DEFB $23      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $EE3E DEFB $24      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $EE3F DEFB $4F      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).

; Fatal Events: Lion
;
; .
;
; .
;
; Make the lion inactive.
@label=Event_Lion
c$EE40 LD HL,$BC66   ; {Reset bit 3 of *#R$BC66 which relates to the lion being
 $EE43 RES 3,(HL)    ; active.}
 $EE45 LD A,$2A      ; {Call #R$C35F using item: #ITEM$2A.
 $EE47 CALL $C35F    ; }
 $EE4A RET NZ        ; Return if the lion is not in the current room.
; Print "#STR$D66E,$08($b==$FF)".
 $EE4B LD HL,$D66E   ; #REGhl=#R$D66E.
 $EE4E JP $EE9B      ; Jump to #R$EE9B.

; Fatal Events: Crocodile
;
; .
;
; .
;
; Make the crocodile inactive.
@label=Event_Crocodile
c$EE51 LD HL,$BC66   ; {Reset bit 4 of *#R$BC66 which relates to the crocodile being
 $EE54 RES 4,(HL)    ; active.}
 $EE56 LD HL,$E8C1   ; #REGhl=#R$E8C1.
 $EE59 CALL $C401    ; Call #R$C401.
 $EE5C RET NZ        ; Return if the crocodile is not in the current room.
; Print "#STR$D6A0,$08($b==$FF)".
 $EE5D LD HL,$D6A0   ; #REGhl=#R$D6A0.
 $EE60 JP $EE9B      ; Jump to #R$EE9B.

; Fatal Events: Cannibals
;
; .
;
; .
;
; Make the cannibals inactive.
@label=Event_Cannibals
c$EE63 LD HL,$BC66   ; {Reset bit 5 of *#R$BC66 which relates to the natives
 $EE66 RES 5,(HL)    ; being active.}
 $EE68 LD A,$18      ; {Call #R$C35F using item: #ITEM$18.
 $EE6A CALL $C35F    ; }
 $EE6D RET NZ        ; Return if the cannibals are not in the current room.
; Print "#STR$D931,$08($b==$FF)".
 $EE6E LD HL,$D931   ; #REGhl=#R$D931.
 $EE71 JP $EE9B      ; Jump to #R$EE9B.

; Events: Match
;
; .
;
; .
;
; Make the match inactive.
@label=Event_Match
c$EE74 LD HL,$BC66   ; {Reset bit 6 of *#R$BC66 which relates to the match
 $EE77 RES 6,(HL)    ; being active.}
 $EE79 LD A,$03      ; {Call #R$C3E4 using item: #ITEM$03.
 $EE7B CALL $C3E4    ; }
 $EE7E JR NZ,$EE8A   ; Jump to #R$EE8A if the match is not in the players
                     ; inventory.
; The player is holding the lit match, and it's burned away so handle the
; messaging.
 $EE80 LD HL,$BC98   ; #REGhl=#R$BC98.
 $EE83 DEC (HL)      ; Decrease *#REGhl by one.
; Print "#STR$DB91,$08($b==$FF)".
 $EE84 LD HL,$DB91   ; #REGhl=#R$DB91.
 $EE87 CALL $BAB1    ; Call #R$BAB1.
; The match can no longer be used, so destroy it.
@label=Event_Match_Return
*$EE8A LD A,$03      ; {Call #R$C3EA using item: #ITEM$03.
 $EE8C CALL $C3EA    ; }
 $EE8F RET           ; Return.

; Fatal Events: Wave
;
; .
;
; .
;
; Make the wave inactive.
@label=Event_Wave
c$EE90 LD HL,$BC66   ; {Reset bit 7 of *#R$BC66 which relates to the wave.
 $EE93 RES 7,(HL)    ; }
; Print "#STR$E567,$08($b==$FF)".
 $EE95 LD HL,$E567   ; #REGhl=#R$E567.
 $EE98 JP $EE9B      ; Jump to #R$EE9B.

; Events: Game Over
;
; Used by the routines at #R$EE00, #R$EE11, #R$EE22, #R$EE40, #R$EE51, #R$EE63
; and #R$EE90.
;
; .
;
; Force a newline to be "printed".
@label=Events_GameOver
c$EE9B LD A,$0D      ; #REGa=#N$0D.
 $EE9D CALL $BAC3    ; Call #R$BAC3.
 $EEA0 CALL $BAB1    ; Call #R$BAB1.
; Tidy up the stack.
 $EEA3 POP HL        ; {Restore #REGhl, #REGhl and #REGhl from the stack.
 $EEA4 POP HL        ;
 $EEA5 POP HL        ; }
 $EEA6 JP $EDD7      ; Jump to #R$EDD7.

; Events: Seagull
;
; This event handles the seagull appearing.
;
; .
;
; Print "#STR$D6EA,$08($b==$FF)".
@label=Event_Seagull
c$EEA9 LD HL,$D6EA   ; #REGhl=#R$D6EA.
 $EEAC CALL $BAB1    ; Call #R$BAB1.
; Print "#STR$D716,$08($b==$FF)".
 $EEAF LD HL,$D716   ; #REGhl=#R$D716.
 $EEB2 CALL $C579    ; Call #R$C579.
 $EEB5 LD A,$80      ; {Call #R$C3EA using scenic event: #R$BC78(#N$00).
 $EEB7 CALL $C3EA    ; }
 $EEBA RET           ; Return.

; Events: Rat
;
; This event handles the rat appearing.
;
; .
;
; Print "#STR$D73C,$08($b==$FF)".
@label=Event_Rat
c$EEBB LD HL,$D73C   ; #REGhl=#R$D73C.
 $EEBE CALL $BAB1    ; Call #R$BAB1.
; Print "#STR$D76E,$08($b==$FF)".
 $EEC1 LD HL,$D76E   ; #REGhl=#R$D76E.
 $EEC4 CALL $C579    ; Call #R$C579.
 $EEC7 LD A,$81      ; #REGa=#N$81 (event ID: #N($81&$7F)).
 $EEC9 CALL $C3EA    ; Call #R$C3EA.
 $EECC RET           ; Return.

; Events: Deer
;
; This event handles the deer appearing.
;
; .
;
; Print "#STR$D797,$08($b==$FF)".
@label=Event_Deer
c$EECD LD HL,$D797   ; #REGhl=#R$D797.
 $EED0 CALL $BAB1    ; Call #R$BAB1.
; Print "#STR$D7AA,$08($b==$FF)".
 $EED3 LD HL,$D7AA   ; #REGhl=#R$D7AA.
 $EED6 CALL $C579    ; Call #R$C579.
 $EED9 LD A,$82      ; #REGa=#N$82 (event ID: #N($82&$7F)).
 $EEDB CALL $C3EA    ; Call #R$C3EA.
 $EEDE RET           ; Return.

; Events: Pirate
;
; This event handles the pirate.
;
; .
;
; Print "#STR$D7C5,$08($b==$FF)".
@label=Event_Pirate
c$EEDF LD HL,$D7C5   ; #REGhl=#R$D7C5.
 $EEE2 CALL $BAB1    ; Call #R$BAB1.
 $EEE5 LD A,$0F      ; {Call #R$C582 with a maximum value of #N$0F.
 $EEE7 CALL $C582    ; }
 $EEEA JR NZ,$EEF5   ; Jump to #R$EEF5 if the random generator returns a non-zero
                     ; response.
; Bad luck!
 $EEEC LD HL,$EDD7   ; {Switch #R$EDD7 onto the stack so the next return actions a "game
 $EEEF EX (SP),HL    ; over".}
; Print "#STR$D7F6,$08($b==$FF)".
 $EEF0 LD HL,$D7F6   ; #REGhl=#R$D7F6.
 $EEF3 JR $EEF8      ; Jump to #R$EEF8.
; Handle that the pirate should work out more.
; .
; Print "#STR$D7DE,$08($b==$FF)".
@label=Event_Pirate_Safe
*$EEF5 LD HL,$D7DE   ; #REGhl=#R$D7DE.
@label=Event_Pirate_PrintAndReturn
*$EEF8 CALL $C579    ; Call #R$C579.
 $EEFB RET           ; Return.

; Events: Water Snake
;
; This event handles the water snake.
;
; .
;
; Print "#STR$D821,$08($b==$FF)".
@label=Event_WaterSnake
c$EEFC LD HL,$D821   ; #REGhl=#R$D821.
 $EEFF CALL $BAB1    ; Call #R$BAB1.
 $EF02 LD A,$04      ; {Call #R$C582 with a maximum value of #N$04.
 $EF04 CALL $C582    ; }
 $EF07 JR NZ,$EF1F   ; Jump to #R$EF1F if the random generator returns a non-zero
                     ; response.
; Bad luck #1!
; .
; Print "#STR$D84C,$08($b==$FF)".
 $EF09 LD HL,$D84C   ; #REGhl=#R$D84C.
 $EF0C CALL $C579    ; Call #R$C579.
 $EF0F LD A,$14      ; {Call #R$C582 with a maximum value of #N$14.
 $EF11 CALL $C582    ; }
 $EF14 JR NZ,$EF24   ; Jump to #R$EF24 if the random generator returns a non-zero
                     ; response.
; Bad luck #2!
 $EF16 LD HL,$EDD7   ; {Switch #R$EDD7 onto the stack so the next return actions a "game
 $EF19 EX (SP),HL    ; over".}
; Print "#STR$D86A,$08($b==$FF)".
 $EF1A LD HL,$D86A   ; #REGhl=#R$D86A.
 $EF1D JR $EF2E      ; Jump to #R$EF2E.
; Handle that the water snake just doesn't mess with you.
; .
; Print "#STR$D8AA,$08($b==$FF)".
@label=Event_WaterSnake_Safe_1
*$EF1F LD HL,$D8AA   ; #REGhl=#R$D8AA.
 $EF22 JR $EF27      ; Jump to #R$EF27.
; Handle that the water snake has terrible eyesight.
; .
; Print "#STR$D88C,$08($b==$FF)".
@label=Event_WaterSnake_Safe_2
*$EF24 LD HL,$D88C   ; #REGhl=#R$D88C.
@label=WaterSnake_Safe_Continue
*$EF27 PUSH HL       ; Stash #REGhl on the stack.
 $EF28 LD A,$86      ; #REGa=#N$86 (event ID: #N($86&$7F)).
 $EF2A CALL $C3EA    ; Call #R$C3EA.
 $EF2D POP HL        ; Restore #REGhl from the stack.
@label=WaterSnake_PrintAndReturn
*$EF2E CALL $C579    ; Call #R$C579.
 $EF31 RET           ; Return.

; Events: Spider
;
; This event handles the poisonous spider.
;
; .
;
; Print "#STR$D8D8,$08($b==$FF)".
@label=Event_Spider
c$EF32 LD HL,$D8D8   ; #REGhl=#R$D8D8.
 $EF35 CALL $BAB1    ; Call #R$BAB1.
 $EF38 LD A,$0A      ; {Call #R$C582 with a maximum value of #N$0A.
 $EF3A CALL $C582    ; }
 $EF3D JR NZ,$EF48   ; Jump to #R$EF48 if the random generator returns a non-zero
                     ; response.
; Bad luck!
 $EF3F LD HL,$EDD7   ; {Switch #R$EDD7 onto the stack so the next return actions a "game
 $EF42 EX (SP),HL    ; over".}
; Print "#STR$D922,$08($b==$FF)".
 $EF43 LD HL,$D922   ; #REGhl=#R$D922.
 $EF46 JR $EF50      ; Jump to #R$EF50.
; Handle that the poisonous spider didn't sting you.
@label=Event_Spider_Safe
*$EF48 LD A,$87      ; #REGa=#N$87 (event ID: #N($87&$7F)).
 $EF4A CALL $C3EA    ; Call #R$C3EA.
; Print "#STR$D8FA,$08($b==$FF)".
 $EF4D LD HL,$D8FA   ; #REGhl=#R$D8FA.
@label=Event_Spider_PrintAndReturn
*$EF50 CALL $C579    ; Call #R$C579.
 $EF53 RET           ; Return.

; Routine at EF54
;
; Used by the routines at #R$F16B, #R$F481, #R$F946, #R$FC61, #R$FD02 and
; #R$FD82.
;
; A
c$EF54 LD HL,$BC6F   ; #REGhl=#R$BC6F.
 $EF57 BIT 0,(HL)    ; {Jump to #R$EF7B if bit 0 of *#REGhl is unset.
 $EF59 JR Z,$EF7B    ; }
 $EF5B LD HL,$BC67   ; {Initialise #R$BC67 to #N$06.
 $EF5E LD (HL),$06   ; }
 $EF60 CP $2C        ; {Jump to #R$EF7B if #REGa is not equal to #N$2C.
 $EF62 JR NZ,$EF7B   ; }
 $EF64 LD HL,$BC6F   ; {Reset bit 0 of *#R$BC6F.
 $EF67 RES 0,(HL)    ; }
 $EF69 PUSH AF       ; Stash #REGaf on the stack.
; Spawn the giant crab in #ROOM$30.
 $EF6A LD BC,$2930   ; {Call #R$C412 using item #ITEM$29 to create it in
 $EF6D CALL $C412    ; #ROOM$30.}
 $EF70 POP AF        ; Restore #REGaf from the stack.
 $EF71 LD HL,$EC27   ; {Write #N$2F to *#R$EC27 to open up westbound access to #ROOM$2F
 $EF74 LD (HL),$2F   ; from #ROOM$2E.}
 $EF76 LD HL,$EC2A   ; {Write #N$30 to *#R$EC2A to open up northbound access to #ROOM$30
 $EF79 LD (HL),$30   ; from #ROOM$2F.}
*$EF7B CALL $C520    ; Call #R$C520.
 $EF7E LD E,$00      ; #REGe=#N$00.
 $EF80 CALL $C21E    ; Call #R$C21E.
 $EF83 LD A,($BCCB)  ; {Jump to #R$EFA7 if *#R$BCCB is not room #N$30:
 $EF86 CP $30        ; "#ROOM$30".
 $EF88 JR NZ,$EFA7   ; }
 $EF8A LD A,$29      ; {Call #R$C35F with #ITEM$29.
 $EF8C CALL $C35F    ; }
 $EF8F JR NZ,$EFA7   ; Jump to #R$EFA7 if #REGa is not equal to #N$29.
 $EF91 LD HL,$BC6F   ; {Set bit 0 of *#R$BC6F.
 $EF94 SET 0,(HL)    ; }
 $EF96 XOR A         ; {Write #N$00 to *#R$EC27 to remove access to #ROOM$2F
 $EF97 LD ($EC27),A  ; from #ROOM$2E.}
 $EF9A LD ($EC2A),A  ; Write #N$00 to *#R$EC2A to remove access to #ROOM$30
                     ; from #ROOM$2F.
 $EF9D LD HL,$BC66   ; {Set bit 0 of *#R$BC66 which relates to the crab being
 $EFA0 SET 0,(HL)    ; active.}
 $EFA2 LD A,$06      ; {Write #N$06 to *#R$BC67.
 $EFA4 LD ($BC67),A  ; }
*$EFA7 LD A,$2B      ; {Call #R$C35F with #ITEM$2B.
 $EFA9 CALL $C35F    ; }
 $EFAC JR NZ,$EFB8   ; Jump to #R$EFB8 if #ITEM$2B isn't in the current room.
 $EFAE LD HL,$BC66   ; {Set bit 1 of *#R$BC66 which relates to the tentacle
 $EFB1 SET 1,(HL)    ; being active.}
 $EFB3 LD A,$05      ; {Write #N$05 to *#R$BC68.
 $EFB5 LD ($BC68),A  ; }
*$EFB8 LD A,$2A      ; {Call #R$C35F with #ITEM$2A.
 $EFBA CALL $C35F    ; }
 $EFBD JR NZ,$EFC9   ; Jump to #R$EFC9 if #ITEM$2A isn't in the current room.
 $EFBF LD HL,$BC66   ; {Set bit 3 of *#R$BC66 which relates to the lion being
 $EFC2 SET 3,(HL)    ; active.}
 $EFC4 LD A,$07      ; {Write #N$07 to *#R$BC6A.
 $EFC6 LD ($BC6A),A  ; }
*$EFC9 LD HL,$E8C1   ; #REGhl=#R$E8C1.
 $EFCC CALL $C401    ; Call #R$C401.
 $EFCF JR NZ,$EFDB   ; Jump to #R$EFDB if #REGa is not equal to #N$07.
 $EFD1 LD HL,$BC66   ; {Set bit 4 of *#R$BC66 which relates to the crocodile
 $EFD4 SET 4,(HL)    ; being active.}
 $EFD6 LD A,$0B      ; {Write #N$0B to *#R$BC6B.
 $EFD8 LD ($BC6B),A  ; }
*$EFDB LD A,$18      ; {Call #R$C35F with #ITEM$18.
 $EFDD CALL $C35F    ; }
 $EFE0 JR NZ,$EFEC   ; Jump to #R$EFEC if #ITEM$18 isn't in the current room.
 $EFE2 LD HL,$BC66   ; {Set bit 5 of *#R$BC66 which relates to the cannibals
 $EFE5 SET 5,(HL)    ; being active.}
 $EFE7 LD A,$09      ; {Initialise the turn counter at *#R$BC6C with #N$09.
 $EFE9 LD ($BC6C),A  ; }
*$EFEC LD A,($BCCB)  ; {Jump to #R$EFFF if *#R$BCCB is not room #N$03:
 $EFEF CP $03        ; "#ROOM$03".
 $EFF1 JR NZ,$EFFF   ; }
 $EFF3 LD A,$1D      ; {Call #R$C35F with #ITEM$1D.
 $EFF5 CALL $C35F    ; }
 $EFF8 JR NZ,$EFFF   ; Jump to #R$EFFF if #ITEM$1D isn't in the current room.
 $EFFA POP HL        ; {Restore #REGhl and #REGhl from the stack.
 $EFFB POP HL        ; }
 $EFFC JP $EDF2      ; Jump to #R$EDF2.
*$EFFF LD A,($BCCB)  ; {Jump to #R$F019 if *#R$BCCB is not room #N$02:
 $F002 CP $02        ; "#ROOM$02".
 $F004 JR NZ,$F019   ; }
 $F006 LD HL,$BC54   ; #REGhl=#R$BC54.
 $F009 BIT 5,(HL)    ; Test bit 5 of *#REGhl.
 $F00B JR NZ,$F019   ; Jump to #R$F019 if #REGa is not equal to #N$02.
 $F00D SET 5,(HL)    ; Set bit 5 of *#REGhl.
 $F00F LD HL,$BC66   ; {Set bit 7 of *#R$BC66 which relates to the wave being
 $F012 SET 7,(HL)    ; active.}
 $F014 LD A,$05      ; {Write #N$05 to *#R$BC6E.
 $F016 LD ($BC6E),A  ; }
*$F019 LD A,($BCCB)  ; {Jump to #R$F039 if *#R$BCCB is not room #N$6C:
 $F01C CP $6C        ; "#ROOM$6C".
 $F01E JR NZ,$F039   ; }
 $F020 LD A,$1D      ; {Call #R$C35F with #ITEM$1D.
 $F022 CALL $C35F    ; }
 $F025 JR NZ,$F039   ; Jump to #R$F039 if #ITEM$1D isn't in the current room.
; Print "#STR$E5CF,$08($b==$FF)".
 $F027 LD HL,$E5CF   ; #REGhl=#R$E5CF.
 $F02A CALL $BAB1    ; Call #R$BAB1.
 $F02D POP HL        ; Restore #REGhl from the stack.
; Bad luck!
 $F02E LD HL,$EDD7   ; {Switch #R$EDD7 onto the stack so the next return actions a "game
 $F031 EX (SP),HL    ; over".}
; Print "#STR$E5ED,$08($b==$FF)".
 $F032 LD HL,$E5ED   ; #REGhl=#R$E5ED.
 $F035 CALL $C579    ; Call #R$C579.
 $F038 RET           ; Return.
*$F039 RET           ; Return.

; Print String And Newline Alias
;
; Used by the routines at #R$F042, #R$F047, #R$F04C, #R$F051, #R$F056, #R$F05B,
; #R$F060, #R$F065, #R$F06A, #R$F06F, #R$F074, #R$F079, #R$F07E, #R$F083,
; #R$F088, #R$F08D, #R$F092, #R$F097, #R$F09C, #R$F19D, #R$F263, #R$F481,
; #R$F4D4, #R$F7D6, #R$F851, #R$F8D9, #R$F91B, #R$F946, #R$F999, #R$F9E4,
; #R$FA3C, #R$FAA8, #R$FB83, #R$FBA8, #R$FBD5, #R$FC24, #R$FC98, #R$FCCD,
; #R$FD02, #R$FD6D and #R$FD7C.
@label=PrintStringAndNewline_Alias
c$F03A CALL $BAB1    ; Call #R$BAB1.
 $F03D RET           ; Return.

; Pause, Print String And Scroll Alias
;
; Used by the routines at #R$F09C, #R$F8D9 and #R$FB16.
@label=PausePrintStringAndScroll_Alias
c$F03E CALL $C579    ; Call #R$C579.
 $F041 RET           ; Return.

; Response: "Work It Out For Yourself"
;
; Used by the routine at #R$F09C.
;
; .
;
; Print "#STR$D9F3,$08($b==$FF)".
@label=Response_WorkItOutForYourself
c$F042 LD HL,$D9F3   ; #REGhl=#R$D9F3.
 $F045 JR $F03A      ; Jump to #R$F03A.

; Response: "You Really Don't Need It"
;
; Used by the routine at #R$F09C.
;
; .
;
; Print "#STR$DA0D,$08($b==$FF)".
@label=Response_YouReallyDontNeedIt
c$F047 LD HL,$DA0D   ; #REGhl=#R$DA0D.
 $F04A JR $F03A      ; Jump to #R$F03A.

; Response: "You're Not Carrying Anything"
;
; Used by the routine at #R$F12E.
;
; .
;
; Print "#STR$BFC4,$08($b==$FF)".
@label=Response_YoureNotCarryingAnything
c$F04C LD HL,$BFC4   ; #REGhl=#R$BFC4.
 $F04F JR $F03A      ; Jump to #R$F03A.

; Response: "Try Climbing"
;
; Used by the routine at #R$F16B.
;
; .
;
; Print "#STR$DA59,$08($b==$FF)".
@label=Response_TryClimbing
c$F051 LD HL,$DA59   ; #REGhl=#R$DA59.
 $F054 JR $F03A      ; Jump to #R$F03A.

; Response: "Try Rowing"
;
; Used by the routine at #R$F16B.
;
; .
;
; Print "#STR$DA67,$08($b==$FF)".
@label=Response_TryRowing
c$F056 LD HL,$DA67   ; #REGhl=#R$DA67.
 $F059 JR $F03A      ; Jump to #R$F03A.

; Response: "You Can't Go In That Direction"
;
; Used by the routine at #R$F16B.
;
; .
;
; Print "#STR$BF62,$08($b==$FF)".
@label=Response_YouCantGoInThatDirection
c$F05B LD HL,$BF62   ; #REGhl=#R$BF62.
 $F05E JR $F03A      ; Jump to #R$F03A.

; Response: "One At A Time, Please"
;
; Used by the routine at #R$F19D.
;
; .
;
; Print "#STR$BF82,$08($b==$FF)".
@label=Response_OneAtATimePlease
c$F060 LD HL,$BF82   ; #REGhl=#R$BF82.
 $F063 JR $F03A      ; Jump to #R$F03A.

; Response: "I Don't See The Point"
;
; Used by the routines at #R$F19D, #R$F4D4, #R$F7AB and #R$FBA8.
;
; .
;
; Print "#STR$BF98,$08($b==$FF)".
@label=Response_IDontSeeThePoint
c$F065 LD HL,$BF98   ; #REGhl=#R$BF98.
 $F068 JR $F03A      ; Jump to #R$F03A.

; Response: "O.K."
;
; Used by the routines at #R$F263, #R$F4D4, #R$F7D6, #R$FA3C, #R$FAA8, #R$FB16,
; #R$FBD5, #R$FC24 and #R$FCCD.
;
; .
;
; Print "#STR$BF0B,$08($b==$FF)".
@label=Response_OK_Duplicate
c$F06A LD HL,$BF0B   ; #REGhl=#R$BF0B.
 $F06D JR $F03A      ; Jump to #R$F03A.

; Response: "You Can't"
;
; Used by the routines at #R$F263, #R$F4D4, #R$F7D6, #R$F8D9, #R$F946, #R$F9E4,
; #R$FA3C, #R$FAA8, #R$FB71, #R$FBA8, #R$FBD5, #R$FC24, #R$FC61 and #R$FCCD.
;
; .
;
; Print "#STR$BF00,$08($b==$FF)".
@label=Response_YouCant_Duplicate
c$F06F LD HL,$BF00   ; #REGhl=#R$BF00.
 $F072 JR $F03A      ; Jump to #R$F03A.

; Response: "Please Rephrase That"
;
; Used by the routines at #R$F4D4, #R$FB16, #R$FBA8, #R$FBD5, #R$FC24, #R$FC61,
; #R$FC98, #R$FD02 and #R$FD6D.
;
; .
;
; Print "#STR$BEEA,$08($b==$FF)".
@label=Response_PleaseRephraseThat_Duplicate
c$F074 LD HL,$BEEA   ; #REGhl=#R$BEEA.
 $F077 JR $F03A      ; Jump to #R$F03A.

; Response: "You've Done That Already"
;
; Used by the routines at #R$F4D4, #R$F7D6, #R$FC24, #R$FC61, #R$FC98, #R$FCCD
; and #R$FD02.
;
; .
;
; Print "#STR$DEFB,$08($b==$FF)".
@label=Response_YouveDoneThatAlready
c$F079 LD HL,$DEFB   ; #REGhl=#R$DEFB.
 $F07C JR $F03A      ; Jump to #R$F03A.

; Response: "You're Not Carrying It"
;
; Used by the routines at #R$F851, #R$F9E4, #R$FBD5 and #R$FC24.
;
; .
;
; Print "#STR$E067,$08($b==$FF)".
@label=Response_YoureNotCarryingIt
c$F07E LD HL,$E067   ; #REGhl=#R$E067.
 $F081 JR $F03A      ; Jump to #R$F03A.

; Response: "You Must Be Joking"
;
; Used by the routine at #R$F999.
;
; .
;
; Print "#STR$E224,$08($b==$FF)".
@label=Response_YouMustBeJoking
c$F083 LD HL,$E224   ; #REGhl=#R$E224.
 $F086 JR $F03A      ; Jump to #R$F03A.

; Response: "It's Already Open"
;
; Used by the routine at #R$FA3C.
;
; .
;
; Print "#STR$E2C9,$08($b==$FF)".
@label=Response_ItsAlreadyOpen
c$F088 LD HL,$E2C9   ; #REGhl=#R$E2C9.
 $F08B JR $F03A      ; Jump to #R$F03A.

; Response: "It's Already Closed"
;
; Used by the routine at #R$FAA8.
;
; .
;
; Print "#STR$E2DC,$08($b==$FF)".
@label=Response_ItsAlreadyClosed
c$F08D LD HL,$E2DC   ; #REGhl=#R$E2DC.
 $F090 JR $F03A      ; Jump to #R$F03A.

; Response: "Don't Be Ridiculous"
;
; Used by the routine at #R$FBD5.
;
; .
;
; Print "#STR$E4BC,$08($b==$FF)".
@label=Response_DontBeRidiculous
c$F092 LD HL,$E4BC   ; #REGhl=#R$E4BC.
 $F095 JR $F03A      ; Jump to #R$F03A.

; Response: "It Has No Apparent Effect"
;
; Used by the routine at #R$F91B.
;
; .
;
; Print "#STR$E5B4,$08($b==$FF)".
@label=Response_ItHasNoApparentEffect
c$F097 LD HL,$E5B4   ; #REGhl=#R$E5B4.
 $F09A JR $F03A      ; Jump to #R$F03A.

; Action: Help
@label=Action_Help
c$F09C CALL $C470    ; Call #R$C470.
; The "HELP" command can only be called on its own; you can't type "HELP
; CROCODILE" or "HELP WITH MATCH".
 $F09F RET C         ; Return if there's any token set in #R$BD67.
; Does the player want help with the natives/ cannibals?
 $F0A0 LD A,$18      ; {Jump to #R$F0C2 if #R$C35F reports the player isn't in the room
 $F0A2 CALL $C35F    ; where you're #ITEM$18.
 $F0A5 JR NZ,$F0C2   ; }
; Provide an initial full response for the natives/ cannibals.
 $F0A7 LD HL,$BC54   ; {Jump to #R$F0BC if bit 1 of *#R$BC54 is set, which relates to
 $F0AA BIT 1,(HL)    ; asking for help a second time.
 $F0AC JR NZ,$F0BC   ; }
; This is the first time the player has asked for help on this topic, so
; flag that it's been answered from now on.
 $F0AE SET 1,(HL)    ; Set bit 1 of *#R$BC54 which relates to asking for help about the
                     ; natives/ cannibals.
; Print "#STR$D974,$08($b==$FF)".
 $F0B0 LD HL,$D974   ; #REGhl=#R$D974.
 $F0B3 CALL $BAB1    ; Call #R$BAB1.
; Print "#STR$D993,$08($b==$FF)".
 $F0B6 LD HL,$D993   ; #REGhl=#R$D993.
 $F0B9 CALL $C579    ; Call #R$C579.
; Print "#STR$D9B4,$08($b==$FF)".
@label=Action_Help_Cannibals
*$F0BC LD HL,$D9B4   ; #REGhl=#R$D9B4.
 $F0BF JP $F03E      ; Jump to #R$F03E.
; Does the player want help with the boulder?
@label=Action_Help_Boulder
*$F0C2 LD A,$39      ; {Jump to #R$F0CF if #R$C35F reports the player isn't in the room
 $F0C4 CALL $C35F    ; where there's a #ITEM$39.
 $F0C7 JR NZ,$F0CF   ; }
; The player is where the boulder is, so provide some pretty good help.
; .
; Print "#STR$D9CA,$08($b==$FF)".
 $F0C9 LD HL,$D9CA   ; #REGhl=#R$D9CA.
 $F0CC JP $F03A      ; Jump to #R$F03A.
; Does the player want help with the crocodile?
@label=Action_Help_Crocodile
*$F0CF LD A,$13      ; {Jump to #R$F0DC if #R$C35F reports the player isn't in the room
 $F0D1 CALL $C35F    ; where there's #ITEM$13.
 $F0D4 JR NZ,$F0DC   ; }
; The player is where the crocodile is, so provide some abstract
; unhelpful help.
; .
; Print "#STR$D9DF,$08($b==$FF)".
 $F0D6 LD HL,$D9DF   ; #REGhl=#R$D9DF.
 $F0D9 JP $F03A      ; Jump to #R$F03A.
; Does the player want help with the crocodile with the keg in its mouth?
@label=label=Action_Help_CrocodileKeg
*$F0DC LD A,$14      ; {Jump to #R$F042 if #R$C35F reports that #ITEM$14 is in the same
 $F0DE CALL $C35F    ; room as the player.
 $F0E1 JP Z,$F042    ; }
; Does the player want help with the giant octopus?
 $F0E4 LD A,$2B      ; {Jump to #R$F042 if #R$C35F reports that #ITEM$2B is in the same
 $F0E6 CALL $C35F    ; room as the player.
 $F0E9 JP Z,$F042    ; }
; Does the player want help with the lion?
 $F0EC LD A,$2A      ; {Jump to #R$F0F9 if #R$C35F reports the player isn't in the room
 $F0EE CALL $C35F    ; where there's #ITEM$2A.
 $F0F1 JR NZ,$F0F9   ; }
; The player is where the lion is, so provide some abstract unhelpful
; help.
; .
; Print "#STR$DA27,$08($b==$FF)".
 $F0F3 LD HL,$DA27   ; #REGhl=#R$DA27.
 $F0F6 JP $F03A      ; Jump to #R$F03A.
; Does the player want help with the parrot?
@label=Action_Help_Parrot
*$F0F9 LD A,$27      ; {Jump to #R$F106 if #R$C35F reports the player isn't in the room
 $F0FB CALL $C35F    ; where there's #ITEM$27.
 $F0FE JR NZ,$F106   ; }
; The player is where the parrot is, so provide some abstract unhelpful
; help.
; .
; Print "#STR$DA33,$08($b==$FF)".
 $F100 LD HL,$DA33   ; #REGhl=#R$DA33.
 $F103 JP $F03A      ; Jump to #R$F03A.
; Does the player want help when they're at sea?
@label=Action_Help_Sea
*$F106 LD A,($BCCB)  ; {Jump to #R$F113 if the *#R$BCCB is not room #N$02:
 $F109 CP $02        ; "#ROOM$02".
 $F10B JR NZ,$F113   ; }
; More unhelpful help ...
; .
; Print "#STR$DA41,$08($b==$FF)".
 $F10D LD HL,$DA41   ; #REGhl=#R$DA41.
 $F110 JP $F03A      ; Jump to #R$F03A.
; Does the player want help with the door?
@label=Action_Help_Door
*$F113 LD A,$32      ; {Jump to #R$F042 if #R$C35F reports that #ITEM$32 is in the same
 $F115 CALL $C35F    ; room as the player.
 $F118 JP Z,$F042    ; }
; Does the player want help with the pit?
 $F11B LD HL,$E8E9   ; {Call #R$C401 with #R$E8E9.
 $F11E CALL $C401    ; }
 $F121 JR NZ,$F12B   ; Jump to #R$F12B if the player is not in the room with
                     ; the pit.
; Does the player want help with the plank?
 $F123 LD A,$04      ; {Jump to #R$F042 if #R$C35F reports that #ITEM$04 is in the same
 $F125 CALL $C35F    ; room as the player.
 $F128 JP Z,$F042    ; }
; There's no more help available...
@label=Action_Help_GiveUp
*$F12B JP $F047      ; Jump to #R$F047.

; Action: Inventory
@label=Action_Inventory
c$F12E CALL $C470    ; Call #R$C470.
; The "INVENTORY" command can only be called on its own.
 $F131 RET C         ; Return if there's any token set in #R$BD67.
 $F132 LD A,($BC98)  ; {Jump to #R$F04C if *#R$BC98 is zero (the player isn't holding any
 $F135 AND A         ; items).
 $F136 JP Z,$F04C    ; }
; Clear the screen and display the players inventory.
 $F139 CALL $BA6D    ; Call #R$BA6D.
 $F13C CALL $BA89    ; Call #R$BA89.
; Print "#STR$BF4F,$08($b==$FF)".
 $F13F LD HL,$BF4F   ; #REGhl=#R$BF4F.
 $F142 CALL $BAB1    ; Call #R$BAB1.
 $F145 LD A,$01      ; {Call #R$C1FF with a room ID of #N$01 which is the players
 $F147 CALL $C1FF    ; inventory.}
 $F14A RET           ; Return.

; Action: Look
@label=Action_Look
c$F14B CALL $C470    ; Call #R$C470.
; The "LOOK" command can only be called on its own.
 $F14E RET C         ; Return if there's any token set in #R$BD67.
 $F14F LD E,$01      ; {Call #R$C21E with #REGe set to #N$01 (which will force any room
 $F151 CALL $C21E    ; images to be re-displayed).}
 $F154 RET           ; Return.

; Action: North
@label=Action_North
c$F155 LD C,$00      ; Set #REGc to "NORTH" (#N$00).
 $F157 JR $F16B      ; Jump to #R$F16B.

; Action: South
@label=Action_South
c$F159 LD C,$01      ; Set #REGc to "SOUTH" (#N$01).
 $F15B JR $F16B      ; Jump to #R$F16B.

; Action: East
@label=Action_East
c$F15D LD C,$02      ; Set #REGc to "EAST" (#N$02).
 $F15F JR $F16B      ; Jump to #R$F16B.

; Action: West
@label=Action_West
c$F161 LD C,$03      ; Set #REGc to "WEST" (#N$03).
 $F163 JR $F16B      ; Jump to #R$F16B.

; Action: Up
@label=Action_Up
c$F165 LD C,$04      ; Set #REGc to "UP" (#N$04).
 $F167 JR $F16B      ; Jump to #R$F16B.

; Action: Down
@label=Action_Down
c$F169 LD C,$05      ; Set #REGc to "DOWN" (#N$05).
; Continue on to #R$F16B.

; Move Player
;
; Used by the routines at #R$F155, #R$F159, #R$F15D, #R$F161 and #R$F165.
;
; C Requested direction where: #TABLE { #N$00 | NORTH } { #N$01 | SOUTH } {
; . #N$02 | EAST } { #N$03 | WEST } { #N$04 | UP } { #N$05 | DOWN } TABLE#
@label=MovePlayer
c$F16B CALL $C470    ; Call #R$C470.
; All "MOVE" commands can only be called on their own; you can't type
; "NORTH TO BEACH" or "UP LADDER".
 $F16E RET C         ; Return if there's any token set in #R$BD67.
 $F16F LD B,$00      ; Set #REGb to #N$00, so that #REGbc now holds the
                     ; direction number.
 $F171 CALL $C302    ; Call #R$C302.
 $F174 ADD HL,BC     ; #REGhl+=#REGbc.
 $F175 LD A,(HL)     ; #REGa=*#REGhl.
 $F176 OR A          ; Set the bits from #REGa.
 $F177 JR Z,$F17D    ; Jump to #R$F17D if ?? is equal to #REGa.
 $F179 CALL $EF54    ; Call #R$EF54.
 $F17C RET           ; Return.
; Is the player stuck out on the rowing boat?
@label=CheckPlayer_RowingBoat
*$F17D LD A,($BCCB)  ; {Skip forward to #R$F190 if the *#R$BCCB is not room #N$04:
 $F180 CP $04        ; "#ROOM$04".
 $F182 JR NZ,$F190   ; }
; The player is stuck in the rowing boat...
 $F184 LD A,C        ; {Jump to #R$F051 if the player was trying to move "UP" (#N$04).
 $F185 CP $04        ; Instead they must #R$F91B(climb) the ladder.
 $F187 JP Z,$F051    ; }
 $F18A JP C,$F056    ; Jump to #R$F056 if the player was trying to move "NORTH", "SOUTH",
                     ; "EAST" or "WEST". Instead, they need to #R$FD02(row).
; Else, the player was trying to move "DOWN"...
 $F18D JP $F05B      ; Jump to #R$F05B.
; Is the player stuck out at sea?
@label=CheckPlayer_AtSea
*$F190 CP $02        ; {Jump to #R$F19A if *#R$BCCB is not room #N$02:
 $F192 JR NZ,$F19A   ; "#ROOM$02".}
; As above, except there's now no ladder!
 $F194 LD A,C        ; {Jump to #R$F056 if the player was trying to move "NORTH", "SOUTH",
 $F195 CP $04        ; "EAST" or "WEST".
 $F197 JP C,$F056    ; }
; Print "#STR$BF62,$08($b==$FF)".
@label=MovePlayer_Invalid
*$F19A JP $F05B      ; Jump to #R$F05B.

; Action: Examine
@label=Action_Examine
c$F19D CALL $C47B    ; Call #R$C47B.
 $F1A0 RET C         ; Return if the direct object is malformed.
 $F1A1 CP $01        ; {Jump to #R$F060 if #REGa is not equal to #N$01.
 $F1A3 JP NZ,$F060   ; }
 $F1A6 LD HL,$E9CA   ; {Call #R$C37F with #R$E9CA.
 $F1A9 CALL $C37F    ; }
 $F1AC JR NZ,$F1C4   ; Jump to #R$F1C4 if the token isn't for the bottle.
 $F1AE LD HL,$E87A   ; #REGhl=#R$E87A.
 $F1B1 CALL $C401    ; Call #R$C401.
 $F1B4 CP $0B        ; {Jump to #R$F1C4 if #REGa is not equal to #N$0B.
 $F1B6 JR NZ,$F1C4   ; }
 $F1B8 LD BC,$0B0C   ; {Call #R$C426 to transform item #N$0B (#ITEM$0B) into item #N$0C
 $F1BB CALL $C426    ; (#ITEM$0C).}
; Print "#STR$DA73,$08($b==$FF)".
 $F1BE LD HL,$DA73   ; #REGhl=#R$DA73.
 $F1C1 JP $F03A      ; Jump to #R$F03A.
*$F1C4 LD HL,$E9CC   ; {Call #R$C37F with #R$E9CC.
 $F1C7 CALL $C37F    ; }
 $F1CA JR NZ,$F1DF   ; Jump to #R$F1DF if the token isn't for the fish.
 $F1CC LD A,$1B      ; {Call #R$C35F with #ITEM$1B.
 $F1CE CALL $C35F    ; }
 $F1D1 JR NZ,$F1DF   ; Jump to #R$F1DF if #ITEM$1B isn't in the current room.
 $F1D3 LD BC,$1B1C   ; {Call #R$C426 to transform item #N$1B (#ITEM$1B) into item #N$1C
 $F1D6 CALL $C426    ; (#ITEM$1C).}
; Print "#STR$DA85,$08($b==$FF)".
 $F1D9 LD HL,$DA85   ; #REGhl=#R$DA85.
 $F1DC JP $F03A      ; Jump to #R$F03A.
*$F1DF LD HL,$E9D1   ; {Call #R$C37F with #R$E9D1.
 $F1E2 CALL $C37F    ; }
 $F1E5 JR NZ,$F1ED   ; Jump to #R$F1ED if the token isn't for the watch.
; Print "#STR$DA99,$08($b==$FF)".
 $F1E7 LD HL,$DA99   ; #REGhl=#R$DA99.
 $F1EA JP $F03A      ; Jump to #R$F03A.
*$F1ED LD HL,$E9D3   ; {Call #R$C37F with #R$E9D3.
 $F1F0 CALL $C37F    ; }
 $F1F3 JR NZ,$F1FB   ; Jump to #R$F1FB if the token isn't for the shoe.
 $F1F5 LD HL,$DAAD   ; #REGhl=#R$DAAD.
 $F1F8 JP $F03A      ; Jump to #R$F03A.
*$F1FB LD HL,$E9D5   ; {Call #R$C37F with #R$E9D5.
 $F1FE CALL $C37F    ; }
 $F201 JR NZ,$F209   ; Jump to #R$F209 if the token isn't for the rod.
; Print "#STR$DADA,$08($b==$FF)".
 $F203 LD HL,$DADA   ; #REGhl=#R$DADA.
 $F206 JP $F03A      ; Jump to #R$F03A.
*$F209 LD HL,$E9D7   ; {Call #R$C37F with #R$E9D7.
 $F20C CALL $C37F    ; }
 $F20F JR NZ,$F217   ; Jump to #R$F217 if the token isn't for the fruit.
; Print "#STR$DAFB,$08($b==$FF)".
 $F211 LD HL,$DAFB   ; #REGhl=#R$DAFB.
 $F214 JP $F03A      ; Jump to #R$F03A.
*$F217 LD HL,$E9D9   ; {Call #R$C37F with #R$E9D9.
 $F21A CALL $C37F    ; }
 $F21D JR NZ,$F225   ; Jump to #R$F225 if the token isn't for the bridge.
; Print "#STR$DB0F,$08($b==$FF)".
 $F21F LD HL,$DB0F   ; #REGhl=#R$DB0F.
 $F222 JP $F03A      ; Jump to #R$F03A.
*$F225 LD HL,$E9DB   ; {Call #R$C37F with #R$E9DB.
 $F228 CALL $C37F    ; }
 $F22B JR NZ,$F233   ; Jump to #R$F233 if the token isn't for the jewels.
; Print "#STR$DB37,$08($b==$FF)".
 $F22D LD HL,$DB37   ; #REGhl=#R$DB37.
 $F230 JP $F03A      ; Jump to #R$F03A.
@label=Examine_Invalid
*$F233 JP $F065      ; Jump to #R$F065.

; Action: Load
@label=Action_Load
c$F236 CALL $C470    ; Call #R$C470.
; The "LOAD" command can only be called on its own.
 $F239 RET C         ; Return if there's any token set in #R$BD67.
 $F23A CALL $BB94    ; Call #R$BB94.
 $F23D RET           ; Return.

; Action: Save
@label=Action_Save
c$F23E CALL $C470    ; Call #R$C470.
; The "SAVE" command can only be called on its own.
 $F241 RET C         ; Return if there's any token set in #R$BD67.
 $F242 CALL $BB59    ; Call #R$BB59.
 $F245 RET           ; Return.

; Action: Quit
@label=Action_Quit
c$F246 CALL $C470    ; Call #R$C470.
; The "QUIT" command can only be called on its own.
 $F249 RET C         ; Return if there's any token set in #R$BD67.
; Print "#STR$BEB5,$08($b==$FF)".
 $F24A LD HL,$BEB5   ; #REGhl=#R$BEB5.
 $F24D CALL $BAB1    ; Call #R$BAB1.
@label=WantToSave_Loop
*$F250 CALL $BA5D    ; Call #R$BA5D.
; The player just wants to quit.
 $F253 CP $4E        ; {#HTML(Jump to #R$F25E if the keypress is
 $F255 JR Z,$F25E    ; "<code>#CHR$4E</code>".)}
 $F257 CP $59        ; {#HTML(Jump back to #R$F250 if the keypress is anything other than
 $F259 JR NZ,$F250   ; "<code>#CHR$59</code>".)}
; The player does want to save before quitting...
 $F25B CALL $BB59    ; Call #R$BB59.
; Jump to asking if the player "wants another game?"
@label=QuitGame
*$F25E LD HL,$EDDD   ; {Switch #R$EDDD onto the stack so the next return action is asking
 $F261 EX (SP),HL    ; if the player would "Want another game? Y/N.".}
 $F262 RET           ; Return.

; Action: Take
;
; Used by the routine at #R$F481.
@label=Action_Take
c$F263 CALL $C47B    ; Call #R$C47B.
 $F266 RET C         ; Return if the direct object is malformed.
; Start by calling the chain of items to check...
 $F267 JP $F2A8      ; Jump to #R$F2A8.
; Check if the player is holding the requested item?
@label=Take_IsPlayerHoldingItem
*$F26A CALL $C3E4    ; Call #R$C3E4.
 $F26D JR NZ,$F28D   ; Jump to #R$F28D if #REGa is not equal to #N$59.
 $F26F POP HL        ; Restore #REGhl from the stack.
; Print "#STR$BF10,$08($b==$FF)".
 $F270 LD HL,$BF10   ; #REGhl=#R$BF10.
 $F273 CALL $BAA4    ; Call #R$BAA4.
 $F276 LD HL,$F29B   ; #REGhl=#R$F29B.
 $F279 LD A,E        ; #REGa=#REGe.
 $F27A LD BC,$0001   ; #REGbc=#N($0001,$04,$04).
 $F27D CPIR          ; CPIR.
 $F27F JR Z,$F287    ; Jump to #R$F287 if #REGa is equal to #N$59.
; Print "#STR$BF2B,$08($b==$FF)".
 $F281 LD HL,$BF2B   ; #REGhl=#R$BF2B.
 $F284 JP $F03A      ; Jump to #R$F03A.
; Print "#STR$BF2F,$08($b==$FF)".
*$F287 LD HL,$BF2F   ; #REGhl=#R$BF2F.
 $F28A JP $F03A      ; Jump to #R$F03A.
*$F28D LD A,($BC98)  ; #REGa=*#R$BC98.
 $F290 CP $05        ; Compare #REGa with #N$05.
 $F292 LD B,E        ; #REGb=#REGe.
 $F293 RET NZ        ; Return if #REGa is not equal to #N$05.
 $F294 POP HL        ; Restore #REGhl from the stack.
; Print "#STR$BF35,$08($b==$FF)".
 $F295 LD HL,$BF35   ; #REGhl=#R$BF35.
 $F298 JP $F03A      ; Jump to #R$F03A.
; Table: All the items in the game which are plural.
; .
; Which is ... the jewels.
@label=Table_ItemsWhichArePlural
 $F29B DEFB $1D      ; Item #N(#PEEK(#PC)): #ITEM(#PEEK(#PC)).
; The player can take the item.
@label=TakeItem
*$F29C LD C,$01      ; Load #REGc with #N$01 which indicates the item will be in the
                     ; players inventory.
 $F29E CALL $C412    ; Call #R$C412.
 $F2A1 LD HL,$BC98   ; {Increment *#R$BC98 by one.
 $F2A4 INC (HL)      ; }
 $F2A5 JP $F06A      ; Jump to #R$F06A.
; Is the player asking to take the bottle of rum?
@label=Validate_Take_BottleOfRum
*$F2A8 LD HL,$E9E7   ; {Call #R$C37F with #R$E9E7.
 $F2AB CALL $C37F    ; }
 $F2AE JR NZ,$F2BC   ; Jump to #R$F2BC if the token isn't for the bottle of
                     ; rum.
 $F2B0 LD HL,$E87A   ; #REGhl=#R$E87A.
 $F2B3 CALL $C401    ; Call #R$C401.
 $F2B6 CALL $F26A    ; Call #R$F26A.
 $F2B9 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the fish?
@label=Validate_Take_Fish
*$F2BC LD HL,$E9CC   ; {Call #R$C37F with #R$E9CC.
 $F2BF CALL $C37F    ; }
 $F2C2 JR NZ,$F2D0   ; Jump to #R$F2D0 if the token isn't for the fish.
 $F2C4 LD HL,$E895   ; #REGhl=#R$E895.
 $F2C7 CALL $C401    ; Call #R$C401.
 $F2CA CALL $F26A    ; Call #R$F26A.
 $F2CD JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the watch?
@label=Validate_Take_Watch
*$F2D0 LD HL,$E9D1   ; {Call #R$C37F with #R$E9D1.
 $F2D3 CALL $C37F    ; }
 $F2D6 JR NZ,$F2ED   ; Jump to #R$F2ED if the token isn't for the watch.
 $F2D8 LD A,$19      ; {Call #R$C35F with #ITEM$19.
 $F2DA CALL $C35F    ; }
 $F2DD JR NZ,$F2E5   ; Jump to #R$F2E5 if #ITEM$19 isn't in the current room.
; Print "#STR$DB5F,$08($b==$FF)".
 $F2DF LD HL,$DB5F   ; #REGhl=#R$DB5F.
 $F2E2 JP $F03A      ; Jump to #R$F03A.
*$F2E5 LD A,$17      ; {Call #R$F26A with #ITEM$17.
 $F2E7 CALL $F26A    ; }
 $F2EA JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the shoe?
@label=Validate_Take_Shoe
*$F2ED LD HL,$E9D3   ; {Call #R$C37F with #R$E9D3.
 $F2F0 CALL $C37F    ; }
 $F2F3 JR NZ,$F2FD   ; Jump to #R$F2FD if the token isn't for the shoe.
 $F2F5 LD A,$15      ; {Call #R$F26A with #ITEM$15.
 $F2F7 CALL $F26A    ; }
 $F2FA JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the fruit?
@label=Validate_Take_Fruit
*$F2FD LD HL,$E9D7   ; {Call #R$C37F with #R$E9D7.
 $F300 CALL $C37F    ; }
 $F303 JR NZ,$F30D   ; Jump to #R$F30D if the token isn't for the fruit.
 $F305 LD A,$0E      ; {Call #R$F26A with #ITEM$0E.
 $F307 CALL $F26A    ; }
 $F30A JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the rod?
@label=Validate_Take_Rod
*$F30D LD HL,$E9D5   ; {Call #R$C37F with #R$E9D5.
 $F310 CALL $C37F    ; }
 $F313 JR NZ,$F347   ; Jump to #R$F347 if the token isn't for the rod.
 $F315 LD A,$08      ; {Call #R$F26A with #ITEM$08.
 $F317 CALL $F26A    ; }
 $F31A LD A,B        ; #REGa=#REGb.
 $F31B CALL $C35F    ; Call #R$C35F.
 $F31E LD B,$08      ; #REGb=#N$08.
 $F320 JP Z,$F29C    ; Jump to #R$F29C if *#REGhl is equal to #N$08.
 $F323 LD BC,$0A09   ; {Call #R$C426 to transform item #N$0A (#ITEM$0A) into item #N$09
 $F326 CALL $C426    ; (#ITEM$09).}
 $F329 LD BC,$3132   ; {Call #R$C426 to transform item #N$31 (#ITEM$31) into item #N$32
 $F32C CALL $C426    ; (#ITEM$32).}
 $F32F LD BC,$3315   ; {Call #R$C412 using item #ITEM$33 to create it in
 $F332 CALL $C412    ; #ROOM$15.}
 $F335 XOR A         ; {Write #N$00 to *#R$EB90 to remove access to #ROOM$6A
 $F336 LD ($EB90),A  ; from #ROOM$15.}
 $F339 LD ($ED8D),A  ; Write #N$00 to *#R$ED8D to remove access to #ROOM$15
                     ; from #ROOM$6A.
 $F33C LD B,$08      ; #REGb=#N$08.
 $F33E CALL $F29C    ; Call #R$F29C.
; Print "#STR$DB7C,$08($b==$FF)".
 $F341 LD HL,$DB7C   ; #REGhl=#R$DB7C.
 $F344 JP $F03A      ; Jump to #R$F03A.
; Is the player asking to take the jewels?
@label=Validate_Take_Jewels
*$F347 LD HL,$E9DB   ; {Call #R$C37F with #R$E9DB.
 $F34A CALL $C37F    ; }
 $F34D JR NZ,$F357   ; Jump to #R$F357 if the token isn't for the jewels.
 $F34F LD A,$1D      ; {Call #R$F26A with #ITEM$1D.
 $F351 CALL $F26A    ; }
 $F354 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the match?
@label=Validate_Take_Match
*$F357 LD HL,$E9E1   ; {Call #R$C37F with #R$E9E1.
 $F35A CALL $C37F    ; }
 $F35D JR NZ,$F36B   ; Jump to #R$F36B if the token isn't for the match.
 $F35F LD HL,$E86E   ; #REGhl=#R$E86E.
 $F362 CALL $C401    ; Call #R$C401.
 $F365 CALL $F26A    ; Call #R$F26A.
 $F368 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the plank?
@label=Validate_Take_Plank
*$F36B LD HL,$E9E3   ; {Call #R$C37F with #R$E9E3.
 $F36E CALL $C37F    ; }
 $F371 JR NZ,$F398   ; Jump to #R$F398 if the token isn't for the plank.
 $F373 LD HL,$E871   ; #REGhl=#R$E871.
 $F376 CALL $C401    ; Call #R$C401.
 $F379 CALL $F26A    ; Call #R$F26A.
 $F37C LD A,B        ; #REGa=#REGb.
 $F37D CP $04        ; {Jump to #R$F29C if #REGa is equal to #N$04.
 $F37F JP Z,$F29C    ; }
 $F382 LD A,$05      ; #REGa=#N$05 (event ID: #N($05&$7F)).
 $F384 CALL $C3EA    ; Call #R$C3EA.
 $F387 LD A,$06      ; #REGa=#N$06 (event ID: #N($06&$7F)).
 $F389 CALL $C3EA    ; Call #R$C3EA.
 $F38C LD B,$04      ; #REGb=#N$04.
 $F38E XOR A         ; {Write #N$00 to: #LIST { *#R$ED75 } { *#R$ED80 } LIST#
 $F38F LD ($ED75),A  ;
 $F392 LD ($ED80),A  ; }
 $F395 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the coconut?
@label=Validate_Take_Coconut
*$F398 LD HL,$E9E5   ; {Call #R$C37F with #R$E9E5.
 $F39B CALL $C37F    ; }
 $F39E JR NZ,$F3A8   ; Jump to #R$F3A8 if the token isn't for the coconut.
 $F3A0 LD A,$07      ; {Call #R$F26A with #ITEM$07.
 $F3A2 CALL $F26A    ; }
 $F3A5 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the gun?
@label=Validate_Take_Gun
*$F3A8 LD HL,$E9EF   ; {Call #R$C37F with #R$E9EF.
 $F3AB CALL $C37F    ; }
 $F3AE JR NZ,$F3D5   ; Jump to #R$F3D5 if the token isn't for the gun.
 $F3B0 LD A,$0F      ; {Call #R$F26A with #ITEM$0F.
 $F3B2 CALL $F26A    ; }
 $F3B5 LD A,$27      ; {Call #R$C35F with #ITEM$27.
 $F3B7 CALL $C35F    ; }
 $F3BA JR Z,$F3CB    ; Jump to #R$F3CB if #ITEM$27 is present in the current
                     ; room.
 $F3BC LD A,$22      ; #REGa=#N$22 (event ID: #N($22&$7F)).
 $F3BE CALL $C3EA    ; Call #R$C3EA.
 $F3C1 LD A,$88      ; #REGa=#N$88.
 $F3C3 CALL $C3FA    ; Call #R$C3FA.
 $F3C6 LD B,$0F      ; #REGb=#N$0F.
 $F3C8 JP $F29C      ; Jump to #R$F29C.
; Bad luck!
*$F3CB LD HL,$EDD7   ; {Switch #R$EDD7 onto the stack so the next return actions a "game
 $F3CE EX (SP),HL    ; over".}
; Print "#STR$DBCC,$08($b==$FF)".
 $F3CF LD HL,$DBCC   ; #REGhl=#R$DBCC.
 $F3D2 JP $F03A      ; Jump to #R$F03A.
; Is the player asking to take the eyepatch?
@label=Validate_Take_Eyepatch
*$F3D5 LD HL,$E9F1   ; {Call #R$C37F with #R$E9F1.
 $F3D8 CALL $C37F    ; }
 $F3DB JR NZ,$F3E9   ; Jump to #R$F3E9 if the token isn't for the eyepatch.
 $F3DD LD HL,$E885   ; #REGhl=#R$E885.
 $F3E0 CALL $C401    ; Call #R$C401.
 $F3E3 CALL $F26A    ; Call #R$F26A.
 $F3E6 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the keg of gunpowder?
@label=Validate_Take_KegOfGunpowder
*$F3E9 LD HL,$E9F3   ; {Call #R$C37F with #R$E9F3.
 $F3EC CALL $C37F    ; }
 $F3EF JR NZ,$F403   ; Jump to #R$F403 if the token isn't for the keg of
                     ; gunpowder.
 $F3F1 LD HL,$E888   ; #REGhl=#R$E888.
 $F3F4 CALL $C401    ; Call #R$C401.
 $F3F7 CALL $F26A    ; Call #R$F26A.
 $F3FA LD A,B        ; #REGa=#REGb.
 $F3FB CP $12        ; Compare #REGa with #N$12.
 $F3FD JP Z,$F29C    ; Jump to #R$F29C if #REGa is equal to #N$12.
 $F400 JP $F06F      ; Jump to #R$F06F.
; Is the player asking to take the sextant?
@label=Validate_Take_Sextant
*$F403 LD HL,$E9FB   ; {Call #R$C37F with #R$E9FB.
 $F406 CALL $C37F    ; }
 $F409 JR NZ,$F413   ; Jump to #R$F413 if the token isn't for the sextant.
 $F40B LD A,$16      ; {Call #R$F26A with #ITEM$16.
 $F40D CALL $F26A    ; }
 $F410 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the crowbar?
@label=Validate_Take_Crowbar
*$F413 LD HL,$E9FD   ; {Call #R$C37F with #R$E9FD.
 $F416 CALL $C37F    ; }
 $F419 JR NZ,$F423   ; Jump to #R$F423 if the token isn't for the crowbar.
 $F41B LD A,$1E      ; {Call #R$F26A with #ITEM$1E.
 $F41D CALL $F26A    ; }
 $F420 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the key?
@label=Validate_Take_Key
*$F423 LD HL,$E9FF   ; {Call #R$C37F with #R$E9FF.
 $F426 CALL $C37F    ; }
 $F429 JR NZ,$F433   ; Jump to #R$F433 if the token isn't for the key.
 $F42B LD A,$1F      ; {Call #R$F26A with #ITEM$1F.
 $F42D CALL $F26A    ; }
 $F430 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the skull?
@label=Validate_Take_Skull
*$F433 LD HL,$EA01   ; {Call #R$C37F with #R$EA01.
 $F436 CALL $C37F    ; }
 $F439 JR NZ,$F443   ; Jump to #R$F443 if the token isn't for the skull.
 $F43B LD A,$20      ; {Call #R$F26A with #ITEM$20.
 $F43D CALL $F26A    ; }
 $F440 JP $F29C      ; Jump to #R$F29C.
; Is the player asking to take the spear?
@label=Validate_Take_Spear
*$F443 LD HL,$EA06   ; {Call #R$C37F with #R$EA06.
 $F446 CALL $C37F    ; }
 $F449 JR NZ,$F45D   ; Jump to #R$F45D if the token isn't for the spear.
 $F44B LD HL,$E8A0   ; #REGhl=#R$E8A0.
 $F44E CALL $C401    ; Call #R$C401.
 $F451 CALL $F26A    ; Call #R$F26A.
 $F454 LD A,B        ; #REGa=#REGb.
 $F455 CP $1A        ; Compare #REGa with #N$1A.
 $F457 JP Z,$F29C    ; Jump to #R$F29C if #REGa is equal to #N$1A.
 $F45A JP $F06F      ; Jump to #R$F06F.
; Is the player asking to take the parrot?
@label=Validate_Take_Parrot
*$F45D LD HL,$EA08   ; {Call #R$C37F with #R$EA08.
 $F460 CALL $C37F    ; }
 $F463 JR NZ,$F47E   ; Jump to #R$F47E if the token isn't for the parrot.
 $F465 LD HL,$E8BC   ; #REGhl=#R$E8BC.
 $F468 CALL $C401    ; Call #R$C401.
 $F46B CALL $F26A    ; Call #R$F26A.
 $F46E LD A,B        ; #REGa=#REGb.
 $F46F CP $28        ; Compare #REGa with #N$28.
 $F471 JP Z,$F29C    ; Jump to #R$F29C if #REGa is equal to #N$28.
; Bad luck!
 $F474 LD HL,$EDD7   ; {Switch #R$EDD7 onto the stack so the next return actions a "game
 $F477 EX (SP),HL    ; over".}
; Print "#STR$DBCC,$08($b==$FF)".
 $F478 LD HL,$DBCC   ; #REGhl=#R$DBCC.
 $F47B JP $F03A      ; Jump to #R$F03A.
*$F47E JP $F06F      ; Jump to #R$F06F.

; Action: Get
@label=Action_Get
c$F481 CALL $C47B    ; Call #R$C47B.
 $F484 RET C         ; Return if the direct object is malformed.
; Confirm if the player intended to "GET INTO BOAT" (or similar).
 $F485 LD HL,$EA0D   ; {Call #R$C37F with #R$EA0D.
 $F488 CALL $C37F    ; }
 $F48B JR NZ,$F4AC   ; Jump to #R$F4AC if the token isn't for getting into the
                     ; boat.
; This entry point is used by the routine at #R$F946.
; .
; The player has typed any variation of wanting to get into the boat.
@label=Validate_GetIntoBoat
*$F48D LD A,($BCCB)  ; {Jump to #R$F498 if the *#R$BCCB is room #N$04: "#ROOM$04". So the
 $F490 CP $04        ; player is already in the boat.
 $F492 JR Z,$F498    ; }
 $F494 CP $6B        ; {Jump to #R$F49E if the *#R$BCCB is not room #N$6B: "#ROOM$6B" (a
 $F496 JR NZ,$F49E   ; room variation, but the player being in the boat).}
; The player is definitely already in the boat, so tell them this.
; .
; Print "#STR$DC21,$08($b==$FF)".
@label=AlreadyInTheBoat
*$F498 LD HL,$DC21   ; #REGhl=#R$DC21.
 $F49B JP $F03A      ; Jump to #R$F03A.
; The player can only get into the boat from room #N$03: "#ROOM$03".
@label=Action_GetIntoBoat
*$F49E CP $03        ; {Jump to #R$F4A6 if the *#R$BCCB is not room #N$03:
 $F4A0 JR NZ,$F4A6   ; "#ROOM$03"}
 $F4A2 LD A,$04      ; #REGa=#N$04.
 $F4A4 JR $F4A8      ; Jump to #R$F4A8.
@label=WhereIsTheBoat
*$F4A6 LD A,$6B      ; #REGa=#N$6B.
*$F4A8 CALL $EF54    ; Call #R$EF54.
 $F4AB RET           ; Return.
; Confirm if the player intended to "GET OUT OF BOAT" (or similar).
@label=GetOutOfBoat_Check
*$F4AC LD HL,$EA1D   ; {Call #R$C37F with #R$EA1D.
 $F4AF CALL $C37F    ; }
 $F4B2 JR NZ,$F4D1   ; Jump to #R$F4D1 if the token isn't for the getting out
                     ; of the boat.
; This entry point is used by the routine at #R$F946.
@label=IsPlayerInRowingBoat_1
*$F4B4 LD A,($BCCB)  ; {Jump to #R$F4C1 if the *#R$BCCB is not room #N$04:
 $F4B7 CP $04        ; "#ROOM$04".
 $F4B9 JR NZ,$F4C1   ; }
 $F4BB LD A,$03      ; #REGa=#N$03.
 $F4BD CALL $EF54    ; Call #R$EF54.
 $F4C0 RET           ; Return.
; Also check the room variation, as the player is in the boat in both.
@label=IsPlayerInRowingBoat_2
*$F4C1 CP $6B        ; {Jump to #R$F4CB if the *#R$BCCB is not room #N$6B:
 $F4C3 JR NZ,$F4CB   ; "#ROOM$6B".}
 $F4C5 LD A,$06      ; #REGa=#N$06.
 $F4C7 CALL $EF54    ; Call #R$EF54.
 $F4CA RET           ; Return.
; Print "#STR$DC37,$08($b==$FF)".
@label=NotInTheBoat
*$F4CB LD HL,$DC37   ; #REGhl=#R$DC37.
 $F4CE JP $F03A      ; Jump to #R$F03A.
; Pivot to "TAKE" as a synonym.
@label=Synonym_Take
*$F4D1 JP $F263      ; Jump to #R$F263.

; Action: Drop/ Throw
@label=Action_DropThrow
c$F4D4 CALL $C47B    ; Call #R$C47B.
 $F4D7 RET C         ; Return if the direct object is malformed.
; Start by calling the chain of items to check...
 $F4D8 JR $F50B      ; Jump to #R$F50B.
; Check if the player is holding the requested item?
@label=DropThrow_IsPlayerHoldingItem
*$F4DA CALL $C3E4    ; Call #R$C3E4.
 $F4DD JR Z,$F4FC    ; Jump to #R$F4FC if the player is holding the requested
                     ; item.
; Print "#STR$BFAF,$08($b==$FF)".
 $F4DF LD HL,$BFAF   ; #REGhl=#R$BFAF.
 $F4E2 CALL $BAA4    ; Call #R$BAA4.
 $F4E5 LD A,E        ; #REGa=#REGe.
 $F4E6 LD HL,$F29B   ; #REGhl=#R$F29B.
 $F4E9 LD BC,$0001   ; #REGbc=#N($0001,$04,$04).
 $F4EC CPIR          ; CPIR.
 $F4EE JR Z,$F4F6    ; Jump to #R$F4F6 if #REGa is equal to #N$06.
; Print "#STR$BF2B,$08($b==$FF)".
 $F4F0 LD HL,$BF2B   ; #REGhl=#R$BF2B.
 $F4F3 JP $F03A      ; Jump to #R$F03A.
; Print "#STR$BF2F,$08($b==$FF)".
@label=NotCarryingItem_Plural
*$F4F6 LD HL,$BF2F   ; #REGhl=#R$BF2F.
 $F4F9 JP $F03A      ; Jump to #R$F03A.
; The player has the item in their inventory so drop/ throw it.
@label=DropItem
*$F4FC LD B,E        ; Copy the item ID into #REGb.
 $F4FD LD A,($BCCB)  ; {#REGc=*#R$BCCB.
 $F500 LD C,A        ; }
; Alter the items location from the players inventory to the current room
; ID.
 $F501 CALL $C412    ; Call #R$C412.
 $F504 LD HL,$BC98   ; {Decrease *#R$BC98 by one.
 $F507 DEC (HL)      ; }
 $F508 JP $F06A      ; Jump to #R$F06A.
; Is the player asking to drop or throw the bottle of rum?
@label=Validate_DropThrow_BottleRum
*$F50B LD HL,$E9E7   ; {Call #R$C37F with #R$E9E7.
 $F50E CALL $C37F    ; }
 $F511 JR NZ,$F51C   ; Jump to #R$F51C if the token isn't for the bottle of
                     ; rum.
 $F513 LD HL,$E87A   ; #REGhl=#R$E87A.
 $F516 CALL $C401    ; Call #R$C401.
 $F519 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the fish?
@label=Validate_DropThrow_Fish
*$F51C LD HL,$E9CC   ; {Call #R$C37F with #R$E9CC.
 $F51F CALL $C37F    ; }
 $F522 JR NZ,$F52D   ; Jump to #R$F52D if the token isn't for the fish.
 $F524 LD HL,$E895   ; #REGhl=#R$E895.
 $F527 CALL $C401    ; Call #R$C401.
 $F52A JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the watch?
@label=Validate_DropThrow_Watch
*$F52D LD HL,$E9D1   ; {Call #R$C37F with #R$E9D1.
 $F530 CALL $C37F    ; }
 $F533 JR NZ,$F53A   ; Jump to #R$F53A if the token isn't for the watch.
 $F535 LD A,$17      ; #REGa=#N$17.
 $F537 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the shoe?
@label=Validate_DropThrow_Shoe
*$F53A LD HL,$E9D3   ; {Call #R$C37F with #R$E9D3.
 $F53D CALL $C37F    ; }
 $F540 JR NZ,$F547   ; Jump to #R$F547 if the token isn't for the shoe.
 $F542 LD A,$15      ; #REGa=#N$15.
 $F544 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the rod?
@label=Validate_DropThrow_Rod
*$F547 LD HL,$E9D5   ; {Call #R$C37F with #R$E9D5.
 $F54A CALL $C37F    ; }
 $F54D JR NZ,$F554   ; Jump to #R$F554 if the token isn't for the rod.
 $F54F LD A,$08      ; #REGa=#N$08.
 $F551 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the fruit?
@label=Validate_DropThrow_Fruit
*$F554 LD HL,$E9D7   ; {Call #R$C37F with #R$E9D7.
 $F557 CALL $C37F    ; }
 $F55A JR NZ,$F561   ; Jump to #R$F561 if the token isn't for the fruit.
 $F55C LD A,$0E      ; #REGa=#N$0E.
 $F55E JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the jewels?
@label=Validate_DropThrow_Jewels
*$F561 LD HL,$E9DB   ; {Call #R$C37F with #R$E9DB.
 $F564 CALL $C37F    ; }
 $F567 JR NZ,$F56E   ; Jump to #R$F56E if the token isn't for the jewels.
 $F569 LD A,$1D      ; #REGa=#N$1D.
 $F56B JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the match?
@label=Validate_DropThrow_Match
*$F56E LD HL,$E9E1   ; {Call #R$C37F with #R$E9E1.
 $F571 CALL $C37F    ; }
 $F574 JR NZ,$F57F   ; Jump to #R$F57F if the token isn't for the match.
 $F576 LD HL,$E86E   ; #REGhl=#R$E86E.
 $F579 CALL $C401    ; Call #R$C401.
 $F57C JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the plank?
@label=Validate_DropThrow_Plank
*$F57F LD HL,$E9E3   ; {Call #R$C37F with #R$E9E3.
 $F582 CALL $C37F    ; }
 $F585 JR NZ,$F58C   ; Jump to #R$F58C if the token isn't for the plank.
 $F587 LD A,$04      ; #REGa=#N$04.
 $F589 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the coconut?
@label=Validate_DropThrow_Coconut
*$F58C LD HL,$E9E5   ; {Call #R$C37F with #R$E9E5.
 $F58F CALL $C37F    ; }
 $F592 JR NZ,$F599   ; Jump to #R$F599 if the token isn't for the coconut.
 $F594 LD A,$07      ; #REGa=#N$07.
 $F596 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the gun?
@label=Validate_DropThrow_Gun
*$F599 LD HL,$E9EF   ; {Call #R$C37F with #R$E9EF.
 $F59C CALL $C37F    ; }
 $F59F JR NZ,$F5A6   ; Jump to #R$F5A6 if the token isn't for the gun.
 $F5A1 LD A,$0F      ; #REGa=#N$0F.
 $F5A3 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the eyepatch?
@label=Validate_DropThrow_Eyepatch
*$F5A6 LD HL,$E9F1   ; {Call #R$C37F with #R$E9F1.
 $F5A9 CALL $C37F    ; }
 $F5AC JR NZ,$F5C4   ; Jump to #R$F5C4 if the token isn't for the eyepatch.
 $F5AE LD HL,$E885   ; #REGhl=#R$E885.
 $F5B1 CALL $C401    ; Call #R$C401.
 $F5B4 CP $11        ; {Jump to #R$F4DA if #REGa is not equal to #N$11.
 $F5B6 JP NZ,$F4DA   ; }
 $F5B9 LD BC,$1110   ; {Call #R$C426 to transform item #N$11 (#ITEM$11) into item #N$10
 $F5BC CALL $C426    ; (#ITEM$10).}
 $F5BF LD A,$10      ; #REGa=#N$10.
 $F5C1 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the keg of gunpowder?
@label=Validate_DropThrow_KegGunpowder
*$F5C4 LD HL,$E9F3   ; {Call #R$C37F with #R$E9F3.
 $F5C7 CALL $C37F    ; }
 $F5CA JR NZ,$F5D1   ; Jump to #R$F5D1 if the token isn't for the keg of
                     ; gunpowder.
 $F5CC LD A,$12      ; #REGa=#N$12.
 $F5CE JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the sextant?
@label=Validate_DropThrow_Sextant
*$F5D1 LD HL,$E9FB   ; {Call #R$C37F with #R$E9FB.
 $F5D4 CALL $C37F    ; }
 $F5D7 JR NZ,$F5DE   ; Jump to #R$F5DE if the token isn't for the sextant.
 $F5D9 LD A,$16      ; #REGa=#N$16.
 $F5DB JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the crowbar?
@label=Validate_DropThrow_Crowbar
*$F5DE LD HL,$E9FD   ; {Call #R$C37F with #R$E9FD.
 $F5E1 CALL $C37F    ; }
 $F5E4 JR NZ,$F5EB   ; Jump to #R$F5EB if the token isn't for the crowbar.
 $F5E6 LD A,$1E      ; #REGa=#N$1E.
 $F5E8 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the key?
@label=Validate_DropThrow_Key
*$F5EB LD HL,$E9FF   ; {Call #R$C37F with #R$E9FF.
 $F5EE CALL $C37F    ; }
 $F5F1 JR NZ,$F5F8   ; Jump to #R$F5F8 if the token isn't for the key.
 $F5F3 LD A,$1F      ; #REGa=#N$1F.
 $F5F5 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the skull?
@label=Validate_DropThrow_Skull
*$F5F8 LD HL,$EA01   ; {Call #R$C37F with #R$EA01.
 $F5FB CALL $C37F    ; }
 $F5FE JR NZ,$F605   ; Jump to #R$F605 if the token isn't for the skull.
 $F600 LD A,$20      ; #REGa=#N$20.
 $F602 JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the spear?
@label=Validate_DropThrow_Spear
*$F605 LD HL,$EA06   ; {Call #R$C37F with #R$EA06.
 $F608 CALL $C37F    ; }
 $F60B JR NZ,$F612   ; Jump to #R$F612 if the token isn't for the spear.
 $F60D LD A,$1A      ; #REGa=#N$1A.
 $F60F JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the parrot?
@label=Validate_DropThrow_Parrot
*$F612 LD HL,$EA08   ; {Call #R$C37F with #R$EA08.
 $F615 CALL $C37F    ; }
 $F618 JR NZ,$F61F   ; Jump to #R$F61F if the token isn't for the parrot.
 $F61A LD A,$28      ; #REGa=#N$28.
 $F61C JP $F4DA      ; Jump to #R$F4DA.
; Is the player asking to drop or throw the plank across the pit?
@label=Validate_DropThrow_PlankAcrossPit
*$F61F LD HL,$EA26   ; {Call #R$C37F with #R$EA26.
 $F622 CALL $C37F    ; }
 $F625 JP Z,$F074    ; Jump to #R$F074 if the token is for dropping/ throwing the plank
                     ; across the pit.
 $F628 LD A,($BD66)  ; {Jump to #R$F633 if *#R$BD66 is equal to #N$3E.
 $F62B CP $3E        ;
 $F62D JP Z,$F633    ; }
 $F630 JP $F06F      ; Jump to #R$F06F.
*$F633 JR $F646      ; Jump to #R$F646.
; This entry point is used by the routine at #R$F7D6.
*$F635 CALL $C3E4    ; Call #R$C3E4.
 $F638 RET NZ        ; Return if #REGa is not equal to #N$3E.
 $F639 LD B,E        ; #REGb=#REGe.
 $F63A LD A,($BCCB)  ; {#REGc=*#R$BCCB.
 $F63D LD C,A        ; }
 $F63E CALL $C412    ; Call #R$C412.
 $F641 LD HL,$BC98   ; #REGhl=#R$BC98.
 $F644 DEC (HL)      ; Decrease *#REGhl by one.
 $F645 RET           ; Return.
*$F646 LD HL,$EA2A   ; {Call #R$C37F with #R$EA2A.
 $F649 CALL $C37F    ; }
 $F64C JR NZ,$F659   ; Jump to #R$F659 if the token isn't for dropping/ throwing the spear
                     ; at the lion.
 $F64E LD A,$1A      ; #REGa=#N$1A.
 $F650 CALL $F635    ; Call #R$F635.
; Print "#STR$DC4F,$08($b==$FF)".
 $F653 LD HL,$DC4F   ; #REGhl=#R$DC4F.
 $F656 JP $F03A      ; Jump to #R$F03A.
*$F659 LD HL,$EA2E   ; {Call #R$C37F with #R$EA2E.
 $F65C CALL $C37F    ; }
 $F65F JR NZ,$F66C   ; Jump to #R$F66C if the token isn't for dropping/ throwing the
                     ; coconut at the lion.
 $F661 LD A,$07      ; #REGa=#N$07.
 $F663 CALL $F635    ; Call #R$F635.
; Print "#STR$DC82,$08($b==$FF)".
 $F666 LD HL,$DC82   ; #REGhl=#R$DC82.
 $F669 JP $F03A      ; Jump to #R$F03A.
*$F66C LD HL,$EA32   ; {Call #R$C37F with #R$EA32.
 $F66F CALL $C37F    ; }
 $F672 JR NZ,$F67F   ; Jump to #R$F67F if the token isn't for dropping/ throwing the fruit
                     ; at the lion.
; This entry point is used by the routine at #R$F7AB.
*$F674 LD A,$0E      ; #REGa=#N$0E.
 $F676 CALL $F635    ; Call #R$F635.
; Print "#STR$DCED,$08($b==$FF)".
 $F679 LD HL,$DCED   ; #REGhl=#R$DCED.
 $F67C JP $F03A      ; Jump to #R$F03A.
*$F67F LD HL,$EA36   ; {Call #R$C37F with #R$EA36.
 $F682 CALL $C37F    ; }
 $F685 JR NZ,$F6A4   ; Jump to #R$F6A4 if the token isn't for the .
; This entry point is used by the routine at #R$F7AB.
*$F687 LD HL,$E895   ; #REGhl=#R$E895.
 $F68A CALL $C401    ; Call #R$C401.
 $F68D CALL $F635    ; Call #R$F635.
 $F690 LD A,E        ; #REGa=#REGe.
 $F691 CALL $C3EA    ; Call #R$C3EA.
 $F694 LD A,$2A      ; #REGa=#N$2A (event ID: #N($2A&$7F)).
 $F696 CALL $C3EA    ; Call #R$C3EA.
 $F699 LD A,$3C      ; {Write #N$3C to *#R$EC3F.
 $F69B LD ($EC3F),A  ; }
; Print "#STR$DD1B,$08($b==$FF)".
 $F69E LD HL,$DD1B   ; #REGhl=#R$DD1B.
 $F6A1 JP $F03A      ; Jump to #R$F03A.
*$F6A4 LD HL,$EA3F   ; {Call #R$C37F with #R$EA3F.
 $F6A7 CALL $C37F    ; }
 $F6AA JR NZ,$F6C2   ; Jump to #R$F6C2 if the token isn't for the .
; This entry point is used by the routine at #R$F7AB.
*$F6AC LD A,$0E      ; Load #ITEM$0E into #REGa.
 $F6AE CALL $F635    ; Call #R$F635.
 $F6B1 LD BC,$2728   ; Call #R$C426 to transform item #N$27 (#ITEM$27) into item #N$28
                     ; (#ITEM$28).
 $F6B4 CALL $C426    ;
 $F6B7 LD A,$0E      ; {Call #R$C3EA with #ITEM$0E (as the parrot ate it).
 $F6B9 CALL $C3EA    ; }
; Print "#STR$DD6C,$08($b==$FF)".
 $F6BC LD HL,$DD6C   ; #REGhl=#R$DD6C.
 $F6BF JP $F03A      ; Jump to #R$F03A.
*$F6C2 LD HL,$EA43   ; {Call #R$C37F with #R$EA43.
 $F6C5 CALL $C37F    ; }
 $F6C8 JR NZ,$F6FD   ; Jump to #R$F6FD if the token isn't for the .
; This entry point is used by the routine at #R$F7AB.
*$F6CA LD A,$17      ; {Call #R$C35F with #ITEM$17.
 $F6CC CALL $C35F    ; }
 $F6CF JP NZ,$F079   ; Jump to #R$F079 #ITEM$17 isn't in the current room.
 $F6D2 LD A,$17      ; Load #ITEM$17 into #REGa.
 $F6D4 CALL $F635    ; Call #R$F635.
 $F6D7 LD BC,$1819   ; {Call #R$C426 to transform item #N$18 (#ITEM$18) into item #N$19
 $F6DA CALL $C426    ; (#ITEM$19).}
 $F6DD LD BC,$171A   ; {Call #R$C426 to transform item #N$17 (#ITEM$17) into item #N$1A
 $F6E0 CALL $C426    ; (#ITEM$1A).}
 $F6E3 LD A,$1D      ; {Write #N$1D to *#R$EBCD to open up westbound access to #ROOM$1D
 $F6E5 LD ($EBCD),A  ; from #ROOM$1F.}
 $F6E8 LD A,$20      ; {Write #N$20 to *#R$EBCB to open up southbound access to #ROOM$20
 $F6EA LD ($EBCB),A  ; from #ROOM$1F.}
 $F6ED LD A,$21      ; {Write #N$21 to *#R$EBCC to open up eastbound access to #ROOM$21
 $F6EF LD ($EBCC),A  ; from #ROOM$1F.}
 $F6F2 LD A,$23      ; {Write #N$23 to *#R$EBCA to open up northbound access to #ROOM$23
 $F6F4 LD ($EBCA),A  ; from #ROOM$1F.}
; Print "#STR$DDDD,$08($b==$FF)".
 $F6F7 LD HL,$DDDD   ; #REGhl=#R$DDDD.
 $F6FA JP $F03A      ; Jump to #R$F03A.
*$F6FD LD HL,$EA47   ; {Call #R$C37F with #R$EA47.
 $F700 CALL $C37F    ; }
 $F703 JR NZ,$F729   ; Jump to #R$F729 if the token isn't for the .
 $F705 LD A,$1A      ; {Call #R$F635 using #ITEM$1A.
 $F707 CALL $F635    ; }
 $F70A LD A,$2B      ; {Call #R$C3EA with #ITEM$2B.
 $F70C CALL $C3EA    ; }
 $F70F LD A,$1A      ; {Call #R$C3EA with #ITEM$1A.
 $F711 CALL $C3EA    ; }
 $F714 LD A,$40      ; {Write #N$40 to *#R$EC8A to open up northbound access to #ROOM$40
 $F716 LD ($EC8A),A  ; from #ROOM$3F.}
 $F719 LD A,$41      ; {Write #N$41 to *#R$EC8B to open up southbound access to #ROOM$41
 $F71B LD ($EC8B),A  ; from #ROOM$3F.}
 $F71E LD A,$42      ; {Write #N$42 to *#R$EC8C to open up eastbound access to #ROOM$42
 $F720 LD ($EC8C),A  ; from #ROOM$3F.}
; Print "#STR$DE81,$08($b==$FF)".
 $F723 LD HL,$DE81   ; #REGhl=#R$DE81.
 $F726 JP $F03A      ; Jump to #R$F03A.
*$F729 LD HL,$EA50   ; {Call #R$C37F with #R$EA50.
 $F72C CALL $C37F    ; }
 $F72F JR NZ,$F74F   ; Jump to #R$F74F if the token isn't for the .
 $F731 LD A,$12      ; {Call #R$C35F with #ITEM$12.
 $F733 CALL $C35F    ; }
 $F736 JP NZ,$F079   ; Jump to #R$F079 if #ITEM$12 isn't in the current room.
 $F739 LD A,$12      ; #REGa=#N$12.
 $F73B CALL $F635    ; Call #R$F635.
 $F73E LD A,$12      ; #REGa=#N$12 (event ID: #N($12&$7F)).
 $F740 CALL $C3EA    ; Call #R$C3EA.
 $F743 LD BC,$1314   ; {Call #R$C426 to transform item #N$13 (#ITEM$13) into item #N$14
 $F746 CALL $C426    ; (#ITEM$14).}
; Print "#STR$DF15,$08($b==$FF)".
 $F749 LD HL,$DF15   ; #REGhl=#R$DF15.
 $F74C JP $F03A      ; Jump to #R$F03A.
*$F74F LD HL,$EA5E   ; {Call #R$C37F with #R$EA5E.
 $F752 CALL $C37F    ; }
 $F755 JR NZ,$F78D   ; Jump to #R$F78D if the token isn't for the .
 $F757 LD A,$12      ; {Call #R$C3E4 with #ITEM$12.
 $F759 CALL $C3E4    ; }
 $F75C JP Z,$F06F    ; Jump to #R$F06F if *#REGhl is equal to #N$12.
 $F75F LD HL,$E86E   ; #REGhl=#R$E86E.
 $F762 CALL $C401    ; Call #R$C401.
 $F765 CALL $F635    ; Call #R$F635.
 $F768 LD A,$12      ; {Call #R$C35F with #ITEM$12.
 $F76A CALL $C35F    ; }
 $F76D JP Z,$F06A    ; Jump to #R$F06A if #ITEM$12 is present in the current
                     ; room.
*$F770 LD A,$02      ; {Call #R$C35F with #ITEM$02.
 $F772 CALL $C35F    ; }
 $F775 JP Z,$F06A    ; Jump to #R$F06A if #ITEM$02 is present in the current
                     ; room.
 $F778 LD A,$03      ; {Call #R$C3EA with #ITEM$03.
 $F77A CALL $C3EA    ; }
 $F77D LD A,$14      ; {Call #R$C3EA with #ITEM$14.
 $F77F CALL $C3EA    ; }
 $F782 LD A,$4E      ; {Write #N$4E to *#R$ECBC to open up eastbound access to #ROOM$4E
 $F784 LD ($ECBC),A  ; from #ROOM$47.}
; Print "#STR$DF8E,$08($b==$FF)".
 $F787 LD HL,$DF8E   ; #REGhl=#R$DF8E.
 $F78A JP $F03A      ; Jump to #R$F03A.
*$F78D LD HL,$EA6C   ; {Call #R$C37F with #R$EA6C.
 $F790 CALL $C37F    ; }
 $F793 JR NZ,$F7A8   ; Jump to #R$F7A8 if the token isn't for the .
 $F795 LD HL,$E86E   ; #REGhl=#R$E86E.
 $F798 CALL $C401    ; Call #R$C401.
 $F79B CALL $F635    ; Call #R$F635.
 $F79E LD A,$14      ; {Call #R$C35F with #ITEM$14.
 $F7A0 CALL $C35F    ; }
 $F7A3 JR Z,$F770    ; Jump to #R$F770 if #ITEM$14 is present in the current
                     ; room.
 $F7A5 JP $F06A      ; Jump to #R$F06A.
*$F7A8 JP $F065      ; Jump to #R$F065.

; Action: Lay/ Place/ Put
@label=Action_LayPlacePut
c$F7AB CALL $C49F    ; Call #R$C49F.
 $F7AE RET C         ; Return if *#REGhl is less than #N$14.
 $F7AF LD HL,$EA32   ; {Call #R$C37F with #R$EA32.
 $F7B2 CALL $C37F    ; }
 $F7B5 JP Z,$F674    ; Jump to #R$F674 if the token is for the .
 $F7B8 LD HL,$EA36   ; {Call #R$C37F with #R$EA36.
 $F7BB CALL $C37F    ; }
 $F7BE JP Z,$F687    ; Jump to #R$F687 if the token is for the .
 $F7C1 LD HL,$EA3F   ; {Call #R$C37F with #R$EA3F.
 $F7C4 CALL $C37F    ; }
 $F7C7 JP Z,$F6AC    ; Jump to #R$F6AC if the token is for the .
 $F7CA LD HL,$EA43   ; {Call #R$C37F with #R$EA43.
 $F7CD CALL $C37F    ; }
 $F7D0 JP Z,$F6CA    ; Jump to #R$F6CA if the token is for the .
 $F7D3 JP $F065      ; Jump to #R$F065.

; Action: Kill
@label=Action_Kill
c$F7D6 CALL $C49F    ; Call #R$C49F.
 $F7D9 RET C         ; Return if *#REGhl is less than #N$14.
 $F7DA LD HL,$EA26   ; {Call #R$C37F with #R$EA26.
 $F7DD CALL $C37F    ; }
 $F7E0 JR NZ,$F813   ; Jump to #R$F813 if the token isn't for the .
 $F7E2 LD A,$04      ; {Call #R$C35F with #ITEM$04.
 $F7E4 CALL $C35F    ; }
 $F7E7 JP NZ,$F079   ; Jump to #R$F079 if #ITEM$04 isn't in the current room.
 $F7EA LD A,$04      ; #REGa=#N$04.
 $F7EC CALL $F635    ; Call #R$F635.
 $F7EF LD A,$04      ; #REGa=#N$04 (event ID: #N($04&$7F)).
 $F7F1 CALL $C3EA    ; Call #R$C3EA.
 $F7F4 LD BC,$0566   ; {Call #R$C412 using item #ITEM$05 to create it in
 $F7F7 CALL $C412    ; #ROOM$66.}
 $F7FA LD BC,$0668   ; {Call #R$C412 using item #ITEM$06 to create it in
 $F7FD CALL $C412    ; #ROOM$68.}
 $F800 LD A,$68      ; {Write #N$68 to *#R$ED75.
 $F802 LD ($ED75),A  ; }
 $F805 LD A,$66      ; {Write #N$66 to *#R$ED80.
 $F807 LD ($ED80),A  ; }
 $F80A CALL $F06A    ; Call #R$F06A.
; Print "#STR$E00C,$08($b==$FF)".
 $F80D LD HL,$E00C   ; #REGhl=#R$E00C.
 $F810 JP $F03A      ; Jump to #R$F03A.
*$F813 LD HL,$EA70   ; {Call #R$C37F with #R$EA70.
 $F816 CALL $C37F    ; }
 $F819 JR NZ,$F84E   ; Jump to #R$F84E if the token isn't for the .
; This entry point is used by the routine at #R$FB71.
*$F81B LD A,$08      ; {Call #R$C35F with #ITEM$08.
 $F81D CALL $C35F    ; }
 $F820 JP NZ,$F079   ; Jump to #R$F079 if #ITEM$08 isn't in the current room.
 $F823 LD A,$08      ; {Call #R$F635 with #ITEM$08.
 $F825 CALL $F635    ; }
 $F828 LD A,$08      ; {Call #R$C3EA with #ITEM$08.
 $F82A CALL $C3EA    ; }
 $F82D LD BC,$090A   ; {Call #R$C426 to transform item #N$09 (#ITEM$09) into item #N$0A
 $F830 CALL $C426    ; (#ITEM$0A).}
 $F833 LD BC,$3231   ; {Call #R$C426 to transform item #N$32 (#ITEM$32) into item #N$31
 $F836 CALL $C426    ; (#ITEM$31).}
 $F839 LD A,$33      ; {Call #R$C3EA with #ITEM$33.
 $F83B CALL $C3EA    ; }
 $F83E LD A,$6A      ; {Write #N$6A to *#R$EB90 to open up eastbound access to #ROOM$6A
 $F840 LD ($EB90),A  ; from #ROOM$15.}
 $F843 LD A,$15      ; {Write #N$15 to *#R$ED8D to open up southbound access to #ROOM$15
 $F845 LD ($ED8D),A  ; from #ROOM$6A.}
; Print "#STR$E029,$08($b==$FF)".
 $F848 LD HL,$E029   ; #REGhl=#R$E029.
 $F84B JP $F03A      ; Jump to #R$F03A.
*$F84E JP $F06F      ; Jump to #R$F06F.

; Action: Shoot
@label=Action_Shoot
c$F851 CALL $C49F    ; Call #R$C49F.
 $F854 RET C         ; Return if *#REGhl is less than #N$15.
 $F855 LD HL,$EA8D   ; {Call #R$C37F with #R$EA8D.
 $F858 CALL $C37F    ; }
 $F85B JR NZ,$F888   ; Jump to #R$F888 if the token isn't for the .
 $F85D LD A,$1A      ; {Call #R$C3E4 with #ITEM$1A.
 $F85F CALL $C3E4    ; }
 $F862 JP NZ,$F07E   ; Jump to #R$F07E if *#REGhl is not equal to #N$1A.
 $F865 LD A,$1A      ; {Call #R$C3EA with #ITEM$1A.
 $F867 CALL $C3EA    ; }
 $F86A LD A,$2B      ; {Call #R$C3EA with #ITEM$2B.
 $F86C CALL $C3EA    ; }
 $F86F LD HL,$BC98   ; #REGhl=#R$BC98.
 $F872 DEC (HL)      ; Decrease *#REGhl by one.
 $F873 LD A,$40      ; {Write #N$40 to *#R$EC8A to open up northbound access to #ROOM$40
 $F875 LD ($EC8A),A  ; from #ROOM$3F.}
 $F878 LD A,$41      ; {Write #N$41 to *#R$EC8B to open up southbound access to #ROOM$41
 $F87A LD ($EC8B),A  ; from #ROOM$3F.}
 $F87D LD A,$42      ; {Write #N$42 to *#R$EC8C to open up eastbound access to #ROOM$42
 $F87F LD ($EC8C),A  ; from #ROOM$3F.}
; Print "#STR$DE81,$08($b==$FF)".
 $F882 LD HL,$DE81   ; #REGhl=#R$DE81.
 $F885 JP $F03A      ; Jump to #R$F03A.
*$F888 LD HL,$EA96   ; {Call #R$C37F with #R$EA96.
 $F88B CALL $C37F    ; }
 $F88E JR NZ,$F89E   ; Jump to #R$F89E if the token isn't for the .
 $F890 LD A,$1A      ; {Call #R$C3E4 with #ITEM$1A.
 $F892 CALL $C3E4    ; }
 $F895 JP NZ,$F07E   ; Jump to #R$F07E if *#REGhl is not equal to #N$1A.
; Print "#STR$E07F,$08($b==$FF)".
 $F898 LD HL,$E07F   ; #REGhl=#R$E07F.
 $F89B JP $F03A      ; Jump to #R$F03A.
*$F89E LD HL,$EA9A   ; {Call #R$C37F with #R$EA9A.
 $F8A1 CALL $C37F    ; }
 $F8A4 JR NZ,$F8B8   ; Jump to #R$F8B8 if the token isn't for the .
 $F8A6 LD A,$1A      ; {Call #R$C3E4 with #ITEM$1A.
 $F8A8 CALL $C3E4    ; }
 $F8AB JP NZ,$F07E   ; Jump to #R$F07E if *#REGhl is not equal to #N$1A.
; Bad luck!
 $F8AE LD HL,$EDD7   ; {Switch #R$EDD7 onto the stack so the next return actions a "game
 $F8B1 EX (SP),HL    ; over".}
; Print "#STR$E0B4,$08($b==$FF)".
 $F8B2 LD HL,$E0B4   ; #REGhl=#R$E0B4.
 $F8B5 JP $F03A      ; Jump to #R$F03A.
*$F8B8 LD HL,$EA9E   ; {Call #R$C37F with #R$EA9E.
 $F8BB CALL $C37F    ; }
 $F8BE JR NZ,$F90A   ; Jump to #R$F90A if the token isn't for the .
 $F8C0 LD A,$0F      ; {Call #R$C3E4 with #ITEM$0F.
 $F8C2 CALL $C3E4    ; }
 $F8C5 JP NZ,$F07E   ; Jump to #R$F07E if ?? is not equal to #N$0F.
; This entry point is used by the routine at #R$F91B.
*$F8C8 LD HL,$E8B2   ; #REGhl=#R$E8B2.
 $F8CB CALL $C401    ; Call #R$C401.
 $F8CE LD B,A        ; #REGb=#REGa.
 $F8CF BIT 7,A       ; Test bit 7 of #REGa.
 $F8D1 JR NZ,$F8D9   ; Jump to #R$F8D9 if ?? is not equal to #N$0F.
; Print "#STR$E138,$08($b==$FF)".
 $F8D3 LD HL,$E138   ; #REGhl=#R$E138.
 $F8D6 JP $F03A      ; Jump to #R$F03A.

; Action: Shooting
;
; Used by the routine at #R$F851.
@label=Action_Shooting
c$F8D9 PUSH BC                      ; Stash #REGbc on the stack.
; Print "#STR$E0EB,$08($b==$FF)".
 $F8DA LD HL,$E0EB                  ; #REGhl=#R$E0EB.
 $F8DD CALL $BAB1                   ; Call #R$BAB1.
 $F8E0 LD A,$05                     ; #REGa=#N$05.
 $F8E2 CALL $C582                   ; Call #R$C582.
 $F8E5 POP BC                       ; Restore #REGbc from the stack.
 $F8E6 JR NZ,$F8EE                  ; Jump to #R$F8EE if the random generator
                                    ; returns a non-zero response.
; Print "#STR$E122,$08($b==$FF)".
 $F8E8 LD HL,$E122                  ; #REGhl=#R$E122.
 $F8EB JP $F03E                     ; Jump to #R$F03E.
@label=Action_Shooting_Success
*$F8EE LD A,B                       ; #REGa=#REGb.
 $F8EF SUB $03                      ; #REGa-=#N$03.
 $F8F1 RES 7,A                      ; Reset bit 7 of #REGa.
 $F8F3 LD E,A                       ; #REGe=#REGa.
 $F8F4 LD D,$00                     ; #REGd=#N$00.
 $F8F6 LD HL,$F904                  ; #REGhl=#R$F904.
 $F8F9 ADD HL,DE                    ; #REGhl+=#REGde.
 $F8FA LD C,(HL)                    ; #REGc=*#REGhl.
 $F8FB CALL $C426                   ; Call #R$C426.
; Print "#STR$E0FF,$08($b==$FF)".
 $F8FE LD HL,$E0FF                  ; #REGhl=#R$E0FF.
 $F901 JP $F03E                     ; Jump to #R$F03E.
 $F904 DEFB $23,$24,$25,$00,$00,$26 ;
; This entry point is used by the routine at #R$F851.
*$F90A LD HL,$EAA2                  ; {Call #R$C37F with #R$EAA2.
 $F90D CALL $C37F                   ; }
 $F910 JR NZ,$F918                  ; Jump to #R$F918 if the token isn't for
                                    ; the .
; Print "#STR$E14B,$08($b==$FF)".
 $F912 LD HL,$E14B                  ; #REGhl=#R$E14B.
 $F915 JP $F03A                     ; Jump to #R$F03A.
*$F918 JP $F06F                     ; Jump to #R$F06F.

; Action: Climb
@label=Action_Climb
c$F91B CALL $C47B    ; Call #R$C47B.
 $F91E RET C         ; Return if the direct object is malformed.
 $F91F LD A,$0F      ; {Call #R$C3E4 with item: #ITEM$0F.
 $F921 CALL $C3E4    ; }
 $F924 JR Z,$F92C    ; Jump to #R$F92C if the player has the gun in their
                     ; inventory.
; Print "#STR$E15E,$08($b==$FF)".
 $F926 LD HL,$E15E   ; #REGhl=#R$E15E.
 $F929 JP $F03A      ; Jump to #R$F03A.
@label=PlayerHasGun
*$F92C LD HL,$EAA6   ; {Call #R$C37F with #R$EAA6.
 $F92F CALL $C37F    ; }
 $F932 JP Z,$F8C8    ; Jump to #R$F8C8 if the token is for the .
 $F935 LD HL,$EAAC   ; {Call #R$C37F with #R$EAAC.
 $F938 CALL $C37F    ; }
 $F93B JR NZ,$F943   ; Jump to #R$F943 if the token isn't for the .
; Print "#STR$E14B,$08($b==$FF)".
 $F93D LD HL,$E14B   ; #REGhl=#R$E14B.
 $F940 JP $F03A      ; Jump to #R$F03A.
*$F943 JP $F097      ; Jump to #R$F097.

; Action: Eat
@label=Action_Eat
c$F946 CALL $C47B    ; Call #R$C47B.
 $F949 RET C         ; Return if the direct object is malformed.
 $F94A LD HL,$EAB2   ; {Call #R$C37F with #R$EAB2.
 $F94D CALL $C37F    ; }
 $F950 JR NZ,$F960   ; Jump to #R$F960 if the token isn't for the .
 $F952 LD A,($BCCB)  ; {Jump to #R$F06F if *#R$BCCB is not room #N$04:
 $F955 CP $04        ; "#ROOM$04".
 $F957 JP NZ,$F06F   ; }
 $F95A LD A,$03      ; #REGa=#N$03.
 $F95C CALL $EF54    ; Call #R$EF54.
 $F95F RET           ; Return.
*$F960 LD HL,$EAB5   ; {Call #R$C37F with #R$EAB5.
 $F963 CALL $C37F    ; }
 $F966 JR NZ,$F976   ; Jump to #R$F976 if the token isn't for the .
 $F968 LD A,($BCCB)  ; {Jump to #R$F06F if *#R$BCCB is not room #N$03:
 $F96B CP $03        ; "#ROOM$03".
 $F96D JP NZ,$F06F   ; }
 $F970 LD A,$04      ; #REGa=#N$04.
 $F972 CALL $EF54    ; Call #R$EF54.
 $F975 RET           ; Return.
*$F976 LD HL,$EABC   ; {Call #R$C37F with #R$EABC.
 $F979 CALL $C37F    ; }
 $F97C JR NZ,$F984   ; Jump to #R$F984 if the token isn't for the .
; Print "#STR$BED1,$08($b==$FF)".
 $F97E LD HL,$BED1   ; #REGhl=#R$BED1.
 $F981 JP $F03A      ; Jump to #R$F03A.
*$F984 LD HL,$EA0D   ; {Call #R$C37F with #R$EA0D.
 $F987 CALL $C37F    ; }
 $F98A JP Z,$F48D    ; Jump to #R$F48D if the token is for the .
 $F98D LD HL,$EA1D   ; {Call #R$C37F with #R$EA1D.
 $F990 CALL $C37F    ; }
 $F993 JP Z,$F4B4    ; Jump to #R$F4B4 if the token is for the .
 $F996 JP $F06F      ; Jump to #R$F06F.

; Action: Drink
@label=Action_Drink
c$F999 CALL $C47B    ; Call #R$C47B.
 $F99C RET C         ; Return if the direct object is malformed.
 $F99D LD HL,$E9CC   ; {Call #R$C37F with #R$E9CC.
 $F9A0 CALL $C37F    ; }
 $F9A3 JR NZ,$F9C1   ; Jump to #R$F9C1 if the token isn't for the .
 $F9A5 LD HL,$E895   ; #REGhl=#R$E895.
 $F9A8 CALL $C401    ; Call #R$C401.
 $F9AB LD B,A        ; #REGb=#REGa.
 $F9AC PUSH BC       ; Stash #REGbc on the stack.
 $F9AD CALL $C3E4    ; Call #R$C3E4.
 $F9B0 JR NZ,$F9B6   ; Jump to #R$F9B6 if #REGa is not equal to #N$04.
 $F9B2 LD HL,$BC98   ; #REGhl=#R$BC98.
 $F9B5 DEC (HL)      ; Decrease *#REGhl by one.
*$F9B6 POP BC        ; Restore #REGbc from the stack.
 $F9B7 LD A,B        ; #REGa=#REGb.
 $F9B8 CALL $C3EA    ; Call #R$C3EA.
; Print "#STR$E175,$08($b==$FF)".
 $F9BB LD HL,$E175   ; #REGhl=#R$E175.
 $F9BE JP $F03A      ; Jump to #R$F03A.
*$F9C1 LD HL,$E9D7   ; {Call #R$C37F with #R$E9D7.
 $F9C4 CALL $C37F    ; }
 $F9C7 JR NZ,$F9D3   ; Jump to #R$F9D3 if the token isn't for the .
; Bad luck!
 $F9C9 LD HL,$EDD7   ; {Switch #R$EDD7 onto the stack so the next return actions a "game
 $F9CC EX (SP),HL    ; over".}
 $F9CD LD HL,$E19B   ; #REGhl=#R$E19B.
 $F9D0 JP $F03A      ; Jump to #R$F03A.
*$F9D3 LD HL,$E9E5   ; {Call #R$C37F with #R$E9E5.
 $F9D6 CALL $C37F    ; }
 $F9D9 JR NZ,$F9E1   ; Jump to #R$F9E1 if the token isn't for the .
 $F9DB LD HL,$E208   ; #REGhl=#R$E208.
 $F9DE JP $F03A      ; Jump to #R$F03A.
*$F9E1 JP $F083      ; Jump to #R$F083.

; Action: Open
@label=Action_Open
c$F9E4 CALL $C47B    ; Call #R$C47B.
 $F9E7 RET C         ; Return if the direct object is malformed.
 $F9E8 LD HL,$EAB8   ; {Call #R$C37F with #R$EAB8.
 $F9EB CALL $C37F    ; }
 $F9EE JR NZ,$FA14   ; Jump to #R$FA14 if the token isn't for the .
 $F9F0 LD HL,$E87A   ; #REGhl=#R$E87A.
 $F9F3 CALL $C401    ; Call #R$C401.
 $F9F6 LD B,A        ; #REGb=#REGa.
 $F9F7 LD C,$0D      ; #REGc=#N$0D.
 $F9F9 PUSH BC       ; Stash #REGbc on the stack.
 $F9FA CALL $C3E4    ; Call #R$C3E4.
 $F9FD POP BC        ; Restore #REGbc from the stack.
 $F9FE JP NZ,$F07E   ; Jump to #R$F07E if *#REGhl is not equal to #N$0D.
 $FA01 CALL $C426    ; Call #R$C426.
 $FA04 LD HL,$BC66   ; {Set bit 2 of *#R$BC66 which relates to the player being
 $FA07 SET 2,(HL)    ; drunk.}
 $FA09 LD A,$06      ; {Write #N$06 to *#R$BC69.
 $FA0B LD ($BC69),A  ; }
; Print "#STR$E238,$08($b==$FF)".
 $FA0E LD HL,$E238   ; #REGhl=#R$E238.
 $FA11 JP $F03A      ; Jump to #R$F03A.
; Handle drinking water.
@label=Handler_DrinkWater
*$FA14 LD HL,$EABA   ; {Call #R$C37F with #R$EABA.
 $FA17 CALL $C37F    ; }
 $FA1A JR NZ,$FA39   ; Jump to #R$FA39 if the token isn't for drinking the
                     ; water.
; The player wants to drink water but determine what type of water...
 $FA1C LD A,($BCCB)  ; #REGa=*#R$BCCB.
 $FA1F LD HL,$FA35   ; #REGhl=#R$FA35.
 $FA22 LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $FA25 CPIR          ; CPIR.
 $FA27 JR Z,$FA2F    ; Jump to #R$FA2F if the current room contains fresh
                     ; water.
; Else it must be salt water - so report this.
; .
; Print "#STR$E28E,$08($b==$FF)".
 $FA29 LD HL,$E28E   ; #REGhl=#R$E28E.
 $FA2C JP $F03A      ; Jump to #R$F03A.
; Print "#STR$E2AC,$08($b==$FF)".
@label=Action_DrinkFreshWater
*$FA2F LD HL,$E2AC   ; #REGhl=#R$E2AC.
 $FA32 JP $F03A      ; Jump to #R$F03A.
; Any room ID which contains fresh, drinkable water.
@label=Table_RoomsFreshWater
 $FA35 DEFB $14      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $FA36 DEFB $11      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $FA37 DEFB $12      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $FA38 DEFB $64      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
; Tried to drink water where there is none.
@label=Action_CantDrinkWater
*$FA39 JP $F06F      ; Jump to #R$F06F.

; Action: Close/ Shut
@label=Action_CloseShut
c$FA3C CALL $C47B    ; Call #R$C47B.
 $FA3F RET C         ; Return if the direct object is malformed.
 $FA40 LD HL,$EABE   ; {Call #R$C37F with #R$EABE.
 $FA43 CALL $C37F    ; }
 $FA46 JR NZ,$FA85   ; Jump to #R$FA85 if the token isn't for the .
 $FA48 LD A,($BCCB)  ; #REGa=*#R$BCCB.
 $FA4B CP $61        ; {Jump to #R$FA53 if #REGa is room #N$61: "#ROOM$61".
 $FA4D JR Z,$FA53    ; }
 $FA4F CP $62        ; {Jump to #R$FA85 if #REGa is not room #N$62: "#ROOM$62".
 $FA51 JR NZ,$FA85   ; }
*$FA53 LD HL,$E8CA   ; #REGhl=#R$E8CA.
 $FA56 CALL $C401    ; Call #R$C401.
 $FA59 CP $2E        ; {Jump to #R$FA63 if #REGa is not equal to #N$2E.
 $FA5B JR NZ,$FA63   ; }
; Print "#STR$E2F1,$08($b==$FF)".
 $FA5D LD HL,$E2F1   ; #REGhl=#R$E2F1.
 $FA60 JP $F03A      ; Jump to #R$F03A.
*$FA63 CP $2D        ; {Jump to #R$FA6C if #REGa is equal to #N$2D.
 $FA65 JR Z,$FA6C    ; }
 $FA67 CP $30        ; {Jump to #R$F088 if #REGa is not equal to #N$30.
 $FA69 JP NZ,$F088   ; }
*$FA6C LD BC,$2D2C   ; {Call #R$C426 to transform item #N$2C (#ITEM$2C) into item #N$2D
 $FA6F CALL $C426    ; (#ITEM$2D).}
 $FA72 LD BC,$302F   ; {Call #R$C426 to transform item #N$2F (#ITEM$2F) into item #N$30
 $FA75 CALL $C426    ; (#ITEM$30).}
 $FA78 LD A,$62      ; {Write #N$62 to *#R$ED57.
 $FA7A LD ($ED57),A  ; }
 $FA7D LD A,$61      ; {Write #N$61 to *#R$ED5C.
 $FA7F LD ($ED5C),A  ; }
 $FA82 JP $F06A      ; Jump to #R$F06A.
*$FA85 LD HL,$EAC0   ; {Call #R$C37F with #R$EAC0.
 $FA88 CALL $C37F    ; }
 $FA8B JR NZ,$FAA5   ; Jump to #R$FAA5 if the token isn't for the .
 $FA8D LD A,($BCCB)  ; {Jump to #R$FAA5 if *#R$BCCB is not room #N$6A:
 $FA90 CP $6A        ; "#ROOM$6A".
 $FA92 JR NZ,$FAA5   ; }
 $FA94 LD A,$31      ; {Call #R$C35F with #ITEM$31.
 $FA96 CALL $C35F    ; }
 $FA99 JP Z,$F088    ; Jump to #R$F088 if #ITEM$31 is present in the current
                     ; room.
 $FA9C CALL $F06F    ; Call #R$F06F.
; Print "#STR$E305,$08($b==$FF)".
 $FA9F LD HL,$E305   ; #REGhl=#R$E305.
 $FAA2 JP $F03A      ; Jump to #R$F03A.
@label=CloseShut_Invalid
*$FAA5 JP $F06F      ; Jump to #R$F06F.

; Action: Shout
@label=Action_Shout
c$FAA8 CALL $C47B    ; Call #R$C47B.
 $FAAB RET C         ; Return if the direct object is malformed.
 $FAAC LD HL,$EABE   ; {Call #R$C37F with #R$EABE.
 $FAAF CALL $C37F    ; }
 $FAB2 JR NZ,$FAE5   ; Jump to #R$FAE5 if the token isn't for the .
 $FAB4 LD A,($BCCB)  ; {Jump to #R$FABF if *#R$BCCB is room #N$61: "#ROOM$61".
 $FAB7 CP $61        ;
 $FAB9 JR Z,$FABF    ; }
 $FABB CP $62        ; {Jump to #R$FAE5 if *#R$BCCB is not room #N$62:
 $FABD JR NZ,$FAE5   ; "#ROOM$62".}
*$FABF LD HL,$E8CA   ; #REGhl=#R$E8CA.
 $FAC2 CALL $C401    ; Call #R$C401.
 $FAC5 CP $2D        ; {Jump to #R$F08D if #REGa is equal to #N$2D.
 $FAC7 JP Z,$F08D    ; }
 $FACA CP $30        ; {Jump to #R$F08D if #REGa is equal to #N$30.
 $FACC JP Z,$F08D    ; }
 $FACF LD BC,$2C2D   ; {Call #R$C426 to transform item #N$2D (#ITEM$2D) into item #N$2C
 $FAD2 CALL $C426    ; (#ITEM$2C).}
 $FAD5 LD BC,$2F30   ; {Call #R$C426 to transform item #N$30 (#ITEM$30) into item #N$2F
 $FAD8 CALL $C426    ; (#ITEM$2F).}
 $FADB XOR A         ; {Write #N$00 to: #LIST { *#R$ED57 } { *#R$ED5C } LIST#
 $FADC LD ($ED57),A  ;
 $FADF LD ($ED5C),A  ; }
 $FAE2 JP $F06A      ; Jump to #R$F06A.
*$FAE5 LD HL,$EAC0   ; {Call #R$C37F with #R$EAC0.
 $FAE8 CALL $C37F    ; }
 $FAEB JR NZ,$FB05   ; Jump to #R$FB05 if the token isn't for the .
 $FAED LD A,($BCCB)  ; {Jump to #R$FB05 if *#R$BCCB is not room #N$6A:
 $FAF0 CP $6A        ; "#ROOM$6A".
 $FAF2 JR NZ,$FB05   ; }
 $FAF4 LD A,$32      ; {Call #R$C35F with #ITEM$32.
 $FAF6 CALL $C35F    ; }
 $FAF9 JP Z,$F08D    ; Jump to #R$F08D if #ITEM$32 is present in the current
                     ; room.
 $FAFC CALL $F06F    ; Call #R$F06F.
; Print "#STR$E305,$08($b==$FF)".
 $FAFF LD HL,$E305   ; #REGhl=#R$E305.
 $FB02 JP $F03A      ; Jump to #R$F03A.
*$FB05 LD HL,$EAC5   ; {Call #R$C37F with #R$EAC5.
 $FB08 CALL $C37F    ; }
 $FB0B JR NZ,$FB13   ; Jump to #R$FB13 if the token isn't for the .
; Print "#STR$E31A,$08($b==$FF)".
 $FB0D LD HL,$E31A   ; #REGhl=#R$E31A.
 $FB10 JP $F03A      ; Jump to #R$F03A.
*$FB13 JP $F06F      ; Jump to #R$F06F.

; Action: Give
@label=Action_Give
c$FB16 CALL $C3AE    ; Call #R$C3AE.
 $FB19 JP NZ,$F074   ; Jump to #R$F074 if #REGa is not equal to #N$32.
 $FB1C LD HL,$EAC7   ; {Call #R$C37F with #R$EAC7.
 $FB1F CALL $C37F    ; }
 $FB22 JR NZ,$FB6E   ; Jump to #R$FB6E if the token isn't for the .
 $FB24 LD A,$39      ; {Call #R$C35F with #ITEM$39.
 $FB26 CALL $C35F    ; }
 $FB29 JP NZ,$F06A   ; Jump to #R$F06A if #ITEM$39 isn't in the current room.
 $FB2C LD A,$29      ; {Call #R$C35F with #ITEM$29.
 $FB2E CALL $C35F    ; }
 $FB31 JR Z,$FB43    ; Jump to #R$FB43 if #REGa is equal to #N$29.
; Bad luck!
 $FB33 LD HL,$EDD7   ; {Switch #R$EDD7 onto the stack so the next return actions a "game
 $FB36 EX (SP),HL    ; over".}
; Print "#STR$E333,$08($b==$FF)".
 $FB37 LD HL,$E333   ; #REGhl=#R$E333.
 $FB3A CALL $BAB1    ; Call #R$BAB1.
; Print "#STR$E36A,$08($b==$FF)".
 $FB3D LD HL,$E36A   ; #REGhl=#R$E36A.
 $FB40 JP $F03E      ; Jump to #R$F03E.
*$FB43 LD HL,$BC6F   ; #REGhl=#R$BC6F.
 $FB46 RES 0,(HL)    ; Reset bit 0 of *#REGhl.
 $FB48 LD A,$29      ; #REGa=#N$29 (event ID: #N($29&$7F)).
 $FB4A CALL $C3EA    ; Call #R$C3EA.
 $FB4D LD BC,$393A   ; {Call #R$C426 to transform item #N$3A (#ITEM$3A) into item #N$39
 $FB50 CALL $C426    ; (#ITEM$39).}
 $FB53 LD A,$2F      ; {Write #N$2F to *#R$EC27 to open up westbound access to #ROOM$2F
 $FB55 LD ($EC27),A  ; from #ROOM$2E.}
 $FB58 LD A,$30      ; {Write #N$30 to *#R$EC2A to open up northbound access to #ROOM$30
 $FB5A LD ($EC2A),A  ; from #ROOM$2F.}
 $FB5D LD A,$31      ; {Write #N$31 to *#R$EC30 to open up northbound access to #ROOM$31
 $FB5F LD ($EC30),A  ; from #ROOM$30.}
; Print "#STR$E333,$08($b==$FF)".
 $FB62 LD HL,$E333   ; #REGhl=#R$E333.
 $FB65 CALL $BAB1    ; Call #R$BAB1.
; Print "#STR$E384,$08($b==$FF)".
 $FB68 LD HL,$E384   ; #REGhl=#R$E384.
 $FB6B JP $F03E      ; Jump to #R$F03E.
@label=Give_Invalid
*$FB6E JP $F074      ; Jump to #R$F074.

; Action: Insert
@label=Action_Insert
c$FB71 CALL $C49F    ; Call #R$C49F.
 $FB74 RET C         ; Return if #REGa is less than #N$31.
 $FB75 LD HL,$EA70   ; {Call #R$C37F with #R$EA70.
 $FB78 CALL $C37F    ; }
 $FB7B JR NZ,$FB80   ; Jump to #R$FB80 if the token isn't for inserting the rod into the
                     ; hole.
 $FB7D JP $F81B      ; Jump to #R$F81B.
@label=Insert_Invalid
*$FB80 JP $F06F      ; Jump to #R$F06F.

; Action: Swearing
@label=Action_Swearing
c$FB83 CALL $C47B    ; Call #R$C47B.
 $FB86 RET C         ; Return if the direct object is malformed.
 $FB87 LD HL,$BC54   ; #REGhl=#R$BC54.
 $FB8A BIT 2,(HL)    ; Test bit 2 of *#REGhl.
 $FB8C JR NZ,$FB96   ; Jump to #R$FB96 if #REGa is not equal to #N$31.
 $FB8E SET 2,(HL)    ; Set bit 2 of *#REGhl.
; Print "#STR$E3A3,$08($b==$FF)".
 $FB90 LD HL,$E3A3   ; #REGhl=#R$E3A3.
 $FB93 JP $F03A      ; Jump to #R$F03A.
*$FB96 BIT 3,(HL)    ; Test bit 3 of *#REGhl.
 $FB98 JR NZ,$FBA2   ; Jump to #R$FBA2 if #REGa is not equal to #N$31.
 $FB9A SET 3,(HL)    ; Set bit 3 of *#REGhl.
; Print "#STR$E3B8,$08($b==$FF)".
 $FB9C LD HL,$E3B8   ; #REGhl=#R$E3B8.
 $FB9F JP $F03A      ; Jump to #R$F03A.
; Print "#STR$E3F7,$08($b==$FF)".
*$FBA2 LD HL,$E3F7   ; #REGhl=#R$E3F7.
 $FBA5 JP $F03A      ; Jump to #R$F03A.

; Action: Pull
@label=Action_Pull
c$FBA8 CALL $C47B    ; Call #R$C47B.
 $FBAB RET C         ; Return if the direct object is malformed.
 $FBAC CP $02        ; {Jump to #R$F074 if #REGa is greater than #N$02.
 $FBAE JP NC,$F074   ; }
 $FBB1 LD HL,$EACB   ; {Call #R$C37F with #R$EACB.
 $FBB4 CALL $C37F    ; }
 $FBB7 JR NZ,$FBD2   ; Jump to #R$FBD2 if the token isn't for the .
 $FBB9 LD A,$34      ; {Call #R$C35F with #ITEM$34.
 $FBBB CALL $C35F    ; }
 $FBBE JP Z,$F065    ; Jump to #R$F065 if #REGa is equal to #N$34.
 $FBC1 LD BC,$3B34   ; {Call #R$C426 to transform item #N$3B (#ITEM$3B) into item #N$34
 $FBC4 CALL $C426    ; (#ITEM$34).}
 $FBC7 LD A,$60      ; {Write #N$60 to *#R$ED4F to open up downward access to #ROOM$60
 $FBC9 LD ($ED4F),A  ; from #ROOM$5F.}
; Print "#STR$E40B,$08($b==$FF)".
 $FBCC LD HL,$E40B   ; #REGhl=#R$E40B.
 $FBCF JP $F03A      ; Jump to #R$F03A.
@label=Pull_Invalid
*$FBD2 JP $F06F      ; Jump to #R$F06F.

; Action: Wear
@label=Action_Wear
c$FBD5 CALL $C47B    ; Call #R$C47B.
 $FBD8 RET C         ; Return if the direct object is malformed.
 $FBD9 CP $02        ; {Jump to #R$F074 if #REGa is greater than #N$02.
 $FBDB JP NC,$F074   ; }
; Was the player trying to wear ... the eyepatch?
 $FBDE LD HL,$E9F1   ; {Call #R$C37F with #R$E9F1.
 $FBE1 CALL $C37F    ; }
 $FBE4 JR NZ,$FC0A   ; Jump to #R$FC0A if the token isn't for the eyepatch.
 $FBE6 LD A,$11      ; {Call #R$C35F with #ITEM$11.
 $FBE8 CALL $C35F    ; }
 $FBEB JR NZ,$FBF3   ; Jump to #R$FBF3 if #ITEM$11 isn't in the current room.
; Print "#STR$E44C,$08($b==$FF)".
 $FBED LD HL,$E44C   ; #REGhl=#R$E44C.
 $FBF0 JP $F03A      ; Jump to #R$F03A.
*$FBF3 LD A,$10      ; {Call #R$C3E4 using item: #ITEM$10.
 $FBF5 CALL $C3E4    ; }
 $FBF8 JP NZ,$F07E   ; Jump to #R$F07E if #REGa is not equal to #N$10.
 $FBFB LD BC,$1011   ; {Call #R$C426 to transform item #N$10 (#ITEM$10) into item #N$11
 $FBFE CALL $C426    ; (#ITEM$11).}
 $FC01 CALL $F06A    ; Call #R$F06A.
; Print "#STR$E467,$08($b==$FF)".
 $FC04 LD HL,$E467   ; #REGhl=#R$E467.
 $FC07 JP $F03A      ; Jump to #R$F03A.
; Was the player trying to wear ... the shoe?
@label=Wear_CheckShoe
*$FC0A LD HL,$E9D3   ; {Call #R$C37F with #R$E9D3.
 $FC0D CALL $C37F    ; }
 $FC10 JR NZ,$FC18   ; Jump to #R$FC18 if the token isn't for the shoe.
; Print "#STR$E486,$08($b==$FF)".
 $FC12 LD HL,$E486   ; #REGhl=#R$E486.
 $FC15 JP $F03A      ; Jump to #R$F03A.
; Was the player trying to wear ... the jewels?
@label=Wear_CheckJewels
*$FC18 LD HL,$E9DB   ; {Call #R$C37F with #R$E9DB.
 $FC1B CALL $C37F    ; }
 $FC1E JP Z,$F06F    ; Jump to #R$F06F if the token is for the jewels.
 $FC21 JP $F092      ; Jump to #R$F092.

; Action: Light/ Strike
@label=Action_LightStrike
c$FC24 CALL $C47B    ; Call #R$C47B.
 $FC27 RET C         ; Return if the direct object is malformed.
 $FC28 CP $02        ; {Jump to #R$F074 if #REGa is greater than #N$02.
 $FC2A JP NC,$F074   ; }
; Was the player trying to light ... the match?
 $FC2D LD HL,$E9E1   ; {Call #R$C37F with #R$E9E1.
 $FC30 CALL $C37F    ; }
; The match is the only item which is light/ strikable.
 $FC33 JR NZ,$FC5E   ; Jump to #R$FC5E if the token isn't for the match.
; The player definitely wants to light/ strike the match ... but is it
; already lit?
 $FC35 LD A,$03      ; {Call #R$C35F using item: #ITEM$03.
 $FC37 CALL $C35F    ; }
 $FC3A JP Z,$F079    ; Jump to #R$F079 if the lit match is already in the players
                     ; possession.
; The match isn't already lit, but is it either in the room, or in the
; players inventory?
 $FC3D LD A,$02      ; {Call #R$C3E4 using item: #ITEM$02.
 $FC3F CALL $C3E4    ; }
 $FC42 JP NZ,$F07E   ; Jump to #R$F07E if the player is not holding the (unlit)
                     ; match.
; The player can light the match- so go ahead and do this.
 $FC45 LD BC,$0203   ; {Call #R$C426 to transform item #N$02 (#ITEM$02) into item #N$03
 $FC48 CALL $C426    ; (#ITEM$03).}
 $FC4B LD HL,$BC66   ; {Set bit 6 of *#R$BC66 which activates lighting the
 $FC4E SET 6,(HL)    ; match.}
; The event is turn-based, the player only has the lit match for #N$06
; turns.
 $FC50 LD A,$06      ; {Write #N$06 to *#R$BC6D.
 $FC52 LD ($BC6D),A  ; }
 $FC55 CALL $F06A    ; Call #R$F06A.
; Print "#STR$E4D1,$08($b==$FF)".
 $FC58 LD HL,$E4D1   ; #REGhl=#R$E4D1.
 $FC5B JP $F03A      ; Jump to #R$F03A.
; The token wasn't valid.
@label=LightStrike_Invalid
*$FC5E JP $F06F      ; Jump to #R$F06F.

; Action: Enter
@label=Action_Enter
c$FC61 CALL $C47B    ; Call #R$C47B.
 $FC64 RET C         ; Return if the direct object is malformed.
 $FC65 CP $02        ; {Jump to #R$F074 if #REGa is greater than #N$02.
 $FC67 JP NC,$F074   ; }
; Was the player trying to enter ... the cave?
 $FC6A LD HL,$EACD   ; {Call #R$C37F with #R$EACD.
 $FC6D CALL $C37F    ; }
 $FC70 JR NZ,$FC8C   ; Jump to #R$FC8C if the token isn't for the cave.
; The player is attempting to enter the cave.
; .
; Validate that the player isn't already inside the cave.
 $FC72 LD A,($BCCB)  ; {Jump to #R$F079 if *#R$BCCB is either room #N$52: "#ROOM$52" or
 $FC75 CP $52        ; room #N$3F: "#ROOM$3F".
 $FC77 JP Z,$F079    ;
 $FC7A CP $3F        ;
 $FC7C JP Z,$F079    ; }
 $FC7F LD B,$3F      ; Load room #N$3F: "#ROOM$3F" into #REGb.
 $FC81 CP $3E        ; {Jump to #R$FC87 if *#R$BCCB is room #N$3E: "#ROOM$3E".
 $FC83 JR Z,$FC87    ; }
 $FC85 LD B,$52      ; Load room #N$52: "#ROOM$52" into #REGb.
@label=Enter_SetDestinationRoom
*$FC87 LD A,B        ; Copy #REGb into the #REGa register.
 $FC88 CALL $EF54    ; Call #R$EF54.
 $FC8B RET           ; Return.
; Was the player trying to enter ... the boat?
@label=Enter_CheckBoat
*$FC8C LD HL,$EACF   ; {Call #R$C37F with #R$EACF.
 $FC8F CALL $C37F    ; }
; Either way, it's a bad outcome.
 $FC92 JP Z,$F074    ; Jump to #R$F074 if the token is for the boat.
; Nothing else is able to be entered, so provide a generic response.
 $FC95 JP $F06F      ; Jump to #R$F06F.

; Action: Move
@label=Action_Move
c$FC98 CALL $C47B    ; Call #R$C47B.
 $FC9B RET C         ; Return if the direct object is malformed.
; Is the player asking to move the stone?
 $FC9C LD HL,$EAD8   ; {Call #R$C37F with #R$EAD8.
 $FC9F CALL $C37F    ; }
 $FCA2 JR NZ,$FCAA   ; Jump to #R$FCAA if the token isn't for the stone.
; The player is asking to move the stone.
; .
; Print "#STR$E305,$08($b==$FF)".
 $FCA4 LD HL,$E305   ; #REGhl=#R$E305.
 $FCA7 JP $F03A      ; Jump to #R$F03A.
; Is the player asking to move the stone with the crowbar?
@label=Move_StoneWithCrowbar
*$FCAA LD HL,$EADD   ; {Call #R$C37F with #R$EADD.
 $FCAD CALL $C37F    ; }
 $FCB0 JR NZ,$FCCA   ; Jump to #R$FCCA if the token isn't asking to move the stone with
                     ; the crowbar.
; The player is asking to move the stone with the crowbar.
; .
; But ... have they done this already?
 $FCB2 LD A,$4A      ; {Jump to #R$F079 if #R$C35F reports that #ITEM$4A is in the same
 $FCB4 CALL $C35F    ; room as the player.
 $FCB7 JP Z,$F079    ; }
; Handle moving the stone with the crowbar.
; .
; This brings items #ITEM$4A and #ITEM$3B into the current room.
 $FCBA LD A,$4A      ; {Call #R$C3F1 with item #N$4A: #ITEM$4A.
 $FCBC CALL $C3F1    ; }
 $FCBF LD A,$3B      ; {Call #R$C3F1 with item #N$3B: #ITEM$3B.
 $FCC1 CALL $C3F1    ; }
; Print "#STR$E508,$08($b==$FF)".
 $FCC4 LD HL,$E508   ; #REGhl=#R$E508.
 $FCC7 JP $F03A      ; Jump to #R$F03A.
; Everything else isn't valid.
@label=Move_Invalid
*$FCCA JP $F074      ; Jump to #R$F074.

; Action: Unlock
@label=Action_Unlock
c$FCCD CALL $C47B    ; Call #R$C47B.
 $FCD0 RET C         ; Return if the direct object is malformed.
 $FCD1 LD HL,$EAE6   ; {Call #R$C37F with #R$EAE6.
 $FCD4 CALL $C37F    ; }
 $FCD7 JR NZ,$FCFF   ; Jump to #R$FCFF if the token isn't for the .
 $FCD9 LD A,($BCCB)  ; {Jump to #R$F06F if *#R$BCCB is room #N$6A: "#ROOM$6A".
 $FCDC CP $6A        ;
 $FCDE JP Z,$F06F    ; }
 $FCE1 LD A,$2E      ; {Call #R$C35F with #ITEM$2E.
 $FCE3 CALL $C35F    ; }
 $FCE6 JP NZ,$F079   ; Jump to #R$F079 if #ITEM$2E isn't in the current room.
 $FCE9 LD A,$1F      ; #REGa=#N$1F.
 $FCEB CALL $C3E4    ; Call #R$C3E4.
 $FCEE JR Z,$FCF6    ; Jump to #R$FCF6 if #REGa is equal to #N$1F.
; Print "#STR$E604,$08($b==$FF)".
 $FCF0 LD HL,$E604   ; #REGhl=#R$E604.
 $FCF3 JP $F03A      ; Jump to #R$F03A.
*$FCF6 LD BC,$2E2D   ; {Call #R$C426 to transform item #N$2D (#ITEM$2D) into item #N$2E
 $FCF9 CALL $C426    ; (#ITEM$2E).}
 $FCFC JP $F06A      ; Jump to #R$F06A.
*$FCFF JP $F06F      ; Jump to #R$F06F.

; Action: Row
@label=Action_Row
c$FD02 CALL $C4B7    ; Call #R$C4B7.
 $FD05 RET C         ; Return if #REGa is less than #N$1F.
 $FD06 CP $02        ; {Jump to #R$F074 if #REGa is greater than #N$02.
 $FD08 JP NC,$F074   ; }
 $FD0B LD A,($BCCB)  ; #REGa=*#R$BCCB.
 $FD0E LD HL,$FD1E   ; #REGhl=#R$FD1E.
 $FD11 LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $FD14 CPIR          ; CPIR.
 $FD16 JR Z,$FD21    ; Jump to #R$FD21 if #REGa is equal to #N$02.
; Print "#STR$DC37,$08($b==$FF)".
 $FD18 LD HL,$DC37   ; #REGhl=#R$DC37.
 $FD1B JP $F03A      ; Jump to #R$F03A.
; Any room ID in which, you're in the rowing boat.
@label=Table_RoomsRowingBoat
 $FD1E DEFB $6B      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $FD1F DEFB $04      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
 $FD20 DEFB $02      ; Room #N(#PEEK(#PC)): #ROOM(#PEEK(#PC)).
*$FD21 CP $02        ; {Jump to #R$FD29 if #REGa is not equal to #N$02.
 $FD23 JR NZ,$FD29   ; }
 $FD25 CALL $EF54    ; Call #R$EF54.
 $FD28 RET           ; Return.
*$FD29 LD HL,$EAEC   ; {Call #R$C37F with #R$EAEC.
 $FD2C CALL $C37F    ; }
 $FD2F JR NZ,$FD3F   ; Jump to #R$FD3F if the token isn't for the .
 $FD31 LD A,($BCCB)  ; {Jump to #R$F079 if *#R$BCCB is not room #N$04:
 $FD34 CP $04        ; "#ROOM$04".
 $FD36 JP NZ,$F079   ; }
 $FD39 LD A,$6B      ; #REGa=#N$6B.
 $FD3B CALL $EF54    ; Call #R$EF54.
 $FD3E RET           ; Return.
*$FD3F LD HL,$EAF5   ; {Call #R$C37F with #R$EAF5.
 $FD42 CALL $C37F    ; }
 $FD45 JR NZ,$FD54   ; Jump to #R$FD54 if the token isn't for the .
 $FD47 LD A,($BCCB)  ; {Jump to #R$FD67 if *#R$BCCB is not room #N$6B:
 $FD4A CP $6B        ; "#ROOM$6B".
 $FD4C JR NZ,$FD67   ; }
 $FD4E LD A,$04      ; #REGa=#N$04.
 $FD50 CALL $EF54    ; Call #R$EF54.
 $FD53 RET           ; Return.
*$FD54 LD HL,$EAFE   ; {Call #R$C37F with #R$EAFE.
 $FD57 CALL $C37F    ; }
 $FD5A JR Z,$FD67    ; Jump to #R$FD67 if the token is for the .
 $FD5C LD HL,$EB07   ; {Call #R$C37F with #R$EB07.
 $FD5F CALL $C37F    ; }
 $FD62 JR Z,$FD67    ; Jump to #R$FD67 if the token is for the .
 $FD64 JP $F074      ; Jump to #R$F074.
*$FD67 LD A,$02      ; #REGa=#N$02.
 $FD69 CALL $EF54    ; Call #R$EF54.
 $FD6C RET           ; Return.

; Action: Swim
@label=Action_Swim
c$FD6D CALL $C47B    ; Call #R$C47B.
 $FD70 RET C         ; Return if the direct object is malformed.
 $FD71 CP $02        ; {Jump to #R$F074 if #REGa is equal to #N$02.
 $FD73 JP Z,$F074    ; }
; Print "#STR$DB5F,$08($b==$FF)".
 $FD76 LD HL,$DB5F   ; #REGhl=#R$DB5F.
 $FD79 JP $F03A      ; Jump to #R$F03A.

; Action: In
;
; .
;
; .
;
; Print "#STR$E5A4,$08($b==$FF)".
@label=Action_In
c$FD7C LD HL,$E5A4   ; #REGhl=#R$E5A4.
 $FD7F JP $F03A      ; Jump to #R$F03A.

; Game Start
;
; Used by the routine at #R$C592.
@label=GameStart
c$FD82 LD HL,$FDB5   ; {Copy #N$0144 bytes from #R$FDB5 to #R$BBF0.
 $FD85 LD DE,$BBF0   ;
 $FD88 LD BC,$0144   ;
 $FD8B LDIR          ; }
; Remove a bunch of room exits (as actions in the game will open them
; back up).
 $FD8D LD IX,$ED9E   ; #REGix=#R$ED9E.
 $FD91 LD A,($BD32)  ; {#REGb=*#R$BD32.
 $FD94 LD B,A        ; }
 $FD95 XOR A         ; Set #REGa to #N$00 which "removes" the exit.
@label=GameStart_Loop
*$FD96 LD L,(IX+$00) ; #REGl=*#REGix+#N$00.
 $FD99 LD H,(IX+$01) ; #REGh=*#REGix+#N$01.
 $FD9C LD (HL),A     ; Write #REGa to *#REGhl.
 $FD9D INC IX        ; {Move to the next address in the table.
 $FD9F INC IX        ; }
 $FDA1 DJNZ $FD96    ; Decrease the exits counter by one and loop back to #R$FD96 until
                     ; all the room exits have been cleared.
; Ensure two exits are "open" (as they can become blocked in the game).
 $FDA3 LD A,$2F      ; {Enable the exit "west to room #R$EC27(#N$2F)" for
 $FDA5 LD ($EC27),A  ; #ROOM$2E.}
 $FDA8 LD A,$30      ; {Enable the exit "north to room #R$EC2A(#N$30)" for
 $FDAA LD ($EC2A),A  ; #ROOM$2F.}
 $FDAD LD A,$03      ; #REGa=#N$03.
 $FDAF CALL $EF54    ; Call #R$EF54.
 $FDB2 JP $EDC4      ; Jump to #R$EDC4.

; Default Game State
@label=DefaultGameState
g$FDB5 DEFB $03,$04,$22,$00,$07,$00,$00,$0E
 $FDBD DEFB $62,$6A,$00,$0B,$00,$00,$27,$51
 $FDC5 DEFB $50,$00,$42,$47,$00,$43,$3D,$31
 $FDCD DEFB $1F,$00,$00,$2F,$00,$62,$67,$69
 $FDD5 DEFB $1C,$6B,$51,$00,$00,$00,$00,$51
 $FDDD DEFB $00,$30,$32,$3F,$00,$00,$61,$00
 $FDE5 DEFB $62,$00,$6A,$15,$00,$31,$00,$4E
 $FDED DEFB $4F,$2E,$00,$00,$3E,$3F,$52,$66
 $FDF5 DEFB $68,$67,$5F,$02,$30,$14,$11,$12
 $FDFD DEFB $64,$51,$00,$06,$06,$6B,$6C,$00
 $FE05 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE0D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE15 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE1D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE25 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE2D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE35 DEFB $29,$00,$00,$00,$00,$00,$00,$00
 $FE3D DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE45 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE4D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE55 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE5D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE65 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE6D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE75 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE7D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE85 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE8D DEFB $00,$00,$00,$03,$33,$E9,$37,$E9
 $FE95 DEFB $3B,$E9,$3F,$E9,$43,$E9,$47,$E9
 $FE9D DEFB $4D,$E9,$53,$E9,$5B,$E9,$00,$00
 $FEA5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEAD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEB5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEBD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEC5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FECD DEFB $00,$00,$00,$00,$1D,$E6,$86,$FF
 $FED5 DEFB $10,$EB,$4E,$D3,$5D,$E9,$A8,$FF
 $FEDD DEFB $EC,$D3,$6A,$E9,$C6,$D4,$3E,$E8
 $FEE5 DEFB $3A,$FF,$9E,$ED,$96,$FF,$0D,$E9
 $FEED DEFB $4F,$00,$30,$00,$26,$00,$0D,$00
 $FEF5 DEFB $09,$00,$13,$00

; Unused
u$FEF9 DEFB $00

; Handler: Room Images
;
; .
;
; .
;
; Displays the image for the boat.
@label=DisplayImage_Boat
c$FEFA LD IX,$607C   ; #REGix=#R$607C.
 $FEFE JR $FF2E      ; Jump to #R$FF2E.
; Displays the image for the sand dunes.
@label=DisplayImage_SandDunes
 $FF00 LD IX,$6CA4   ; #REGix=#R$6CA4.
 $FF04 JR $FF2E      ; Jump to #R$FF2E.
; Displays the image for the bridge.
@label=DisplayImage_Bridge
 $FF06 LD IX,$7731   ; #REGix=#R$7731.
 $FF0A JR $FF2E      ; Jump to #R$FF2E.
; Displays the image for the cave.
@label=DisplayImage_Cave
 $FF0C LD IX,$8171   ; #REGix=#R$8171.
 $FF10 JR $FF2E      ; Jump to #R$FF2E.
; Displays the image for the door.
@label=DisplayImage_Door
 $FF12 LD IX,$8BC3   ; #REGix=#R$8BC3.
 $FF16 JR $FF2E      ; Jump to #R$FF2E.
; Displays the image for the huts.
@label=DisplayImage_Huts
 $FF18 LD IX,$966A   ; #REGix=#R$966A.
 $FF1C JR $FF2E      ; Jump to #R$FF2E.
; Displays the image for the cliffs.
@label=DisplayImage_Cliffs
 $FF1E LD IX,$A042   ; #REGix=#R$A042.
 $FF22 JR $FF2E      ; Jump to #R$FF2E.
; Displays the image for the cavern.
@label=DisplayImage_Cavern
 $FF24 LD IX,$A958   ; #REGix=#R$A958.
 $FF28 JR $FF2E      ; Jump to #R$FF2E.
; Displays the image for the treasure chest.
@label=DisplayImage_Treasure
 $FF2A LD IX,$B2A7   ; #REGix=#R$B2A7.
; All the image routines use this same routine.
@label=Handler_Images
*$FF2E CALL $BB3B    ; Call #R$BB3B.
 $FF31 LD A,$08      ; #REGa=#N$08.
 $FF33 CALL $C315    ; Call #R$C315.
 $FF36 CALL $BA5D    ; Call #R$BA5D.
 $FF39 RET           ; Return.

; Jump Table: Verbs
@label=JumpTable_Verbs
g$FF3A DEFW $F09C    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF3C DEFW $F12E    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF3E DEFW $F14B    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF40 DEFW $F155    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF42 DEFW $F159    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF44 DEFW $F15D    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF46 DEFW $F161    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF48 DEFW $F165    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF4A DEFW $F169    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF4C DEFW $F19D    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF4E DEFW $F236    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF50 DEFW $F23E    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF52 DEFW $F246    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF54 DEFW $F263    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF56 DEFW $F481    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF58 DEFW $F4D4    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF5A DEFW $F4D4    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF5C DEFW $F7AB    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF5E DEFW $F7D6    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF60 DEFW $F851    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF62 DEFW $F91B    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF64 DEFW $F946    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF66 DEFW $F999    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF68 DEFW $F9E4    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF6A DEFW $FA3C    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF6C DEFW $FAA8    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF6E DEFW $FB16    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF70 DEFW $FB71    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF72 DEFW $FB83    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF74 DEFW $FBA8    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF76 DEFW $FBD5    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF78 DEFW $FC24    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF7A DEFW $FC61    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF7C DEFW $FC98    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF7E DEFW $FCCD    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF80 DEFW $FD02    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF82 DEFW $FD6D    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).
 $FF84 DEFW $FD7C    ; Verb word token #N($2E+(#PC-$FF3A)/$02):
                     ; #TOKEN($2E+(#PC-$FF3A)/$02).

; Jump Table: Turn-Based Events
@label=JumpTable_TurnBasedEvents
g$FF86 DEFW $EE00    ; Event #N((#PC-$FF86)/$02).
 $FF88 DEFW $EE11    ; Event #N((#PC-$FF86)/$02).
 $FF8A DEFW $EE22    ; Event #N((#PC-$FF86)/$02).
 $FF8C DEFW $EE40    ; Event #N((#PC-$FF86)/$02).
 $FF8E DEFW $EE51    ; Event #N((#PC-$FF86)/$02).
 $FF90 DEFW $EE63    ; Event #N((#PC-$FF86)/$02).
 $FF92 DEFW $EE74    ; Event #N((#PC-$FF86)/$02).
 $FF94 DEFW $EE90    ; Event #N((#PC-$FF86)/$02).

; Jump Table: Scenic Events
@label=JumpTable_ScenicEvents
g$FF96 DEFW $EEA9    ; Event #N((#PC-$FF96)/$02).
 $FF98 DEFW $EEBB    ; Event #N((#PC-$FF96)/$02).
 $FF9A DEFW $EECD    ; Event #N((#PC-$FF96)/$02).
 $FF9C DEFW $EEDF    ; Event #N((#PC-$FF96)/$02).
 $FF9E DEFW $EEDF    ; Event #N((#PC-$FF96)/$02).
 $FFA0 DEFW $EEDF    ; Event #N((#PC-$FF96)/$02).
 $FFA2 DEFW $EEFC    ; Event #N((#PC-$FF96)/$02).
 $FFA4 DEFW $EF32    ; Event #N((#PC-$FF96)/$02).
 $FFA6 DEFW $EEDF    ; Event #N((#PC-$FF96)/$02).

; Jump Table: Room Images
;
; See #R$E95D.
@label=JumpTable_RoomImages
g$FFA8 DEFW $FEFA    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFAA DEFW $FF00    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFAC DEFW $FF00    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFAE DEFW $FF00    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFB0 DEFW $FF06    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFB2 DEFW $FF0C    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFB4 DEFW $FF12    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFB6 DEFW $FF18    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFB8 DEFW $FF1E    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFBA DEFW $FF1E    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFBC DEFW $FF1E    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFBE DEFW $FF24    ; Location Slot: #N((#PC-$FFA8)/$02).
 $FFC0 DEFW $FF2A    ; Location Slot: #N((#PC-$FFA8)/$02).

; Unused
u$FFC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFFA DEFB $00,$00,$00,$00,$00,$00
